
STM32C031.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001988  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08001a48  08001a48  00002a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ac0  08001ac0  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001ac0  08001ac0  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ac0  08001ac0  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ac0  08001ac0  00002ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001ac4  08001ac4  00002ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001ac8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08001ad4  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08001ad4  000030c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008244  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012a2  00000000  00000000  0000b278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000638  00000000  00000000  0000c520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004cf  00000000  00000000  0000cb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012093  00000000  00000000  0000d027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000830c  00000000  00000000  0001f0ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00071761  00000000  00000000  000273c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00098b27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000153c  00000000  00000000  00098b6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0009a0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001a30 	.word	0x08001a30

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001a30 	.word	0x08001a30

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 f985 	bl	8000532 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f811 	bl	800024e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f888 	bl	8000340 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000230:	f000 f852 	bl	80002d8 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000234:	23a0      	movs	r3, #160	@ 0xa0
 8000236:	05db      	lsls	r3, r3, #23
 8000238:	2120      	movs	r1, #32
 800023a:	0018      	movs	r0, r3
 800023c:	f000 fc5d 	bl	8000afa <HAL_GPIO_TogglePin>
	     HAL_Delay(1000);
 8000240:	23fa      	movs	r3, #250	@ 0xfa
 8000242:	009b      	lsls	r3, r3, #2
 8000244:	0018      	movs	r0, r3
 8000246:	f000 f9f1 	bl	800062c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800024a:	46c0      	nop			@ (mov r8, r8)
 800024c:	e7f2      	b.n	8000234 <main+0x14>

0800024e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024e:	b590      	push	{r4, r7, lr}
 8000250:	b08d      	sub	sp, #52	@ 0x34
 8000252:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000254:	2414      	movs	r4, #20
 8000256:	193b      	adds	r3, r7, r4
 8000258:	0018      	movs	r0, r3
 800025a:	231c      	movs	r3, #28
 800025c:	001a      	movs	r2, r3
 800025e:	2100      	movs	r1, #0
 8000260:	f001 fbba 	bl	80019d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000264:	003b      	movs	r3, r7
 8000266:	0018      	movs	r0, r3
 8000268:	2314      	movs	r3, #20
 800026a:	001a      	movs	r2, r3
 800026c:	2100      	movs	r1, #0
 800026e:	f001 fbb3 	bl	80019d8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000272:	193b      	adds	r3, r7, r4
 8000274:	2202      	movs	r2, #2
 8000276:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000278:	193b      	adds	r3, r7, r4
 800027a:	2280      	movs	r2, #128	@ 0x80
 800027c:	0052      	lsls	r2, r2, #1
 800027e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 8000280:	193b      	adds	r3, r7, r4
 8000282:	2280      	movs	r2, #128	@ 0x80
 8000284:	0152      	lsls	r2, r2, #5
 8000286:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000288:	193b      	adds	r3, r7, r4
 800028a:	2240      	movs	r2, #64	@ 0x40
 800028c:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028e:	193b      	adds	r3, r7, r4
 8000290:	0018      	movs	r0, r3
 8000292:	f000 fc4d 	bl	8000b30 <HAL_RCC_OscConfig>
 8000296:	1e03      	subs	r3, r0, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x50>
  {
    Error_Handler();
 800029a:	f000 f887 	bl	80003ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029e:	003b      	movs	r3, r7
 80002a0:	2207      	movs	r2, #7
 80002a2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002a4:	003b      	movs	r3, r7
 80002a6:	2200      	movs	r2, #0
 80002a8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80002aa:	003b      	movs	r3, r7
 80002ac:	2200      	movs	r2, #0
 80002ae:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80002b0:	003b      	movs	r3, r7
 80002b2:	2200      	movs	r2, #0
 80002b4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80002b6:	003b      	movs	r3, r7
 80002b8:	2200      	movs	r2, #0
 80002ba:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002bc:	003b      	movs	r3, r7
 80002be:	2100      	movs	r1, #0
 80002c0:	0018      	movs	r0, r3
 80002c2:	f000 fe19 	bl	8000ef8 <HAL_RCC_ClockConfig>
 80002c6:	1e03      	subs	r3, r0, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x80>
  {
    Error_Handler();
 80002ca:	f000 f86f 	bl	80003ac <Error_Handler>
  }
}
 80002ce:	46c0      	nop			@ (mov r8, r8)
 80002d0:	46bd      	mov	sp, r7
 80002d2:	b00d      	add	sp, #52	@ 0x34
 80002d4:	bd90      	pop	{r4, r7, pc}
	...

080002d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002dc:	4b16      	ldr	r3, [pc, #88]	@ (8000338 <MX_USART2_UART_Init+0x60>)
 80002de:	4a17      	ldr	r2, [pc, #92]	@ (800033c <MX_USART2_UART_Init+0x64>)
 80002e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002e2:	4b15      	ldr	r3, [pc, #84]	@ (8000338 <MX_USART2_UART_Init+0x60>)
 80002e4:	22e1      	movs	r2, #225	@ 0xe1
 80002e6:	0252      	lsls	r2, r2, #9
 80002e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002ea:	4b13      	ldr	r3, [pc, #76]	@ (8000338 <MX_USART2_UART_Init+0x60>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002f0:	4b11      	ldr	r3, [pc, #68]	@ (8000338 <MX_USART2_UART_Init+0x60>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80002f6:	4b10      	ldr	r3, [pc, #64]	@ (8000338 <MX_USART2_UART_Init+0x60>)
 80002f8:	2280      	movs	r2, #128	@ 0x80
 80002fa:	00d2      	lsls	r2, r2, #3
 80002fc:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000338 <MX_USART2_UART_Init+0x60>)
 8000300:	220c      	movs	r2, #12
 8000302:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000304:	4b0c      	ldr	r3, [pc, #48]	@ (8000338 <MX_USART2_UART_Init+0x60>)
 8000306:	2200      	movs	r2, #0
 8000308:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800030a:	4b0b      	ldr	r3, [pc, #44]	@ (8000338 <MX_USART2_UART_Init+0x60>)
 800030c:	2200      	movs	r2, #0
 800030e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000310:	4b09      	ldr	r3, [pc, #36]	@ (8000338 <MX_USART2_UART_Init+0x60>)
 8000312:	2200      	movs	r2, #0
 8000314:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000316:	4b08      	ldr	r3, [pc, #32]	@ (8000338 <MX_USART2_UART_Init+0x60>)
 8000318:	2200      	movs	r2, #0
 800031a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800031c:	4b06      	ldr	r3, [pc, #24]	@ (8000338 <MX_USART2_UART_Init+0x60>)
 800031e:	2200      	movs	r2, #0
 8000320:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000322:	4b05      	ldr	r3, [pc, #20]	@ (8000338 <MX_USART2_UART_Init+0x60>)
 8000324:	0018      	movs	r0, r3
 8000326:	f000 ff55 	bl	80011d4 <HAL_UART_Init>
 800032a:	1e03      	subs	r3, r0, #0
 800032c:	d001      	beq.n	8000332 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800032e:	f000 f83d 	bl	80003ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000332:	46c0      	nop			@ (mov r8, r8)
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	20000028 	.word	0x20000028
 800033c:	40004400 	.word	0x40004400

08000340 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b086      	sub	sp, #24
 8000344:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	0018      	movs	r0, r3
 800034a:	2314      	movs	r3, #20
 800034c:	001a      	movs	r2, r3
 800034e:	2100      	movs	r1, #0
 8000350:	f001 fb42 	bl	80019d8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000354:	4b14      	ldr	r3, [pc, #80]	@ (80003a8 <MX_GPIO_Init+0x68>)
 8000356:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000358:	4b13      	ldr	r3, [pc, #76]	@ (80003a8 <MX_GPIO_Init+0x68>)
 800035a:	2101      	movs	r1, #1
 800035c:	430a      	orrs	r2, r1
 800035e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000360:	4b11      	ldr	r3, [pc, #68]	@ (80003a8 <MX_GPIO_Init+0x68>)
 8000362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000364:	2201      	movs	r2, #1
 8000366:	4013      	ands	r3, r2
 8000368:	603b      	str	r3, [r7, #0]
 800036a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800036c:	23a0      	movs	r3, #160	@ 0xa0
 800036e:	05db      	lsls	r3, r3, #23
 8000370:	2200      	movs	r2, #0
 8000372:	2120      	movs	r1, #32
 8000374:	0018      	movs	r0, r3
 8000376:	f000 fba3 	bl	8000ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	2220      	movs	r2, #32
 800037e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	2201      	movs	r2, #1
 8000384:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	2200      	movs	r2, #0
 800038a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800038c:	1d3b      	adds	r3, r7, #4
 800038e:	2200      	movs	r2, #0
 8000390:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000392:	1d3a      	adds	r2, r7, #4
 8000394:	23a0      	movs	r3, #160	@ 0xa0
 8000396:	05db      	lsls	r3, r3, #23
 8000398:	0011      	movs	r1, r2
 800039a:	0018      	movs	r0, r3
 800039c:	f000 fa1e 	bl	80007dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003a0:	46c0      	nop			@ (mov r8, r8)
 80003a2:	46bd      	mov	sp, r7
 80003a4:	b006      	add	sp, #24
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	40021000 	.word	0x40021000

080003ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003b0:	b672      	cpsid	i
}
 80003b2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003b4:	46c0      	nop			@ (mov r8, r8)
 80003b6:	e7fd      	b.n	80003b4 <Error_Handler+0x8>

080003b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003be:	4b0f      	ldr	r3, [pc, #60]	@ (80003fc <HAL_MspInit+0x44>)
 80003c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80003c2:	4b0e      	ldr	r3, [pc, #56]	@ (80003fc <HAL_MspInit+0x44>)
 80003c4:	2101      	movs	r1, #1
 80003c6:	430a      	orrs	r2, r1
 80003c8:	641a      	str	r2, [r3, #64]	@ 0x40
 80003ca:	4b0c      	ldr	r3, [pc, #48]	@ (80003fc <HAL_MspInit+0x44>)
 80003cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003ce:	2201      	movs	r2, #1
 80003d0:	4013      	ands	r3, r2
 80003d2:	607b      	str	r3, [r7, #4]
 80003d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003d6:	4b09      	ldr	r3, [pc, #36]	@ (80003fc <HAL_MspInit+0x44>)
 80003d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80003da:	4b08      	ldr	r3, [pc, #32]	@ (80003fc <HAL_MspInit+0x44>)
 80003dc:	2180      	movs	r1, #128	@ 0x80
 80003de:	0549      	lsls	r1, r1, #21
 80003e0:	430a      	orrs	r2, r1
 80003e2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80003e4:	4b05      	ldr	r3, [pc, #20]	@ (80003fc <HAL_MspInit+0x44>)
 80003e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80003e8:	2380      	movs	r3, #128	@ 0x80
 80003ea:	055b      	lsls	r3, r3, #21
 80003ec:	4013      	ands	r3, r2
 80003ee:	603b      	str	r3, [r7, #0]
 80003f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003f2:	46c0      	nop			@ (mov r8, r8)
 80003f4:	46bd      	mov	sp, r7
 80003f6:	b002      	add	sp, #8
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	46c0      	nop			@ (mov r8, r8)
 80003fc:	40021000 	.word	0x40021000

08000400 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000400:	b590      	push	{r4, r7, lr}
 8000402:	b08b      	sub	sp, #44	@ 0x2c
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000408:	2414      	movs	r4, #20
 800040a:	193b      	adds	r3, r7, r4
 800040c:	0018      	movs	r0, r3
 800040e:	2314      	movs	r3, #20
 8000410:	001a      	movs	r2, r3
 8000412:	2100      	movs	r1, #0
 8000414:	f001 fae0 	bl	80019d8 <memset>
  if(huart->Instance==USART2)
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a1b      	ldr	r2, [pc, #108]	@ (800048c <HAL_UART_MspInit+0x8c>)
 800041e:	4293      	cmp	r3, r2
 8000420:	d130      	bne.n	8000484 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000422:	4b1b      	ldr	r3, [pc, #108]	@ (8000490 <HAL_UART_MspInit+0x90>)
 8000424:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000426:	4b1a      	ldr	r3, [pc, #104]	@ (8000490 <HAL_UART_MspInit+0x90>)
 8000428:	2180      	movs	r1, #128	@ 0x80
 800042a:	0289      	lsls	r1, r1, #10
 800042c:	430a      	orrs	r2, r1
 800042e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000430:	4b17      	ldr	r3, [pc, #92]	@ (8000490 <HAL_UART_MspInit+0x90>)
 8000432:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000434:	2380      	movs	r3, #128	@ 0x80
 8000436:	029b      	lsls	r3, r3, #10
 8000438:	4013      	ands	r3, r2
 800043a:	613b      	str	r3, [r7, #16]
 800043c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800043e:	4b14      	ldr	r3, [pc, #80]	@ (8000490 <HAL_UART_MspInit+0x90>)
 8000440:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000442:	4b13      	ldr	r3, [pc, #76]	@ (8000490 <HAL_UART_MspInit+0x90>)
 8000444:	2101      	movs	r1, #1
 8000446:	430a      	orrs	r2, r1
 8000448:	635a      	str	r2, [r3, #52]	@ 0x34
 800044a:	4b11      	ldr	r3, [pc, #68]	@ (8000490 <HAL_UART_MspInit+0x90>)
 800044c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800044e:	2201      	movs	r2, #1
 8000450:	4013      	ands	r3, r2
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000456:	0021      	movs	r1, r4
 8000458:	187b      	adds	r3, r7, r1
 800045a:	220c      	movs	r2, #12
 800045c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800045e:	187b      	adds	r3, r7, r1
 8000460:	2202      	movs	r2, #2
 8000462:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000464:	187b      	adds	r3, r7, r1
 8000466:	2200      	movs	r2, #0
 8000468:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046a:	187b      	adds	r3, r7, r1
 800046c:	2200      	movs	r2, #0
 800046e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000470:	187b      	adds	r3, r7, r1
 8000472:	2201      	movs	r2, #1
 8000474:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000476:	187a      	adds	r2, r7, r1
 8000478:	23a0      	movs	r3, #160	@ 0xa0
 800047a:	05db      	lsls	r3, r3, #23
 800047c:	0011      	movs	r1, r2
 800047e:	0018      	movs	r0, r3
 8000480:	f000 f9ac 	bl	80007dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000484:	46c0      	nop			@ (mov r8, r8)
 8000486:	46bd      	mov	sp, r7
 8000488:	b00b      	add	sp, #44	@ 0x2c
 800048a:	bd90      	pop	{r4, r7, pc}
 800048c:	40004400 	.word	0x40004400
 8000490:	40021000 	.word	0x40021000

08000494 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000498:	46c0      	nop			@ (mov r8, r8)
 800049a:	e7fd      	b.n	8000498 <NMI_Handler+0x4>

0800049c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004a0:	46c0      	nop			@ (mov r8, r8)
 80004a2:	e7fd      	b.n	80004a0 <HardFault_Handler+0x4>

080004a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80004a8:	46c0      	nop			@ (mov r8, r8)
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}

080004ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004ae:	b580      	push	{r7, lr}
 80004b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004b2:	46c0      	nop			@ (mov r8, r8)
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004bc:	f000 f89a 	bl	80005f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004c0:	46c0      	nop			@ (mov r8, r8)
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
	...

080004c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80004cc:	4b03      	ldr	r3, [pc, #12]	@ (80004dc <SystemInit+0x14>)
 80004ce:	2280      	movs	r2, #128	@ 0x80
 80004d0:	0512      	lsls	r2, r2, #20
 80004d2:	609a      	str	r2, [r3, #8]
#endif
}
 80004d4:	46c0      	nop			@ (mov r8, r8)
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	46c0      	nop			@ (mov r8, r8)
 80004dc:	e000ed00 	.word	0xe000ed00

080004e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004e0:	480d      	ldr	r0, [pc, #52]	@ (8000518 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004e4:	f7ff fff0 	bl	80004c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80004e8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80004ea:	e003      	b.n	80004f4 <LoopCopyDataInit>

080004ec <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80004ec:	4b0b      	ldr	r3, [pc, #44]	@ (800051c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80004ee:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80004f0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80004f2:	3104      	adds	r1, #4

080004f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80004f4:	480a      	ldr	r0, [pc, #40]	@ (8000520 <LoopForever+0xa>)
  ldr r3, =_edata
 80004f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000524 <LoopForever+0xe>)
  adds r2, r0, r1
 80004f8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80004fa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80004fc:	d3f6      	bcc.n	80004ec <CopyDataInit>
  ldr r2, =_sbss
 80004fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000528 <LoopForever+0x12>)
  b LoopFillZerobss
 8000500:	e002      	b.n	8000508 <LoopFillZerobss>

08000502 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000502:	2300      	movs	r3, #0
  str  r3, [r2]
 8000504:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000506:	3204      	adds	r2, #4

08000508 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000508:	4b08      	ldr	r3, [pc, #32]	@ (800052c <LoopForever+0x16>)
  cmp r2, r3
 800050a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800050c:	d3f9      	bcc.n	8000502 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800050e:	f001 fa6b 	bl	80019e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000512:	f7ff fe85 	bl	8000220 <main>

08000516 <LoopForever>:

LoopForever:
    b LoopForever
 8000516:	e7fe      	b.n	8000516 <LoopForever>
  ldr   r0, =_estack
 8000518:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 800051c:	08001ac8 	.word	0x08001ac8
  ldr r0, =_sdata
 8000520:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000524:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000528:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 800052c:	200000c0 	.word	0x200000c0

08000530 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000530:	e7fe      	b.n	8000530 <ADC1_IRQHandler>

08000532 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000532:	b580      	push	{r7, lr}
 8000534:	b082      	sub	sp, #8
 8000536:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000538:	1dfb      	adds	r3, r7, #7
 800053a:	2200      	movs	r2, #0
 800053c:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800053e:	2003      	movs	r0, #3
 8000540:	f000 f80e 	bl	8000560 <HAL_InitTick>
 8000544:	1e03      	subs	r3, r0, #0
 8000546:	d003      	beq.n	8000550 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000548:	1dfb      	adds	r3, r7, #7
 800054a:	2201      	movs	r2, #1
 800054c:	701a      	strb	r2, [r3, #0]
 800054e:	e001      	b.n	8000554 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000550:	f7ff ff32 	bl	80003b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000554:	1dfb      	adds	r3, r7, #7
 8000556:	781b      	ldrb	r3, [r3, #0]
}
 8000558:	0018      	movs	r0, r3
 800055a:	46bd      	mov	sp, r7
 800055c:	b002      	add	sp, #8
 800055e:	bd80      	pop	{r7, pc}

08000560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000560:	b590      	push	{r4, r7, lr}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000568:	230f      	movs	r3, #15
 800056a:	18fb      	adds	r3, r7, r3
 800056c:	2200      	movs	r2, #0
 800056e:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000570:	4b1d      	ldr	r3, [pc, #116]	@ (80005e8 <HAL_InitTick+0x88>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d02b      	beq.n	80005d0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000578:	4b1c      	ldr	r3, [pc, #112]	@ (80005ec <HAL_InitTick+0x8c>)
 800057a:	681c      	ldr	r4, [r3, #0]
 800057c:	4b1a      	ldr	r3, [pc, #104]	@ (80005e8 <HAL_InitTick+0x88>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	0019      	movs	r1, r3
 8000582:	23fa      	movs	r3, #250	@ 0xfa
 8000584:	0098      	lsls	r0, r3, #2
 8000586:	f7ff fdbf 	bl	8000108 <__udivsi3>
 800058a:	0003      	movs	r3, r0
 800058c:	0019      	movs	r1, r3
 800058e:	0020      	movs	r0, r4
 8000590:	f7ff fdba 	bl	8000108 <__udivsi3>
 8000594:	0003      	movs	r3, r0
 8000596:	0018      	movs	r0, r3
 8000598:	f000 f913 	bl	80007c2 <HAL_SYSTICK_Config>
 800059c:	1e03      	subs	r3, r0, #0
 800059e:	d112      	bne.n	80005c6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2b03      	cmp	r3, #3
 80005a4:	d80a      	bhi.n	80005bc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005a6:	6879      	ldr	r1, [r7, #4]
 80005a8:	2301      	movs	r3, #1
 80005aa:	425b      	negs	r3, r3
 80005ac:	2200      	movs	r2, #0
 80005ae:	0018      	movs	r0, r3
 80005b0:	f000 f8f2 	bl	8000798 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005b4:	4b0e      	ldr	r3, [pc, #56]	@ (80005f0 <HAL_InitTick+0x90>)
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	e00d      	b.n	80005d8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80005bc:	230f      	movs	r3, #15
 80005be:	18fb      	adds	r3, r7, r3
 80005c0:	2201      	movs	r2, #1
 80005c2:	701a      	strb	r2, [r3, #0]
 80005c4:	e008      	b.n	80005d8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005c6:	230f      	movs	r3, #15
 80005c8:	18fb      	adds	r3, r7, r3
 80005ca:	2201      	movs	r2, #1
 80005cc:	701a      	strb	r2, [r3, #0]
 80005ce:	e003      	b.n	80005d8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005d0:	230f      	movs	r3, #15
 80005d2:	18fb      	adds	r3, r7, r3
 80005d4:	2201      	movs	r2, #1
 80005d6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80005d8:	230f      	movs	r3, #15
 80005da:	18fb      	adds	r3, r7, r3
 80005dc:	781b      	ldrb	r3, [r3, #0]
}
 80005de:	0018      	movs	r0, r3
 80005e0:	46bd      	mov	sp, r7
 80005e2:	b005      	add	sp, #20
 80005e4:	bd90      	pop	{r4, r7, pc}
 80005e6:	46c0      	nop			@ (mov r8, r8)
 80005e8:	20000008 	.word	0x20000008
 80005ec:	20000000 	.word	0x20000000
 80005f0:	20000004 	.word	0x20000004

080005f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005f8:	4b05      	ldr	r3, [pc, #20]	@ (8000610 <HAL_IncTick+0x1c>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	001a      	movs	r2, r3
 80005fe:	4b05      	ldr	r3, [pc, #20]	@ (8000614 <HAL_IncTick+0x20>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	18d2      	adds	r2, r2, r3
 8000604:	4b03      	ldr	r3, [pc, #12]	@ (8000614 <HAL_IncTick+0x20>)
 8000606:	601a      	str	r2, [r3, #0]
}
 8000608:	46c0      	nop			@ (mov r8, r8)
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	46c0      	nop			@ (mov r8, r8)
 8000610:	20000008 	.word	0x20000008
 8000614:	200000bc 	.word	0x200000bc

08000618 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  return uwTick;
 800061c:	4b02      	ldr	r3, [pc, #8]	@ (8000628 <HAL_GetTick+0x10>)
 800061e:	681b      	ldr	r3, [r3, #0]
}
 8000620:	0018      	movs	r0, r3
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	46c0      	nop			@ (mov r8, r8)
 8000628:	200000bc 	.word	0x200000bc

0800062c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000634:	f7ff fff0 	bl	8000618 <HAL_GetTick>
 8000638:	0003      	movs	r3, r0
 800063a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	3301      	adds	r3, #1
 8000644:	d005      	beq.n	8000652 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000646:	4b0a      	ldr	r3, [pc, #40]	@ (8000670 <HAL_Delay+0x44>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	001a      	movs	r2, r3
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	189b      	adds	r3, r3, r2
 8000650:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000652:	46c0      	nop			@ (mov r8, r8)
 8000654:	f7ff ffe0 	bl	8000618 <HAL_GetTick>
 8000658:	0002      	movs	r2, r0
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	1ad3      	subs	r3, r2, r3
 800065e:	68fa      	ldr	r2, [r7, #12]
 8000660:	429a      	cmp	r2, r3
 8000662:	d8f7      	bhi.n	8000654 <HAL_Delay+0x28>
  {
  }
}
 8000664:	46c0      	nop			@ (mov r8, r8)
 8000666:	46c0      	nop			@ (mov r8, r8)
 8000668:	46bd      	mov	sp, r7
 800066a:	b004      	add	sp, #16
 800066c:	bd80      	pop	{r7, pc}
 800066e:	46c0      	nop			@ (mov r8, r8)
 8000670:	20000008 	.word	0x20000008

08000674 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000674:	b590      	push	{r4, r7, lr}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	0002      	movs	r2, r0
 800067c:	6039      	str	r1, [r7, #0]
 800067e:	1dfb      	adds	r3, r7, #7
 8000680:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000682:	1dfb      	adds	r3, r7, #7
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b7f      	cmp	r3, #127	@ 0x7f
 8000688:	d828      	bhi.n	80006dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800068a:	4a2f      	ldr	r2, [pc, #188]	@ (8000748 <__NVIC_SetPriority+0xd4>)
 800068c:	1dfb      	adds	r3, r7, #7
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	b25b      	sxtb	r3, r3
 8000692:	089b      	lsrs	r3, r3, #2
 8000694:	33c0      	adds	r3, #192	@ 0xc0
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	589b      	ldr	r3, [r3, r2]
 800069a:	1dfa      	adds	r2, r7, #7
 800069c:	7812      	ldrb	r2, [r2, #0]
 800069e:	0011      	movs	r1, r2
 80006a0:	2203      	movs	r2, #3
 80006a2:	400a      	ands	r2, r1
 80006a4:	00d2      	lsls	r2, r2, #3
 80006a6:	21ff      	movs	r1, #255	@ 0xff
 80006a8:	4091      	lsls	r1, r2
 80006aa:	000a      	movs	r2, r1
 80006ac:	43d2      	mvns	r2, r2
 80006ae:	401a      	ands	r2, r3
 80006b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	019b      	lsls	r3, r3, #6
 80006b6:	22ff      	movs	r2, #255	@ 0xff
 80006b8:	401a      	ands	r2, r3
 80006ba:	1dfb      	adds	r3, r7, #7
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	0018      	movs	r0, r3
 80006c0:	2303      	movs	r3, #3
 80006c2:	4003      	ands	r3, r0
 80006c4:	00db      	lsls	r3, r3, #3
 80006c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006c8:	481f      	ldr	r0, [pc, #124]	@ (8000748 <__NVIC_SetPriority+0xd4>)
 80006ca:	1dfb      	adds	r3, r7, #7
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	b25b      	sxtb	r3, r3
 80006d0:	089b      	lsrs	r3, r3, #2
 80006d2:	430a      	orrs	r2, r1
 80006d4:	33c0      	adds	r3, #192	@ 0xc0
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80006da:	e031      	b.n	8000740 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006dc:	4a1b      	ldr	r2, [pc, #108]	@ (800074c <__NVIC_SetPriority+0xd8>)
 80006de:	1dfb      	adds	r3, r7, #7
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	0019      	movs	r1, r3
 80006e4:	230f      	movs	r3, #15
 80006e6:	400b      	ands	r3, r1
 80006e8:	3b08      	subs	r3, #8
 80006ea:	089b      	lsrs	r3, r3, #2
 80006ec:	3306      	adds	r3, #6
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	18d3      	adds	r3, r2, r3
 80006f2:	3304      	adds	r3, #4
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	1dfa      	adds	r2, r7, #7
 80006f8:	7812      	ldrb	r2, [r2, #0]
 80006fa:	0011      	movs	r1, r2
 80006fc:	2203      	movs	r2, #3
 80006fe:	400a      	ands	r2, r1
 8000700:	00d2      	lsls	r2, r2, #3
 8000702:	21ff      	movs	r1, #255	@ 0xff
 8000704:	4091      	lsls	r1, r2
 8000706:	000a      	movs	r2, r1
 8000708:	43d2      	mvns	r2, r2
 800070a:	401a      	ands	r2, r3
 800070c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	019b      	lsls	r3, r3, #6
 8000712:	22ff      	movs	r2, #255	@ 0xff
 8000714:	401a      	ands	r2, r3
 8000716:	1dfb      	adds	r3, r7, #7
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	0018      	movs	r0, r3
 800071c:	2303      	movs	r3, #3
 800071e:	4003      	ands	r3, r0
 8000720:	00db      	lsls	r3, r3, #3
 8000722:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000724:	4809      	ldr	r0, [pc, #36]	@ (800074c <__NVIC_SetPriority+0xd8>)
 8000726:	1dfb      	adds	r3, r7, #7
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	001c      	movs	r4, r3
 800072c:	230f      	movs	r3, #15
 800072e:	4023      	ands	r3, r4
 8000730:	3b08      	subs	r3, #8
 8000732:	089b      	lsrs	r3, r3, #2
 8000734:	430a      	orrs	r2, r1
 8000736:	3306      	adds	r3, #6
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	18c3      	adds	r3, r0, r3
 800073c:	3304      	adds	r3, #4
 800073e:	601a      	str	r2, [r3, #0]
}
 8000740:	46c0      	nop			@ (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	b003      	add	sp, #12
 8000746:	bd90      	pop	{r4, r7, pc}
 8000748:	e000e100 	.word	0xe000e100
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	1e5a      	subs	r2, r3, #1
 800075c:	2380      	movs	r3, #128	@ 0x80
 800075e:	045b      	lsls	r3, r3, #17
 8000760:	429a      	cmp	r2, r3
 8000762:	d301      	bcc.n	8000768 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000764:	2301      	movs	r3, #1
 8000766:	e010      	b.n	800078a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000768:	4b0a      	ldr	r3, [pc, #40]	@ (8000794 <SysTick_Config+0x44>)
 800076a:	687a      	ldr	r2, [r7, #4]
 800076c:	3a01      	subs	r2, #1
 800076e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000770:	2301      	movs	r3, #1
 8000772:	425b      	negs	r3, r3
 8000774:	2103      	movs	r1, #3
 8000776:	0018      	movs	r0, r3
 8000778:	f7ff ff7c 	bl	8000674 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800077c:	4b05      	ldr	r3, [pc, #20]	@ (8000794 <SysTick_Config+0x44>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000782:	4b04      	ldr	r3, [pc, #16]	@ (8000794 <SysTick_Config+0x44>)
 8000784:	2207      	movs	r2, #7
 8000786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000788:	2300      	movs	r3, #0
}
 800078a:	0018      	movs	r0, r3
 800078c:	46bd      	mov	sp, r7
 800078e:	b002      	add	sp, #8
 8000790:	bd80      	pop	{r7, pc}
 8000792:	46c0      	nop			@ (mov r8, r8)
 8000794:	e000e010 	.word	0xe000e010

08000798 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	60b9      	str	r1, [r7, #8]
 80007a0:	607a      	str	r2, [r7, #4]
 80007a2:	210f      	movs	r1, #15
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	1c02      	adds	r2, r0, #0
 80007a8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80007aa:	68ba      	ldr	r2, [r7, #8]
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	b25b      	sxtb	r3, r3
 80007b2:	0011      	movs	r1, r2
 80007b4:	0018      	movs	r0, r3
 80007b6:	f7ff ff5d 	bl	8000674 <__NVIC_SetPriority>
}
 80007ba:	46c0      	nop			@ (mov r8, r8)
 80007bc:	46bd      	mov	sp, r7
 80007be:	b004      	add	sp, #16
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	0018      	movs	r0, r3
 80007ce:	f7ff ffbf 	bl	8000750 <SysTick_Config>
 80007d2:	0003      	movs	r3, r0
}
 80007d4:	0018      	movs	r0, r3
 80007d6:	46bd      	mov	sp, r7
 80007d8:	b002      	add	sp, #8
 80007da:	bd80      	pop	{r7, pc}

080007dc <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80007ea:	e153      	b.n	8000a94 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2101      	movs	r1, #1
 80007f2:	693a      	ldr	r2, [r7, #16]
 80007f4:	4091      	lsls	r1, r2
 80007f6:	000a      	movs	r2, r1
 80007f8:	4013      	ands	r3, r2
 80007fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d100      	bne.n	8000804 <HAL_GPIO_Init+0x28>
 8000802:	e144      	b.n	8000a8e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	2b02      	cmp	r3, #2
 800080a:	d003      	beq.n	8000814 <HAL_GPIO_Init+0x38>
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	2b12      	cmp	r3, #18
 8000812:	d125      	bne.n	8000860 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000814:	693b      	ldr	r3, [r7, #16]
 8000816:	08da      	lsrs	r2, r3, #3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	3208      	adds	r2, #8
 800081c:	0092      	lsls	r2, r2, #2
 800081e:	58d3      	ldr	r3, [r2, r3]
 8000820:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8000822:	693b      	ldr	r3, [r7, #16]
 8000824:	2207      	movs	r2, #7
 8000826:	4013      	ands	r3, r2
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	220f      	movs	r2, #15
 800082c:	409a      	lsls	r2, r3
 800082e:	0013      	movs	r3, r2
 8000830:	43da      	mvns	r2, r3
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	4013      	ands	r3, r2
 8000836:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	691b      	ldr	r3, [r3, #16]
 800083c:	220f      	movs	r2, #15
 800083e:	401a      	ands	r2, r3
 8000840:	693b      	ldr	r3, [r7, #16]
 8000842:	2107      	movs	r1, #7
 8000844:	400b      	ands	r3, r1
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	409a      	lsls	r2, r3
 800084a:	0013      	movs	r3, r2
 800084c:	697a      	ldr	r2, [r7, #20]
 800084e:	4313      	orrs	r3, r2
 8000850:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000852:	693b      	ldr	r3, [r7, #16]
 8000854:	08da      	lsrs	r2, r3, #3
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	3208      	adds	r2, #8
 800085a:	0092      	lsls	r2, r2, #2
 800085c:	6979      	ldr	r1, [r7, #20]
 800085e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000866:	693b      	ldr	r3, [r7, #16]
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	2203      	movs	r2, #3
 800086c:	409a      	lsls	r2, r3
 800086e:	0013      	movs	r3, r2
 8000870:	43da      	mvns	r2, r3
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	4013      	ands	r3, r2
 8000876:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	2203      	movs	r2, #3
 800087e:	401a      	ands	r2, r3
 8000880:	693b      	ldr	r3, [r7, #16]
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	409a      	lsls	r2, r3
 8000886:	0013      	movs	r3, r2
 8000888:	697a      	ldr	r2, [r7, #20]
 800088a:	4313      	orrs	r3, r2
 800088c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	697a      	ldr	r2, [r7, #20]
 8000892:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	2b01      	cmp	r3, #1
 800089a:	d00b      	beq.n	80008b4 <HAL_GPIO_Init+0xd8>
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	2b02      	cmp	r3, #2
 80008a2:	d007      	beq.n	80008b4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008a8:	2b11      	cmp	r3, #17
 80008aa:	d003      	beq.n	80008b4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	2b12      	cmp	r3, #18
 80008b2:	d130      	bne.n	8000916 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	689b      	ldr	r3, [r3, #8]
 80008b8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80008ba:	693b      	ldr	r3, [r7, #16]
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	2203      	movs	r2, #3
 80008c0:	409a      	lsls	r2, r3
 80008c2:	0013      	movs	r3, r2
 80008c4:	43da      	mvns	r2, r3
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	4013      	ands	r3, r2
 80008ca:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	68da      	ldr	r2, [r3, #12]
 80008d0:	693b      	ldr	r3, [r7, #16]
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	409a      	lsls	r2, r3
 80008d6:	0013      	movs	r3, r2
 80008d8:	697a      	ldr	r2, [r7, #20]
 80008da:	4313      	orrs	r3, r2
 80008dc:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	697a      	ldr	r2, [r7, #20]
 80008e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008ea:	2201      	movs	r2, #1
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	409a      	lsls	r2, r3
 80008f0:	0013      	movs	r3, r2
 80008f2:	43da      	mvns	r2, r3
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	4013      	ands	r3, r2
 80008f8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	091b      	lsrs	r3, r3, #4
 8000900:	2201      	movs	r2, #1
 8000902:	401a      	ands	r2, r3
 8000904:	693b      	ldr	r3, [r7, #16]
 8000906:	409a      	lsls	r2, r3
 8000908:	0013      	movs	r3, r2
 800090a:	697a      	ldr	r2, [r7, #20]
 800090c:	4313      	orrs	r3, r2
 800090e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	697a      	ldr	r2, [r7, #20]
 8000914:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	2b03      	cmp	r3, #3
 800091c:	d017      	beq.n	800094e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	68db      	ldr	r3, [r3, #12]
 8000922:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000924:	693b      	ldr	r3, [r7, #16]
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	2203      	movs	r2, #3
 800092a:	409a      	lsls	r2, r3
 800092c:	0013      	movs	r3, r2
 800092e:	43da      	mvns	r2, r3
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	4013      	ands	r3, r2
 8000934:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	689a      	ldr	r2, [r3, #8]
 800093a:	693b      	ldr	r3, [r7, #16]
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	409a      	lsls	r2, r3
 8000940:	0013      	movs	r3, r2
 8000942:	697a      	ldr	r2, [r7, #20]
 8000944:	4313      	orrs	r3, r2
 8000946:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	697a      	ldr	r2, [r7, #20]
 800094c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	685a      	ldr	r2, [r3, #4]
 8000952:	2380      	movs	r3, #128	@ 0x80
 8000954:	055b      	lsls	r3, r3, #21
 8000956:	4013      	ands	r3, r2
 8000958:	d100      	bne.n	800095c <HAL_GPIO_Init+0x180>
 800095a:	e098      	b.n	8000a8e <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800095c:	4a53      	ldr	r2, [pc, #332]	@ (8000aac <HAL_GPIO_Init+0x2d0>)
 800095e:	693b      	ldr	r3, [r7, #16]
 8000960:	089b      	lsrs	r3, r3, #2
 8000962:	3318      	adds	r3, #24
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	589b      	ldr	r3, [r3, r2]
 8000968:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800096a:	693b      	ldr	r3, [r7, #16]
 800096c:	2203      	movs	r2, #3
 800096e:	4013      	ands	r3, r2
 8000970:	00db      	lsls	r3, r3, #3
 8000972:	220f      	movs	r2, #15
 8000974:	409a      	lsls	r2, r3
 8000976:	0013      	movs	r3, r2
 8000978:	43da      	mvns	r2, r3
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	4013      	ands	r3, r2
 800097e:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000980:	687a      	ldr	r2, [r7, #4]
 8000982:	23a0      	movs	r3, #160	@ 0xa0
 8000984:	05db      	lsls	r3, r3, #23
 8000986:	429a      	cmp	r2, r3
 8000988:	d019      	beq.n	80009be <HAL_GPIO_Init+0x1e2>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a48      	ldr	r2, [pc, #288]	@ (8000ab0 <HAL_GPIO_Init+0x2d4>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d013      	beq.n	80009ba <HAL_GPIO_Init+0x1de>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4a47      	ldr	r2, [pc, #284]	@ (8000ab4 <HAL_GPIO_Init+0x2d8>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d00d      	beq.n	80009b6 <HAL_GPIO_Init+0x1da>
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4a46      	ldr	r2, [pc, #280]	@ (8000ab8 <HAL_GPIO_Init+0x2dc>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d007      	beq.n	80009b2 <HAL_GPIO_Init+0x1d6>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a45      	ldr	r2, [pc, #276]	@ (8000abc <HAL_GPIO_Init+0x2e0>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d101      	bne.n	80009ae <HAL_GPIO_Init+0x1d2>
 80009aa:	2305      	movs	r3, #5
 80009ac:	e008      	b.n	80009c0 <HAL_GPIO_Init+0x1e4>
 80009ae:	2306      	movs	r3, #6
 80009b0:	e006      	b.n	80009c0 <HAL_GPIO_Init+0x1e4>
 80009b2:	2303      	movs	r3, #3
 80009b4:	e004      	b.n	80009c0 <HAL_GPIO_Init+0x1e4>
 80009b6:	2302      	movs	r3, #2
 80009b8:	e002      	b.n	80009c0 <HAL_GPIO_Init+0x1e4>
 80009ba:	2301      	movs	r3, #1
 80009bc:	e000      	b.n	80009c0 <HAL_GPIO_Init+0x1e4>
 80009be:	2300      	movs	r3, #0
 80009c0:	693a      	ldr	r2, [r7, #16]
 80009c2:	2103      	movs	r1, #3
 80009c4:	400a      	ands	r2, r1
 80009c6:	00d2      	lsls	r2, r2, #3
 80009c8:	4093      	lsls	r3, r2
 80009ca:	697a      	ldr	r2, [r7, #20]
 80009cc:	4313      	orrs	r3, r2
 80009ce:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80009d0:	4936      	ldr	r1, [pc, #216]	@ (8000aac <HAL_GPIO_Init+0x2d0>)
 80009d2:	693b      	ldr	r3, [r7, #16]
 80009d4:	089b      	lsrs	r3, r3, #2
 80009d6:	3318      	adds	r3, #24
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	697a      	ldr	r2, [r7, #20]
 80009dc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80009de:	4a33      	ldr	r2, [pc, #204]	@ (8000aac <HAL_GPIO_Init+0x2d0>)
 80009e0:	2380      	movs	r3, #128	@ 0x80
 80009e2:	58d3      	ldr	r3, [r2, r3]
 80009e4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	43da      	mvns	r2, r3
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	4013      	ands	r3, r2
 80009ee:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685a      	ldr	r2, [r3, #4]
 80009f4:	2380      	movs	r3, #128	@ 0x80
 80009f6:	025b      	lsls	r3, r3, #9
 80009f8:	4013      	ands	r3, r2
 80009fa:	d003      	beq.n	8000a04 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 80009fc:	697a      	ldr	r2, [r7, #20]
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8000a04:	4929      	ldr	r1, [pc, #164]	@ (8000aac <HAL_GPIO_Init+0x2d0>)
 8000a06:	2280      	movs	r2, #128	@ 0x80
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8000a0c:	4a27      	ldr	r2, [pc, #156]	@ (8000aac <HAL_GPIO_Init+0x2d0>)
 8000a0e:	2384      	movs	r3, #132	@ 0x84
 8000a10:	58d3      	ldr	r3, [r2, r3]
 8000a12:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	43da      	mvns	r2, r3
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	685a      	ldr	r2, [r3, #4]
 8000a22:	2380      	movs	r3, #128	@ 0x80
 8000a24:	029b      	lsls	r3, r3, #10
 8000a26:	4013      	ands	r3, r2
 8000a28:	d003      	beq.n	8000a32 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8000a2a:	697a      	ldr	r2, [r7, #20]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8000a32:	491e      	ldr	r1, [pc, #120]	@ (8000aac <HAL_GPIO_Init+0x2d0>)
 8000a34:	2284      	movs	r2, #132	@ 0x84
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000a3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000aac <HAL_GPIO_Init+0x2d0>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	43da      	mvns	r2, r3
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	4013      	ands	r3, r2
 8000a48:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685a      	ldr	r2, [r3, #4]
 8000a4e:	2380      	movs	r3, #128	@ 0x80
 8000a50:	035b      	lsls	r3, r3, #13
 8000a52:	4013      	ands	r3, r2
 8000a54:	d003      	beq.n	8000a5e <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8000a56:	697a      	ldr	r2, [r7, #20]
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000a5e:	4b13      	ldr	r3, [pc, #76]	@ (8000aac <HAL_GPIO_Init+0x2d0>)
 8000a60:	697a      	ldr	r2, [r7, #20]
 8000a62:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8000a64:	4b11      	ldr	r3, [pc, #68]	@ (8000aac <HAL_GPIO_Init+0x2d0>)
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	43da      	mvns	r2, r3
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	4013      	ands	r3, r2
 8000a72:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685a      	ldr	r2, [r3, #4]
 8000a78:	2380      	movs	r3, #128	@ 0x80
 8000a7a:	039b      	lsls	r3, r3, #14
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	d003      	beq.n	8000a88 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8000a80:	697a      	ldr	r2, [r7, #20]
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8000a88:	4b08      	ldr	r3, [pc, #32]	@ (8000aac <HAL_GPIO_Init+0x2d0>)
 8000a8a:	697a      	ldr	r2, [r7, #20]
 8000a8c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	3301      	adds	r3, #1
 8000a92:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	40da      	lsrs	r2, r3
 8000a9c:	1e13      	subs	r3, r2, #0
 8000a9e:	d000      	beq.n	8000aa2 <HAL_GPIO_Init+0x2c6>
 8000aa0:	e6a4      	b.n	80007ec <HAL_GPIO_Init+0x10>
  }
}
 8000aa2:	46c0      	nop			@ (mov r8, r8)
 8000aa4:	46c0      	nop			@ (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	b006      	add	sp, #24
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40021800 	.word	0x40021800
 8000ab0:	50000400 	.word	0x50000400
 8000ab4:	50000800 	.word	0x50000800
 8000ab8:	50000c00 	.word	0x50000c00
 8000abc:	50001400 	.word	0x50001400

08000ac0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	0008      	movs	r0, r1
 8000aca:	0011      	movs	r1, r2
 8000acc:	1cbb      	adds	r3, r7, #2
 8000ace:	1c02      	adds	r2, r0, #0
 8000ad0:	801a      	strh	r2, [r3, #0]
 8000ad2:	1c7b      	adds	r3, r7, #1
 8000ad4:	1c0a      	adds	r2, r1, #0
 8000ad6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ad8:	1c7b      	adds	r3, r7, #1
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d004      	beq.n	8000aea <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ae0:	1cbb      	adds	r3, r7, #2
 8000ae2:	881a      	ldrh	r2, [r3, #0]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ae8:	e003      	b.n	8000af2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000aea:	1cbb      	adds	r3, r7, #2
 8000aec:	881a      	ldrh	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000af2:	46c0      	nop			@ (mov r8, r8)
 8000af4:	46bd      	mov	sp, r7
 8000af6:	b002      	add	sp, #8
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32C0 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b084      	sub	sp, #16
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
 8000b02:	000a      	movs	r2, r1
 8000b04:	1cbb      	adds	r3, r7, #2
 8000b06:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	695b      	ldr	r3, [r3, #20]
 8000b0c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b0e:	1cbb      	adds	r3, r7, #2
 8000b10:	881b      	ldrh	r3, [r3, #0]
 8000b12:	68fa      	ldr	r2, [r7, #12]
 8000b14:	4013      	ands	r3, r2
 8000b16:	041a      	lsls	r2, r3, #16
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	1cb9      	adds	r1, r7, #2
 8000b1e:	8809      	ldrh	r1, [r1, #0]
 8000b20:	400b      	ands	r3, r1
 8000b22:	431a      	orrs	r2, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	619a      	str	r2, [r3, #24]
}
 8000b28:	46c0      	nop			@ (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	b004      	add	sp, #16
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d101      	bne.n	8000b42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e1d0      	b.n	8000ee4 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2201      	movs	r2, #1
 8000b48:	4013      	ands	r3, r2
 8000b4a:	d100      	bne.n	8000b4e <HAL_RCC_OscConfig+0x1e>
 8000b4c:	e069      	b.n	8000c22 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b4e:	4bc8      	ldr	r3, [pc, #800]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	2238      	movs	r2, #56	@ 0x38
 8000b54:	4013      	ands	r3, r2
 8000b56:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	2b08      	cmp	r3, #8
 8000b5c:	d105      	bne.n	8000b6a <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d15d      	bne.n	8000c22 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	e1bc      	b.n	8000ee4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	685a      	ldr	r2, [r3, #4]
 8000b6e:	2380      	movs	r3, #128	@ 0x80
 8000b70:	025b      	lsls	r3, r3, #9
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d107      	bne.n	8000b86 <HAL_RCC_OscConfig+0x56>
 8000b76:	4bbe      	ldr	r3, [pc, #760]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	4bbd      	ldr	r3, [pc, #756]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000b7c:	2180      	movs	r1, #128	@ 0x80
 8000b7e:	0249      	lsls	r1, r1, #9
 8000b80:	430a      	orrs	r2, r1
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	e020      	b.n	8000bc8 <HAL_RCC_OscConfig+0x98>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	685a      	ldr	r2, [r3, #4]
 8000b8a:	23a0      	movs	r3, #160	@ 0xa0
 8000b8c:	02db      	lsls	r3, r3, #11
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d10e      	bne.n	8000bb0 <HAL_RCC_OscConfig+0x80>
 8000b92:	4bb7      	ldr	r3, [pc, #732]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	4bb6      	ldr	r3, [pc, #728]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000b98:	2180      	movs	r1, #128	@ 0x80
 8000b9a:	02c9      	lsls	r1, r1, #11
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	4bb3      	ldr	r3, [pc, #716]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	4bb2      	ldr	r3, [pc, #712]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000ba6:	2180      	movs	r1, #128	@ 0x80
 8000ba8:	0249      	lsls	r1, r1, #9
 8000baa:	430a      	orrs	r2, r1
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	e00b      	b.n	8000bc8 <HAL_RCC_OscConfig+0x98>
 8000bb0:	4baf      	ldr	r3, [pc, #700]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	4bae      	ldr	r3, [pc, #696]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000bb6:	49af      	ldr	r1, [pc, #700]	@ (8000e74 <HAL_RCC_OscConfig+0x344>)
 8000bb8:	400a      	ands	r2, r1
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	4bac      	ldr	r3, [pc, #688]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	4bab      	ldr	r3, [pc, #684]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000bc2:	49ad      	ldr	r1, [pc, #692]	@ (8000e78 <HAL_RCC_OscConfig+0x348>)
 8000bc4:	400a      	ands	r2, r1
 8000bc6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d014      	beq.n	8000bfa <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bd0:	f7ff fd22 	bl	8000618 <HAL_GetTick>
 8000bd4:	0003      	movs	r3, r0
 8000bd6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000bd8:	e008      	b.n	8000bec <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8000bda:	f7ff fd1d 	bl	8000618 <HAL_GetTick>
 8000bde:	0002      	movs	r2, r0
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	1ad3      	subs	r3, r2, r3
 8000be4:	2b64      	cmp	r3, #100	@ 0x64
 8000be6:	d901      	bls.n	8000bec <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000be8:	2303      	movs	r3, #3
 8000bea:	e17b      	b.n	8000ee4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000bec:	4ba0      	ldr	r3, [pc, #640]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	2380      	movs	r3, #128	@ 0x80
 8000bf2:	029b      	lsls	r3, r3, #10
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	d0f0      	beq.n	8000bda <HAL_RCC_OscConfig+0xaa>
 8000bf8:	e013      	b.n	8000c22 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bfa:	f7ff fd0d 	bl	8000618 <HAL_GetTick>
 8000bfe:	0003      	movs	r3, r0
 8000c00:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c02:	e008      	b.n	8000c16 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8000c04:	f7ff fd08 	bl	8000618 <HAL_GetTick>
 8000c08:	0002      	movs	r2, r0
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	2b64      	cmp	r3, #100	@ 0x64
 8000c10:	d901      	bls.n	8000c16 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8000c12:	2303      	movs	r3, #3
 8000c14:	e166      	b.n	8000ee4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c16:	4b96      	ldr	r3, [pc, #600]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	2380      	movs	r3, #128	@ 0x80
 8000c1c:	029b      	lsls	r3, r3, #10
 8000c1e:	4013      	ands	r3, r2
 8000c20:	d1f0      	bne.n	8000c04 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	2202      	movs	r2, #2
 8000c28:	4013      	ands	r3, r2
 8000c2a:	d100      	bne.n	8000c2e <HAL_RCC_OscConfig+0xfe>
 8000c2c:	e086      	b.n	8000d3c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c2e:	4b90      	ldr	r3, [pc, #576]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	2238      	movs	r2, #56	@ 0x38
 8000c34:	4013      	ands	r3, r2
 8000c36:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d12f      	bne.n	8000c9e <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	68db      	ldr	r3, [r3, #12]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d101      	bne.n	8000c4a <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
 8000c48:	e14c      	b.n	8000ee4 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c4a:	4b89      	ldr	r3, [pc, #548]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	4a8b      	ldr	r2, [pc, #556]	@ (8000e7c <HAL_RCC_OscConfig+0x34c>)
 8000c50:	4013      	ands	r3, r2
 8000c52:	0019      	movs	r1, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	695b      	ldr	r3, [r3, #20]
 8000c58:	021a      	lsls	r2, r3, #8
 8000c5a:	4b85      	ldr	r3, [pc, #532]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d112      	bne.n	8000c8c <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000c66:	4b82      	ldr	r3, [pc, #520]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a85      	ldr	r2, [pc, #532]	@ (8000e80 <HAL_RCC_OscConfig+0x350>)
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	0019      	movs	r1, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	691a      	ldr	r2, [r3, #16]
 8000c74:	4b7e      	ldr	r3, [pc, #504]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000c76:	430a      	orrs	r2, r1
 8000c78:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000c7a:	4b7d      	ldr	r3, [pc, #500]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	0adb      	lsrs	r3, r3, #11
 8000c80:	2207      	movs	r2, #7
 8000c82:	4013      	ands	r3, r2
 8000c84:	4a7f      	ldr	r2, [pc, #508]	@ (8000e84 <HAL_RCC_OscConfig+0x354>)
 8000c86:	40da      	lsrs	r2, r3
 8000c88:	4b7f      	ldr	r3, [pc, #508]	@ (8000e88 <HAL_RCC_OscConfig+0x358>)
 8000c8a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000c8c:	4b7f      	ldr	r3, [pc, #508]	@ (8000e8c <HAL_RCC_OscConfig+0x35c>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	0018      	movs	r0, r3
 8000c92:	f7ff fc65 	bl	8000560 <HAL_InitTick>
 8000c96:	1e03      	subs	r3, r0, #0
 8000c98:	d050      	beq.n	8000d3c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e122      	b.n	8000ee4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d030      	beq.n	8000d08 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000ca6:	4b72      	ldr	r3, [pc, #456]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a75      	ldr	r2, [pc, #468]	@ (8000e80 <HAL_RCC_OscConfig+0x350>)
 8000cac:	4013      	ands	r3, r2
 8000cae:	0019      	movs	r1, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	691a      	ldr	r2, [r3, #16]
 8000cb4:	4b6e      	ldr	r3, [pc, #440]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8000cba:	4b6d      	ldr	r3, [pc, #436]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	4b6c      	ldr	r3, [pc, #432]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000cc0:	2180      	movs	r1, #128	@ 0x80
 8000cc2:	0049      	lsls	r1, r1, #1
 8000cc4:	430a      	orrs	r2, r1
 8000cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cc8:	f7ff fca6 	bl	8000618 <HAL_GetTick>
 8000ccc:	0003      	movs	r3, r0
 8000cce:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000cd0:	e008      	b.n	8000ce4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8000cd2:	f7ff fca1 	bl	8000618 <HAL_GetTick>
 8000cd6:	0002      	movs	r2, r0
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	1ad3      	subs	r3, r2, r3
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d901      	bls.n	8000ce4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	e0ff      	b.n	8000ee4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ce4:	4b62      	ldr	r3, [pc, #392]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	2380      	movs	r3, #128	@ 0x80
 8000cea:	00db      	lsls	r3, r3, #3
 8000cec:	4013      	ands	r3, r2
 8000cee:	d0f0      	beq.n	8000cd2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cf0:	4b5f      	ldr	r3, [pc, #380]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	4a61      	ldr	r2, [pc, #388]	@ (8000e7c <HAL_RCC_OscConfig+0x34c>)
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	0019      	movs	r1, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	021a      	lsls	r2, r3, #8
 8000d00:	4b5b      	ldr	r3, [pc, #364]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000d02:	430a      	orrs	r2, r1
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	e019      	b.n	8000d3c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8000d08:	4b59      	ldr	r3, [pc, #356]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4b58      	ldr	r3, [pc, #352]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000d0e:	4960      	ldr	r1, [pc, #384]	@ (8000e90 <HAL_RCC_OscConfig+0x360>)
 8000d10:	400a      	ands	r2, r1
 8000d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d14:	f7ff fc80 	bl	8000618 <HAL_GetTick>
 8000d18:	0003      	movs	r3, r0
 8000d1a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d1c:	e008      	b.n	8000d30 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8000d1e:	f7ff fc7b 	bl	8000618 <HAL_GetTick>
 8000d22:	0002      	movs	r2, r0
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	1ad3      	subs	r3, r2, r3
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d901      	bls.n	8000d30 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	e0d9      	b.n	8000ee4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d30:	4b4f      	ldr	r3, [pc, #316]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	2380      	movs	r3, #128	@ 0x80
 8000d36:	00db      	lsls	r3, r3, #3
 8000d38:	4013      	ands	r3, r2
 8000d3a:	d1f0      	bne.n	8000d1e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2208      	movs	r2, #8
 8000d42:	4013      	ands	r3, r2
 8000d44:	d042      	beq.n	8000dcc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8000d46:	4b4a      	ldr	r3, [pc, #296]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	2238      	movs	r2, #56	@ 0x38
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	2b18      	cmp	r3, #24
 8000d50:	d105      	bne.n	8000d5e <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	699b      	ldr	r3, [r3, #24]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d138      	bne.n	8000dcc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e0c2      	b.n	8000ee4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d019      	beq.n	8000d9a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000d66:	4b42      	ldr	r3, [pc, #264]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000d68:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000d6a:	4b41      	ldr	r3, [pc, #260]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d72:	f7ff fc51 	bl	8000618 <HAL_GetTick>
 8000d76:	0003      	movs	r3, r0
 8000d78:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8000d7a:	e008      	b.n	8000d8e <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8000d7c:	f7ff fc4c 	bl	8000618 <HAL_GetTick>
 8000d80:	0002      	movs	r2, r0
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d901      	bls.n	8000d8e <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	e0aa      	b.n	8000ee4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8000d8e:	4b38      	ldr	r3, [pc, #224]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000d90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d92:	2202      	movs	r2, #2
 8000d94:	4013      	ands	r3, r2
 8000d96:	d0f1      	beq.n	8000d7c <HAL_RCC_OscConfig+0x24c>
 8000d98:	e018      	b.n	8000dcc <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8000d9a:	4b35      	ldr	r3, [pc, #212]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000d9c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000d9e:	4b34      	ldr	r3, [pc, #208]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000da0:	2101      	movs	r1, #1
 8000da2:	438a      	bics	r2, r1
 8000da4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000da6:	f7ff fc37 	bl	8000618 <HAL_GetTick>
 8000daa:	0003      	movs	r3, r0
 8000dac:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8000dae:	e008      	b.n	8000dc2 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8000db0:	f7ff fc32 	bl	8000618 <HAL_GetTick>
 8000db4:	0002      	movs	r2, r0
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d901      	bls.n	8000dc2 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	e090      	b.n	8000ee4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8000dc2:	4b2b      	ldr	r3, [pc, #172]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000dc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dc6:	2202      	movs	r2, #2
 8000dc8:	4013      	ands	r3, r2
 8000dca:	d1f1      	bne.n	8000db0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2204      	movs	r2, #4
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	d100      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x2a8>
 8000dd6:	e084      	b.n	8000ee2 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dd8:	230f      	movs	r3, #15
 8000dda:	18fb      	adds	r3, r7, r3
 8000ddc:	2200      	movs	r2, #0
 8000dde:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8000de0:	4b23      	ldr	r3, [pc, #140]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	2238      	movs	r2, #56	@ 0x38
 8000de6:	4013      	ands	r3, r2
 8000de8:	2b20      	cmp	r3, #32
 8000dea:	d106      	bne.n	8000dfa <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d000      	beq.n	8000df6 <HAL_RCC_OscConfig+0x2c6>
 8000df4:	e075      	b.n	8000ee2 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e074      	b.n	8000ee4 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d106      	bne.n	8000e10 <HAL_RCC_OscConfig+0x2e0>
 8000e02:	4b1b      	ldr	r3, [pc, #108]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000e04:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000e06:	4b1a      	ldr	r3, [pc, #104]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000e08:	2101      	movs	r1, #1
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000e0e:	e01c      	b.n	8000e4a <HAL_RCC_OscConfig+0x31a>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	2b05      	cmp	r3, #5
 8000e16:	d10c      	bne.n	8000e32 <HAL_RCC_OscConfig+0x302>
 8000e18:	4b15      	ldr	r3, [pc, #84]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000e1a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000e1c:	4b14      	ldr	r3, [pc, #80]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000e1e:	2104      	movs	r1, #4
 8000e20:	430a      	orrs	r2, r1
 8000e22:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000e24:	4b12      	ldr	r3, [pc, #72]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000e26:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000e28:	4b11      	ldr	r3, [pc, #68]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000e30:	e00b      	b.n	8000e4a <HAL_RCC_OscConfig+0x31a>
 8000e32:	4b0f      	ldr	r3, [pc, #60]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000e34:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000e36:	4b0e      	ldr	r3, [pc, #56]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000e38:	2101      	movs	r1, #1
 8000e3a:	438a      	bics	r2, r1
 8000e3c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000e40:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000e42:	4b0b      	ldr	r3, [pc, #44]	@ (8000e70 <HAL_RCC_OscConfig+0x340>)
 8000e44:	2104      	movs	r1, #4
 8000e46:	438a      	bics	r2, r1
 8000e48:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d028      	beq.n	8000ea4 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e52:	f7ff fbe1 	bl	8000618 <HAL_GetTick>
 8000e56:	0003      	movs	r3, r0
 8000e58:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8000e5a:	e01d      	b.n	8000e98 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e5c:	f7ff fbdc 	bl	8000618 <HAL_GetTick>
 8000e60:	0002      	movs	r2, r0
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	4a0b      	ldr	r2, [pc, #44]	@ (8000e94 <HAL_RCC_OscConfig+0x364>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d915      	bls.n	8000e98 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	e039      	b.n	8000ee4 <HAL_RCC_OscConfig+0x3b4>
 8000e70:	40021000 	.word	0x40021000
 8000e74:	fffeffff 	.word	0xfffeffff
 8000e78:	fffbffff 	.word	0xfffbffff
 8000e7c:	ffff80ff 	.word	0xffff80ff
 8000e80:	ffffc7ff 	.word	0xffffc7ff
 8000e84:	02dc6c00 	.word	0x02dc6c00
 8000e88:	20000000 	.word	0x20000000
 8000e8c:	20000004 	.word	0x20000004
 8000e90:	fffffeff 	.word	0xfffffeff
 8000e94:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8000e98:	4b14      	ldr	r3, [pc, #80]	@ (8000eec <HAL_RCC_OscConfig+0x3bc>)
 8000e9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e9c:	2202      	movs	r2, #2
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	d0dc      	beq.n	8000e5c <HAL_RCC_OscConfig+0x32c>
 8000ea2:	e013      	b.n	8000ecc <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ea4:	f7ff fbb8 	bl	8000618 <HAL_GetTick>
 8000ea8:	0003      	movs	r3, r0
 8000eaa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8000eac:	e009      	b.n	8000ec2 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eae:	f7ff fbb3 	bl	8000618 <HAL_GetTick>
 8000eb2:	0002      	movs	r2, r0
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef0 <HAL_RCC_OscConfig+0x3c0>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d901      	bls.n	8000ec2 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	e010      	b.n	8000ee4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8000eec <HAL_RCC_OscConfig+0x3bc>)
 8000ec4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	4013      	ands	r3, r2
 8000eca:	d1f0      	bne.n	8000eae <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8000ecc:	230f      	movs	r3, #15
 8000ece:	18fb      	adds	r3, r7, r3
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d105      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8000ed6:	4b05      	ldr	r3, [pc, #20]	@ (8000eec <HAL_RCC_OscConfig+0x3bc>)
 8000ed8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000eda:	4b04      	ldr	r3, [pc, #16]	@ (8000eec <HAL_RCC_OscConfig+0x3bc>)
 8000edc:	4905      	ldr	r1, [pc, #20]	@ (8000ef4 <HAL_RCC_OscConfig+0x3c4>)
 8000ede:	400a      	ands	r2, r1
 8000ee0:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 8000ee2:	2300      	movs	r3, #0
}
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	b006      	add	sp, #24
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	00001388 	.word	0x00001388
 8000ef4:	efffffff 	.word	0xefffffff

08000ef8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d101      	bne.n	8000f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e0e9      	b.n	80010e0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f0c:	4b76      	ldr	r3, [pc, #472]	@ (80010e8 <HAL_RCC_ClockConfig+0x1f0>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2207      	movs	r2, #7
 8000f12:	4013      	ands	r3, r2
 8000f14:	683a      	ldr	r2, [r7, #0]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d91e      	bls.n	8000f58 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f1a:	4b73      	ldr	r3, [pc, #460]	@ (80010e8 <HAL_RCC_ClockConfig+0x1f0>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2207      	movs	r2, #7
 8000f20:	4393      	bics	r3, r2
 8000f22:	0019      	movs	r1, r3
 8000f24:	4b70      	ldr	r3, [pc, #448]	@ (80010e8 <HAL_RCC_ClockConfig+0x1f0>)
 8000f26:	683a      	ldr	r2, [r7, #0]
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8000f2c:	f7ff fb74 	bl	8000618 <HAL_GetTick>
 8000f30:	0003      	movs	r3, r0
 8000f32:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f34:	e009      	b.n	8000f4a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8000f36:	f7ff fb6f 	bl	8000618 <HAL_GetTick>
 8000f3a:	0002      	movs	r2, r0
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	4a6a      	ldr	r2, [pc, #424]	@ (80010ec <HAL_RCC_ClockConfig+0x1f4>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d901      	bls.n	8000f4a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e0ca      	b.n	80010e0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f4a:	4b67      	ldr	r3, [pc, #412]	@ (80010e8 <HAL_RCC_ClockConfig+0x1f0>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2207      	movs	r2, #7
 8000f50:	4013      	ands	r3, r2
 8000f52:	683a      	ldr	r2, [r7, #0]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d1ee      	bne.n	8000f36 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2202      	movs	r2, #2
 8000f5e:	4013      	ands	r3, r2
 8000f60:	d017      	beq.n	8000f92 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2204      	movs	r2, #4
 8000f68:	4013      	ands	r3, r2
 8000f6a:	d008      	beq.n	8000f7e <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8000f6c:	4b60      	ldr	r3, [pc, #384]	@ (80010f0 <HAL_RCC_ClockConfig+0x1f8>)
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	4a60      	ldr	r2, [pc, #384]	@ (80010f4 <HAL_RCC_ClockConfig+0x1fc>)
 8000f72:	401a      	ands	r2, r3
 8000f74:	4b5e      	ldr	r3, [pc, #376]	@ (80010f0 <HAL_RCC_ClockConfig+0x1f8>)
 8000f76:	21b0      	movs	r1, #176	@ 0xb0
 8000f78:	0109      	lsls	r1, r1, #4
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f7e:	4b5c      	ldr	r3, [pc, #368]	@ (80010f0 <HAL_RCC_ClockConfig+0x1f8>)
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	4a5d      	ldr	r2, [pc, #372]	@ (80010f8 <HAL_RCC_ClockConfig+0x200>)
 8000f84:	4013      	ands	r3, r2
 8000f86:	0019      	movs	r1, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	68da      	ldr	r2, [r3, #12]
 8000f8c:	4b58      	ldr	r3, [pc, #352]	@ (80010f0 <HAL_RCC_ClockConfig+0x1f8>)
 8000f8e:	430a      	orrs	r2, r1
 8000f90:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2201      	movs	r2, #1
 8000f98:	4013      	ands	r3, r2
 8000f9a:	d055      	beq.n	8001048 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8000f9c:	4b54      	ldr	r3, [pc, #336]	@ (80010f0 <HAL_RCC_ClockConfig+0x1f8>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	221c      	movs	r2, #28
 8000fa2:	4393      	bics	r3, r2
 8000fa4:	0019      	movs	r1, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689a      	ldr	r2, [r3, #8]
 8000faa:	4b51      	ldr	r3, [pc, #324]	@ (80010f0 <HAL_RCC_ClockConfig+0x1f8>)
 8000fac:	430a      	orrs	r2, r1
 8000fae:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d107      	bne.n	8000fc8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fb8:	4b4d      	ldr	r3, [pc, #308]	@ (80010f0 <HAL_RCC_ClockConfig+0x1f8>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	2380      	movs	r3, #128	@ 0x80
 8000fbe:	029b      	lsls	r3, r3, #10
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	d11f      	bne.n	8001004 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e08b      	b.n	80010e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d107      	bne.n	8000fe0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fd0:	4b47      	ldr	r3, [pc, #284]	@ (80010f0 <HAL_RCC_ClockConfig+0x1f8>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	2380      	movs	r3, #128	@ 0x80
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	4013      	ands	r3, r2
 8000fda:	d113      	bne.n	8001004 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e07f      	b.n	80010e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	2b03      	cmp	r3, #3
 8000fe6:	d106      	bne.n	8000ff6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8000fe8:	4b41      	ldr	r3, [pc, #260]	@ (80010f0 <HAL_RCC_ClockConfig+0x1f8>)
 8000fea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fec:	2202      	movs	r2, #2
 8000fee:	4013      	ands	r3, r2
 8000ff0:	d108      	bne.n	8001004 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e074      	b.n	80010e0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8000ff6:	4b3e      	ldr	r3, [pc, #248]	@ (80010f0 <HAL_RCC_ClockConfig+0x1f8>)
 8000ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	d101      	bne.n	8001004 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	e06d      	b.n	80010e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001004:	4b3a      	ldr	r3, [pc, #232]	@ (80010f0 <HAL_RCC_ClockConfig+0x1f8>)
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	2207      	movs	r2, #7
 800100a:	4393      	bics	r3, r2
 800100c:	0019      	movs	r1, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	685a      	ldr	r2, [r3, #4]
 8001012:	4b37      	ldr	r3, [pc, #220]	@ (80010f0 <HAL_RCC_ClockConfig+0x1f8>)
 8001014:	430a      	orrs	r2, r1
 8001016:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001018:	f7ff fafe 	bl	8000618 <HAL_GetTick>
 800101c:	0003      	movs	r3, r0
 800101e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001020:	e009      	b.n	8001036 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001022:	f7ff faf9 	bl	8000618 <HAL_GetTick>
 8001026:	0002      	movs	r2, r0
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	4a2f      	ldr	r2, [pc, #188]	@ (80010ec <HAL_RCC_ClockConfig+0x1f4>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d901      	bls.n	8001036 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e054      	b.n	80010e0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001036:	4b2e      	ldr	r3, [pc, #184]	@ (80010f0 <HAL_RCC_ClockConfig+0x1f8>)
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	2238      	movs	r2, #56	@ 0x38
 800103c:	401a      	ands	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	429a      	cmp	r2, r3
 8001046:	d1ec      	bne.n	8001022 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001048:	4b27      	ldr	r3, [pc, #156]	@ (80010e8 <HAL_RCC_ClockConfig+0x1f0>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2207      	movs	r2, #7
 800104e:	4013      	ands	r3, r2
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	429a      	cmp	r2, r3
 8001054:	d21e      	bcs.n	8001094 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001056:	4b24      	ldr	r3, [pc, #144]	@ (80010e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2207      	movs	r2, #7
 800105c:	4393      	bics	r3, r2
 800105e:	0019      	movs	r1, r3
 8001060:	4b21      	ldr	r3, [pc, #132]	@ (80010e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001062:	683a      	ldr	r2, [r7, #0]
 8001064:	430a      	orrs	r2, r1
 8001066:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001068:	f7ff fad6 	bl	8000618 <HAL_GetTick>
 800106c:	0003      	movs	r3, r0
 800106e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001070:	e009      	b.n	8001086 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001072:	f7ff fad1 	bl	8000618 <HAL_GetTick>
 8001076:	0002      	movs	r2, r0
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	4a1b      	ldr	r2, [pc, #108]	@ (80010ec <HAL_RCC_ClockConfig+0x1f4>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d901      	bls.n	8001086 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e02c      	b.n	80010e0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001086:	4b18      	ldr	r3, [pc, #96]	@ (80010e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2207      	movs	r2, #7
 800108c:	4013      	ands	r3, r2
 800108e:	683a      	ldr	r2, [r7, #0]
 8001090:	429a      	cmp	r2, r3
 8001092:	d1ee      	bne.n	8001072 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2204      	movs	r2, #4
 800109a:	4013      	ands	r3, r2
 800109c:	d009      	beq.n	80010b2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800109e:	4b14      	ldr	r3, [pc, #80]	@ (80010f0 <HAL_RCC_ClockConfig+0x1f8>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	4a16      	ldr	r2, [pc, #88]	@ (80010fc <HAL_RCC_ClockConfig+0x204>)
 80010a4:	4013      	ands	r3, r2
 80010a6:	0019      	movs	r1, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	691a      	ldr	r2, [r3, #16]
 80010ac:	4b10      	ldr	r3, [pc, #64]	@ (80010f0 <HAL_RCC_ClockConfig+0x1f8>)
 80010ae:	430a      	orrs	r2, r1
 80010b0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80010b2:	f000 f82b 	bl	800110c <HAL_RCC_GetSysClockFreq>
 80010b6:	0001      	movs	r1, r0
 80010b8:	4b0d      	ldr	r3, [pc, #52]	@ (80010f0 <HAL_RCC_ClockConfig+0x1f8>)
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	0a1b      	lsrs	r3, r3, #8
 80010be:	220f      	movs	r2, #15
 80010c0:	401a      	ands	r2, r3
 80010c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001100 <HAL_RCC_ClockConfig+0x208>)
 80010c4:	0092      	lsls	r2, r2, #2
 80010c6:	58d3      	ldr	r3, [r2, r3]
 80010c8:	221f      	movs	r2, #31
 80010ca:	4013      	ands	r3, r2
 80010cc:	000a      	movs	r2, r1
 80010ce:	40da      	lsrs	r2, r3
 80010d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001104 <HAL_RCC_ClockConfig+0x20c>)
 80010d2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80010d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001108 <HAL_RCC_ClockConfig+0x210>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	0018      	movs	r0, r3
 80010da:	f7ff fa41 	bl	8000560 <HAL_InitTick>
 80010de:	0003      	movs	r3, r0
}
 80010e0:	0018      	movs	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	b004      	add	sp, #16
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40022000 	.word	0x40022000
 80010ec:	00001388 	.word	0x00001388
 80010f0:	40021000 	.word	0x40021000
 80010f4:	ffff84ff 	.word	0xffff84ff
 80010f8:	fffff0ff 	.word	0xfffff0ff
 80010fc:	ffff8fff 	.word	0xffff8fff
 8001100:	08001a48 	.word	0x08001a48
 8001104:	20000000 	.word	0x20000000
 8001108:	20000004 	.word	0x20000004

0800110c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001112:	4b1c      	ldr	r3, [pc, #112]	@ (8001184 <HAL_RCC_GetSysClockFreq+0x78>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	2238      	movs	r2, #56	@ 0x38
 8001118:	4013      	ands	r3, r2
 800111a:	d10f      	bne.n	800113c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800111c:	4b19      	ldr	r3, [pc, #100]	@ (8001184 <HAL_RCC_GetSysClockFreq+0x78>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	0adb      	lsrs	r3, r3, #11
 8001122:	2207      	movs	r2, #7
 8001124:	4013      	ands	r3, r2
 8001126:	2201      	movs	r2, #1
 8001128:	409a      	lsls	r2, r3
 800112a:	0013      	movs	r3, r2
 800112c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800112e:	6839      	ldr	r1, [r7, #0]
 8001130:	4815      	ldr	r0, [pc, #84]	@ (8001188 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001132:	f7fe ffe9 	bl	8000108 <__udivsi3>
 8001136:	0003      	movs	r3, r0
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	e01e      	b.n	800117a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800113c:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <HAL_RCC_GetSysClockFreq+0x78>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	2238      	movs	r2, #56	@ 0x38
 8001142:	4013      	ands	r3, r2
 8001144:	2b08      	cmp	r3, #8
 8001146:	d102      	bne.n	800114e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001148:	4b10      	ldr	r3, [pc, #64]	@ (800118c <HAL_RCC_GetSysClockFreq+0x80>)
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	e015      	b.n	800117a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800114e:	4b0d      	ldr	r3, [pc, #52]	@ (8001184 <HAL_RCC_GetSysClockFreq+0x78>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	2238      	movs	r2, #56	@ 0x38
 8001154:	4013      	ands	r3, r2
 8001156:	2b20      	cmp	r3, #32
 8001158:	d103      	bne.n	8001162 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800115a:	2380      	movs	r3, #128	@ 0x80
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	e00b      	b.n	800117a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001162:	4b08      	ldr	r3, [pc, #32]	@ (8001184 <HAL_RCC_GetSysClockFreq+0x78>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	2238      	movs	r2, #56	@ 0x38
 8001168:	4013      	ands	r3, r2
 800116a:	2b18      	cmp	r3, #24
 800116c:	d103      	bne.n	8001176 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800116e:	23fa      	movs	r3, #250	@ 0xfa
 8001170:	01db      	lsls	r3, r3, #7
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	e001      	b.n	800117a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 800117a:	687b      	ldr	r3, [r7, #4]
}
 800117c:	0018      	movs	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	b002      	add	sp, #8
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40021000 	.word	0x40021000
 8001188:	02dc6c00 	.word	0x02dc6c00
 800118c:	007a1200 	.word	0x007a1200

08001190 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001194:	4b02      	ldr	r3, [pc, #8]	@ (80011a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001196:	681b      	ldr	r3, [r3, #0]
}
 8001198:	0018      	movs	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	46c0      	nop			@ (mov r8, r8)
 80011a0:	20000000 	.word	0x20000000

080011a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 80011a8:	f7ff fff2 	bl	8001190 <HAL_RCC_GetHCLKFreq>
 80011ac:	0001      	movs	r1, r0
 80011ae:	4b07      	ldr	r3, [pc, #28]	@ (80011cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	0b1b      	lsrs	r3, r3, #12
 80011b4:	2207      	movs	r2, #7
 80011b6:	401a      	ands	r2, r3
 80011b8:	4b05      	ldr	r3, [pc, #20]	@ (80011d0 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80011ba:	0092      	lsls	r2, r2, #2
 80011bc:	58d3      	ldr	r3, [r2, r3]
 80011be:	221f      	movs	r2, #31
 80011c0:	4013      	ands	r3, r2
 80011c2:	40d9      	lsrs	r1, r3
 80011c4:	000b      	movs	r3, r1
}
 80011c6:	0018      	movs	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40021000 	.word	0x40021000
 80011d0:	08001a88 	.word	0x08001a88

080011d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d101      	bne.n	80011e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e046      	b.n	8001274 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2288      	movs	r2, #136	@ 0x88
 80011ea:	589b      	ldr	r3, [r3, r2]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d107      	bne.n	8001200 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2284      	movs	r2, #132	@ 0x84
 80011f4:	2100      	movs	r1, #0
 80011f6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	0018      	movs	r0, r3
 80011fc:	f7ff f900 	bl	8000400 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2288      	movs	r2, #136	@ 0x88
 8001204:	2124      	movs	r1, #36	@ 0x24
 8001206:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2101      	movs	r1, #1
 8001214:	438a      	bics	r2, r1
 8001216:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800121c:	2b00      	cmp	r3, #0
 800121e:	d003      	beq.n	8001228 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	0018      	movs	r0, r3
 8001224:	f000 f9aa 	bl	800157c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	0018      	movs	r0, r3
 800122c:	f000 f828 	bl	8001280 <UART_SetConfig>
 8001230:	0003      	movs	r3, r0
 8001232:	2b01      	cmp	r3, #1
 8001234:	d101      	bne.n	800123a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e01c      	b.n	8001274 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	685a      	ldr	r2, [r3, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	490d      	ldr	r1, [pc, #52]	@ (800127c <HAL_UART_Init+0xa8>)
 8001246:	400a      	ands	r2, r1
 8001248:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	689a      	ldr	r2, [r3, #8]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	212a      	movs	r1, #42	@ 0x2a
 8001256:	438a      	bics	r2, r1
 8001258:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2101      	movs	r1, #1
 8001266:	430a      	orrs	r2, r1
 8001268:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	0018      	movs	r0, r3
 800126e:	f000 fa39 	bl	80016e4 <UART_CheckIdleState>
 8001272:	0003      	movs	r3, r0
}
 8001274:	0018      	movs	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	b002      	add	sp, #8
 800127a:	bd80      	pop	{r7, pc}
 800127c:	ffffb7ff 	.word	0xffffb7ff

08001280 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001288:	231e      	movs	r3, #30
 800128a:	18fb      	adds	r3, r7, r3
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	431a      	orrs	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	431a      	orrs	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	69db      	ldr	r3, [r3, #28]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4aab      	ldr	r2, [pc, #684]	@ (800155c <UART_SetConfig+0x2dc>)
 80012b0:	4013      	ands	r3, r2
 80012b2:	0019      	movs	r1, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	697a      	ldr	r2, [r7, #20]
 80012ba:	430a      	orrs	r2, r1
 80012bc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	4aa6      	ldr	r2, [pc, #664]	@ (8001560 <UART_SetConfig+0x2e0>)
 80012c6:	4013      	ands	r3, r2
 80012c8:	0019      	movs	r1, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	68da      	ldr	r2, [r3, #12]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	430a      	orrs	r2, r1
 80012d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a1b      	ldr	r3, [r3, #32]
 80012e0:	697a      	ldr	r2, [r7, #20]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	4a9d      	ldr	r2, [pc, #628]	@ (8001564 <UART_SetConfig+0x2e4>)
 80012ee:	4013      	ands	r3, r2
 80012f0:	0019      	movs	r1, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	430a      	orrs	r2, r1
 80012fa:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001302:	220f      	movs	r2, #15
 8001304:	4393      	bics	r3, r2
 8001306:	0019      	movs	r1, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	430a      	orrs	r2, r1
 8001312:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a93      	ldr	r2, [pc, #588]	@ (8001568 <UART_SetConfig+0x2e8>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d127      	bne.n	800136e <UART_SetConfig+0xee>
 800131e:	4b93      	ldr	r3, [pc, #588]	@ (800156c <UART_SetConfig+0x2ec>)
 8001320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001322:	2203      	movs	r2, #3
 8001324:	4013      	ands	r3, r2
 8001326:	2b03      	cmp	r3, #3
 8001328:	d017      	beq.n	800135a <UART_SetConfig+0xda>
 800132a:	d81b      	bhi.n	8001364 <UART_SetConfig+0xe4>
 800132c:	2b02      	cmp	r3, #2
 800132e:	d00a      	beq.n	8001346 <UART_SetConfig+0xc6>
 8001330:	d818      	bhi.n	8001364 <UART_SetConfig+0xe4>
 8001332:	2b00      	cmp	r3, #0
 8001334:	d002      	beq.n	800133c <UART_SetConfig+0xbc>
 8001336:	2b01      	cmp	r3, #1
 8001338:	d00a      	beq.n	8001350 <UART_SetConfig+0xd0>
 800133a:	e013      	b.n	8001364 <UART_SetConfig+0xe4>
 800133c:	231f      	movs	r3, #31
 800133e:	18fb      	adds	r3, r7, r3
 8001340:	2200      	movs	r2, #0
 8001342:	701a      	strb	r2, [r3, #0]
 8001344:	e021      	b.n	800138a <UART_SetConfig+0x10a>
 8001346:	231f      	movs	r3, #31
 8001348:	18fb      	adds	r3, r7, r3
 800134a:	2202      	movs	r2, #2
 800134c:	701a      	strb	r2, [r3, #0]
 800134e:	e01c      	b.n	800138a <UART_SetConfig+0x10a>
 8001350:	231f      	movs	r3, #31
 8001352:	18fb      	adds	r3, r7, r3
 8001354:	2204      	movs	r2, #4
 8001356:	701a      	strb	r2, [r3, #0]
 8001358:	e017      	b.n	800138a <UART_SetConfig+0x10a>
 800135a:	231f      	movs	r3, #31
 800135c:	18fb      	adds	r3, r7, r3
 800135e:	2208      	movs	r2, #8
 8001360:	701a      	strb	r2, [r3, #0]
 8001362:	e012      	b.n	800138a <UART_SetConfig+0x10a>
 8001364:	231f      	movs	r3, #31
 8001366:	18fb      	adds	r3, r7, r3
 8001368:	2210      	movs	r2, #16
 800136a:	701a      	strb	r2, [r3, #0]
 800136c:	e00d      	b.n	800138a <UART_SetConfig+0x10a>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a7f      	ldr	r2, [pc, #508]	@ (8001570 <UART_SetConfig+0x2f0>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d104      	bne.n	8001382 <UART_SetConfig+0x102>
 8001378:	231f      	movs	r3, #31
 800137a:	18fb      	adds	r3, r7, r3
 800137c:	2200      	movs	r2, #0
 800137e:	701a      	strb	r2, [r3, #0]
 8001380:	e003      	b.n	800138a <UART_SetConfig+0x10a>
 8001382:	231f      	movs	r3, #31
 8001384:	18fb      	adds	r3, r7, r3
 8001386:	2210      	movs	r2, #16
 8001388:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69da      	ldr	r2, [r3, #28]
 800138e:	2380      	movs	r3, #128	@ 0x80
 8001390:	021b      	lsls	r3, r3, #8
 8001392:	429a      	cmp	r2, r3
 8001394:	d000      	beq.n	8001398 <UART_SetConfig+0x118>
 8001396:	e06f      	b.n	8001478 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8001398:	231f      	movs	r3, #31
 800139a:	18fb      	adds	r3, r7, r3
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b08      	cmp	r3, #8
 80013a0:	d01f      	beq.n	80013e2 <UART_SetConfig+0x162>
 80013a2:	dc22      	bgt.n	80013ea <UART_SetConfig+0x16a>
 80013a4:	2b04      	cmp	r3, #4
 80013a6:	d017      	beq.n	80013d8 <UART_SetConfig+0x158>
 80013a8:	dc1f      	bgt.n	80013ea <UART_SetConfig+0x16a>
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d002      	beq.n	80013b4 <UART_SetConfig+0x134>
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d005      	beq.n	80013be <UART_SetConfig+0x13e>
 80013b2:	e01a      	b.n	80013ea <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80013b4:	f7ff fef6 	bl	80011a4 <HAL_RCC_GetPCLK1Freq>
 80013b8:	0003      	movs	r3, r0
 80013ba:	61bb      	str	r3, [r7, #24]
        break;
 80013bc:	e01c      	b.n	80013f8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80013be:	4b6b      	ldr	r3, [pc, #428]	@ (800156c <UART_SetConfig+0x2ec>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	095b      	lsrs	r3, r3, #5
 80013c4:	2207      	movs	r2, #7
 80013c6:	4013      	ands	r3, r2
 80013c8:	3301      	adds	r3, #1
 80013ca:	0019      	movs	r1, r3
 80013cc:	4869      	ldr	r0, [pc, #420]	@ (8001574 <UART_SetConfig+0x2f4>)
 80013ce:	f7fe fe9b 	bl	8000108 <__udivsi3>
 80013d2:	0003      	movs	r3, r0
 80013d4:	61bb      	str	r3, [r7, #24]
        break;
 80013d6:	e00f      	b.n	80013f8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80013d8:	f7ff fe98 	bl	800110c <HAL_RCC_GetSysClockFreq>
 80013dc:	0003      	movs	r3, r0
 80013de:	61bb      	str	r3, [r7, #24]
        break;
 80013e0:	e00a      	b.n	80013f8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80013e2:	2380      	movs	r3, #128	@ 0x80
 80013e4:	021b      	lsls	r3, r3, #8
 80013e6:	61bb      	str	r3, [r7, #24]
        break;
 80013e8:	e006      	b.n	80013f8 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80013ee:	231e      	movs	r3, #30
 80013f0:	18fb      	adds	r3, r7, r3
 80013f2:	2201      	movs	r2, #1
 80013f4:	701a      	strb	r2, [r3, #0]
        break;
 80013f6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d100      	bne.n	8001400 <UART_SetConfig+0x180>
 80013fe:	e097      	b.n	8001530 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001404:	4b5c      	ldr	r3, [pc, #368]	@ (8001578 <UART_SetConfig+0x2f8>)
 8001406:	0052      	lsls	r2, r2, #1
 8001408:	5ad3      	ldrh	r3, [r2, r3]
 800140a:	0019      	movs	r1, r3
 800140c:	69b8      	ldr	r0, [r7, #24]
 800140e:	f7fe fe7b 	bl	8000108 <__udivsi3>
 8001412:	0003      	movs	r3, r0
 8001414:	005a      	lsls	r2, r3, #1
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	085b      	lsrs	r3, r3, #1
 800141c:	18d2      	adds	r2, r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	0019      	movs	r1, r3
 8001424:	0010      	movs	r0, r2
 8001426:	f7fe fe6f 	bl	8000108 <__udivsi3>
 800142a:	0003      	movs	r3, r0
 800142c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	2b0f      	cmp	r3, #15
 8001432:	d91c      	bls.n	800146e <UART_SetConfig+0x1ee>
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	2380      	movs	r3, #128	@ 0x80
 8001438:	025b      	lsls	r3, r3, #9
 800143a:	429a      	cmp	r2, r3
 800143c:	d217      	bcs.n	800146e <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	b29a      	uxth	r2, r3
 8001442:	200e      	movs	r0, #14
 8001444:	183b      	adds	r3, r7, r0
 8001446:	210f      	movs	r1, #15
 8001448:	438a      	bics	r2, r1
 800144a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	085b      	lsrs	r3, r3, #1
 8001450:	b29b      	uxth	r3, r3
 8001452:	2207      	movs	r2, #7
 8001454:	4013      	ands	r3, r2
 8001456:	b299      	uxth	r1, r3
 8001458:	183b      	adds	r3, r7, r0
 800145a:	183a      	adds	r2, r7, r0
 800145c:	8812      	ldrh	r2, [r2, #0]
 800145e:	430a      	orrs	r2, r1
 8001460:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	183a      	adds	r2, r7, r0
 8001468:	8812      	ldrh	r2, [r2, #0]
 800146a:	60da      	str	r2, [r3, #12]
 800146c:	e060      	b.n	8001530 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800146e:	231e      	movs	r3, #30
 8001470:	18fb      	adds	r3, r7, r3
 8001472:	2201      	movs	r2, #1
 8001474:	701a      	strb	r2, [r3, #0]
 8001476:	e05b      	b.n	8001530 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001478:	231f      	movs	r3, #31
 800147a:	18fb      	adds	r3, r7, r3
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b08      	cmp	r3, #8
 8001480:	d01f      	beq.n	80014c2 <UART_SetConfig+0x242>
 8001482:	dc22      	bgt.n	80014ca <UART_SetConfig+0x24a>
 8001484:	2b04      	cmp	r3, #4
 8001486:	d017      	beq.n	80014b8 <UART_SetConfig+0x238>
 8001488:	dc1f      	bgt.n	80014ca <UART_SetConfig+0x24a>
 800148a:	2b00      	cmp	r3, #0
 800148c:	d002      	beq.n	8001494 <UART_SetConfig+0x214>
 800148e:	2b02      	cmp	r3, #2
 8001490:	d005      	beq.n	800149e <UART_SetConfig+0x21e>
 8001492:	e01a      	b.n	80014ca <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001494:	f7ff fe86 	bl	80011a4 <HAL_RCC_GetPCLK1Freq>
 8001498:	0003      	movs	r3, r0
 800149a:	61bb      	str	r3, [r7, #24]
        break;
 800149c:	e01c      	b.n	80014d8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800149e:	4b33      	ldr	r3, [pc, #204]	@ (800156c <UART_SetConfig+0x2ec>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	095b      	lsrs	r3, r3, #5
 80014a4:	2207      	movs	r2, #7
 80014a6:	4013      	ands	r3, r2
 80014a8:	3301      	adds	r3, #1
 80014aa:	0019      	movs	r1, r3
 80014ac:	4831      	ldr	r0, [pc, #196]	@ (8001574 <UART_SetConfig+0x2f4>)
 80014ae:	f7fe fe2b 	bl	8000108 <__udivsi3>
 80014b2:	0003      	movs	r3, r0
 80014b4:	61bb      	str	r3, [r7, #24]
        break;
 80014b6:	e00f      	b.n	80014d8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80014b8:	f7ff fe28 	bl	800110c <HAL_RCC_GetSysClockFreq>
 80014bc:	0003      	movs	r3, r0
 80014be:	61bb      	str	r3, [r7, #24]
        break;
 80014c0:	e00a      	b.n	80014d8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80014c2:	2380      	movs	r3, #128	@ 0x80
 80014c4:	021b      	lsls	r3, r3, #8
 80014c6:	61bb      	str	r3, [r7, #24]
        break;
 80014c8:	e006      	b.n	80014d8 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80014ce:	231e      	movs	r3, #30
 80014d0:	18fb      	adds	r3, r7, r3
 80014d2:	2201      	movs	r2, #1
 80014d4:	701a      	strb	r2, [r3, #0]
        break;
 80014d6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d028      	beq.n	8001530 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014e2:	4b25      	ldr	r3, [pc, #148]	@ (8001578 <UART_SetConfig+0x2f8>)
 80014e4:	0052      	lsls	r2, r2, #1
 80014e6:	5ad3      	ldrh	r3, [r2, r3]
 80014e8:	0019      	movs	r1, r3
 80014ea:	69b8      	ldr	r0, [r7, #24]
 80014ec:	f7fe fe0c 	bl	8000108 <__udivsi3>
 80014f0:	0003      	movs	r3, r0
 80014f2:	001a      	movs	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	085b      	lsrs	r3, r3, #1
 80014fa:	18d2      	adds	r2, r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	0019      	movs	r1, r3
 8001502:	0010      	movs	r0, r2
 8001504:	f7fe fe00 	bl	8000108 <__udivsi3>
 8001508:	0003      	movs	r3, r0
 800150a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	2b0f      	cmp	r3, #15
 8001510:	d90a      	bls.n	8001528 <UART_SetConfig+0x2a8>
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	2380      	movs	r3, #128	@ 0x80
 8001516:	025b      	lsls	r3, r3, #9
 8001518:	429a      	cmp	r2, r3
 800151a:	d205      	bcs.n	8001528 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	b29a      	uxth	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	e003      	b.n	8001530 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8001528:	231e      	movs	r3, #30
 800152a:	18fb      	adds	r3, r7, r3
 800152c:	2201      	movs	r2, #1
 800152e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	226a      	movs	r2, #106	@ 0x6a
 8001534:	2101      	movs	r1, #1
 8001536:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2268      	movs	r2, #104	@ 0x68
 800153c:	2101      	movs	r1, #1
 800153e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800154c:	231e      	movs	r3, #30
 800154e:	18fb      	adds	r3, r7, r3
 8001550:	781b      	ldrb	r3, [r3, #0]
}
 8001552:	0018      	movs	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	b008      	add	sp, #32
 8001558:	bd80      	pop	{r7, pc}
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	cfff69f3 	.word	0xcfff69f3
 8001560:	ffffcfff 	.word	0xffffcfff
 8001564:	11fff4ff 	.word	0x11fff4ff
 8001568:	40013800 	.word	0x40013800
 800156c:	40021000 	.word	0x40021000
 8001570:	40004400 	.word	0x40004400
 8001574:	02dc6c00 	.word	0x02dc6c00
 8001578:	08001aa8 	.word	0x08001aa8

0800157c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001588:	2208      	movs	r2, #8
 800158a:	4013      	ands	r3, r2
 800158c:	d00b      	beq.n	80015a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	4a4a      	ldr	r2, [pc, #296]	@ (80016c0 <UART_AdvFeatureConfig+0x144>)
 8001596:	4013      	ands	r3, r2
 8001598:	0019      	movs	r1, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	430a      	orrs	r2, r1
 80015a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015aa:	2201      	movs	r2, #1
 80015ac:	4013      	ands	r3, r2
 80015ae:	d00b      	beq.n	80015c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	4a43      	ldr	r2, [pc, #268]	@ (80016c4 <UART_AdvFeatureConfig+0x148>)
 80015b8:	4013      	ands	r3, r2
 80015ba:	0019      	movs	r1, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	430a      	orrs	r2, r1
 80015c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015cc:	2202      	movs	r2, #2
 80015ce:	4013      	ands	r3, r2
 80015d0:	d00b      	beq.n	80015ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	4a3b      	ldr	r2, [pc, #236]	@ (80016c8 <UART_AdvFeatureConfig+0x14c>)
 80015da:	4013      	ands	r3, r2
 80015dc:	0019      	movs	r1, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	430a      	orrs	r2, r1
 80015e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ee:	2204      	movs	r2, #4
 80015f0:	4013      	ands	r3, r2
 80015f2:	d00b      	beq.n	800160c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	4a34      	ldr	r2, [pc, #208]	@ (80016cc <UART_AdvFeatureConfig+0x150>)
 80015fc:	4013      	ands	r3, r2
 80015fe:	0019      	movs	r1, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	430a      	orrs	r2, r1
 800160a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001610:	2210      	movs	r2, #16
 8001612:	4013      	ands	r3, r2
 8001614:	d00b      	beq.n	800162e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	4a2c      	ldr	r2, [pc, #176]	@ (80016d0 <UART_AdvFeatureConfig+0x154>)
 800161e:	4013      	ands	r3, r2
 8001620:	0019      	movs	r1, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	430a      	orrs	r2, r1
 800162c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001632:	2220      	movs	r2, #32
 8001634:	4013      	ands	r3, r2
 8001636:	d00b      	beq.n	8001650 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	4a25      	ldr	r2, [pc, #148]	@ (80016d4 <UART_AdvFeatureConfig+0x158>)
 8001640:	4013      	ands	r3, r2
 8001642:	0019      	movs	r1, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	430a      	orrs	r2, r1
 800164e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001654:	2240      	movs	r2, #64	@ 0x40
 8001656:	4013      	ands	r3, r2
 8001658:	d01d      	beq.n	8001696 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	4a1d      	ldr	r2, [pc, #116]	@ (80016d8 <UART_AdvFeatureConfig+0x15c>)
 8001662:	4013      	ands	r3, r2
 8001664:	0019      	movs	r1, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	430a      	orrs	r2, r1
 8001670:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001676:	2380      	movs	r3, #128	@ 0x80
 8001678:	035b      	lsls	r3, r3, #13
 800167a:	429a      	cmp	r2, r3
 800167c:	d10b      	bne.n	8001696 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	4a15      	ldr	r2, [pc, #84]	@ (80016dc <UART_AdvFeatureConfig+0x160>)
 8001686:	4013      	ands	r3, r2
 8001688:	0019      	movs	r1, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800169a:	2280      	movs	r2, #128	@ 0x80
 800169c:	4013      	ands	r3, r2
 800169e:	d00b      	beq.n	80016b8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	4a0e      	ldr	r2, [pc, #56]	@ (80016e0 <UART_AdvFeatureConfig+0x164>)
 80016a8:	4013      	ands	r3, r2
 80016aa:	0019      	movs	r1, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	605a      	str	r2, [r3, #4]
  }
}
 80016b8:	46c0      	nop			@ (mov r8, r8)
 80016ba:	46bd      	mov	sp, r7
 80016bc:	b002      	add	sp, #8
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	ffff7fff 	.word	0xffff7fff
 80016c4:	fffdffff 	.word	0xfffdffff
 80016c8:	fffeffff 	.word	0xfffeffff
 80016cc:	fffbffff 	.word	0xfffbffff
 80016d0:	ffffefff 	.word	0xffffefff
 80016d4:	ffffdfff 	.word	0xffffdfff
 80016d8:	ffefffff 	.word	0xffefffff
 80016dc:	ff9fffff 	.word	0xff9fffff
 80016e0:	fff7ffff 	.word	0xfff7ffff

080016e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b092      	sub	sp, #72	@ 0x48
 80016e8:	af02      	add	r7, sp, #8
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2290      	movs	r2, #144	@ 0x90
 80016f0:	2100      	movs	r1, #0
 80016f2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80016f4:	f7fe ff90 	bl	8000618 <HAL_GetTick>
 80016f8:	0003      	movs	r3, r0
 80016fa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2208      	movs	r2, #8
 8001704:	4013      	ands	r3, r2
 8001706:	2b08      	cmp	r3, #8
 8001708:	d12d      	bne.n	8001766 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800170a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800170c:	2280      	movs	r2, #128	@ 0x80
 800170e:	0391      	lsls	r1, r2, #14
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	4a47      	ldr	r2, [pc, #284]	@ (8001830 <UART_CheckIdleState+0x14c>)
 8001714:	9200      	str	r2, [sp, #0]
 8001716:	2200      	movs	r2, #0
 8001718:	f000 f88e 	bl	8001838 <UART_WaitOnFlagUntilTimeout>
 800171c:	1e03      	subs	r3, r0, #0
 800171e:	d022      	beq.n	8001766 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001720:	f3ef 8310 	mrs	r3, PRIMASK
 8001724:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8001726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8001728:	63bb      	str	r3, [r7, #56]	@ 0x38
 800172a:	2301      	movs	r3, #1
 800172c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800172e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001730:	f383 8810 	msr	PRIMASK, r3
}
 8001734:	46c0      	nop			@ (mov r8, r8)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2180      	movs	r1, #128	@ 0x80
 8001742:	438a      	bics	r2, r1
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001748:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800174a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800174c:	f383 8810 	msr	PRIMASK, r3
}
 8001750:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2288      	movs	r2, #136	@ 0x88
 8001756:	2120      	movs	r1, #32
 8001758:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2284      	movs	r2, #132	@ 0x84
 800175e:	2100      	movs	r1, #0
 8001760:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e060      	b.n	8001828 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2204      	movs	r2, #4
 800176e:	4013      	ands	r3, r2
 8001770:	2b04      	cmp	r3, #4
 8001772:	d146      	bne.n	8001802 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001776:	2280      	movs	r2, #128	@ 0x80
 8001778:	03d1      	lsls	r1, r2, #15
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	4a2c      	ldr	r2, [pc, #176]	@ (8001830 <UART_CheckIdleState+0x14c>)
 800177e:	9200      	str	r2, [sp, #0]
 8001780:	2200      	movs	r2, #0
 8001782:	f000 f859 	bl	8001838 <UART_WaitOnFlagUntilTimeout>
 8001786:	1e03      	subs	r3, r0, #0
 8001788:	d03b      	beq.n	8001802 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800178a:	f3ef 8310 	mrs	r3, PRIMASK
 800178e:	60fb      	str	r3, [r7, #12]
  return(result);
 8001790:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8001792:	637b      	str	r3, [r7, #52]	@ 0x34
 8001794:	2301      	movs	r3, #1
 8001796:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	f383 8810 	msr	PRIMASK, r3
}
 800179e:	46c0      	nop			@ (mov r8, r8)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4922      	ldr	r1, [pc, #136]	@ (8001834 <UART_CheckIdleState+0x150>)
 80017ac:	400a      	ands	r2, r1
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	f383 8810 	msr	PRIMASK, r3
}
 80017ba:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80017bc:	f3ef 8310 	mrs	r3, PRIMASK
 80017c0:	61bb      	str	r3, [r7, #24]
  return(result);
 80017c2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80017c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80017c6:	2301      	movs	r3, #1
 80017c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	f383 8810 	msr	PRIMASK, r3
}
 80017d0:	46c0      	nop			@ (mov r8, r8)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2101      	movs	r1, #1
 80017de:	438a      	bics	r2, r1
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017e4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017e6:	6a3b      	ldr	r3, [r7, #32]
 80017e8:	f383 8810 	msr	PRIMASK, r3
}
 80017ec:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	228c      	movs	r2, #140	@ 0x8c
 80017f2:	2120      	movs	r1, #32
 80017f4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2284      	movs	r2, #132	@ 0x84
 80017fa:	2100      	movs	r1, #0
 80017fc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e012      	b.n	8001828 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2288      	movs	r2, #136	@ 0x88
 8001806:	2120      	movs	r1, #32
 8001808:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	228c      	movs	r2, #140	@ 0x8c
 800180e:	2120      	movs	r1, #32
 8001810:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2284      	movs	r2, #132	@ 0x84
 8001822:	2100      	movs	r1, #0
 8001824:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001826:	2300      	movs	r3, #0
}
 8001828:	0018      	movs	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	b010      	add	sp, #64	@ 0x40
 800182e:	bd80      	pop	{r7, pc}
 8001830:	01ffffff 	.word	0x01ffffff
 8001834:	fffffedf 	.word	0xfffffedf

08001838 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	603b      	str	r3, [r7, #0]
 8001844:	1dfb      	adds	r3, r7, #7
 8001846:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001848:	e04b      	b.n	80018e2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	3301      	adds	r3, #1
 800184e:	d048      	beq.n	80018e2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001850:	f7fe fee2 	bl	8000618 <HAL_GetTick>
 8001854:	0002      	movs	r2, r0
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	429a      	cmp	r2, r3
 800185e:	d302      	bcc.n	8001866 <UART_WaitOnFlagUntilTimeout+0x2e>
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e04b      	b.n	8001902 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2204      	movs	r2, #4
 8001872:	4013      	ands	r3, r2
 8001874:	d035      	beq.n	80018e2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	2208      	movs	r2, #8
 800187e:	4013      	ands	r3, r2
 8001880:	2b08      	cmp	r3, #8
 8001882:	d111      	bne.n	80018a8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2208      	movs	r2, #8
 800188a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	0018      	movs	r0, r3
 8001890:	f000 f83c 	bl	800190c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2290      	movs	r2, #144	@ 0x90
 8001898:	2108      	movs	r1, #8
 800189a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2284      	movs	r2, #132	@ 0x84
 80018a0:	2100      	movs	r1, #0
 80018a2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e02c      	b.n	8001902 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	69da      	ldr	r2, [r3, #28]
 80018ae:	2380      	movs	r3, #128	@ 0x80
 80018b0:	011b      	lsls	r3, r3, #4
 80018b2:	401a      	ands	r2, r3
 80018b4:	2380      	movs	r3, #128	@ 0x80
 80018b6:	011b      	lsls	r3, r3, #4
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d112      	bne.n	80018e2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2280      	movs	r2, #128	@ 0x80
 80018c2:	0112      	lsls	r2, r2, #4
 80018c4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	0018      	movs	r0, r3
 80018ca:	f000 f81f 	bl	800190c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2290      	movs	r2, #144	@ 0x90
 80018d2:	2120      	movs	r1, #32
 80018d4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2284      	movs	r2, #132	@ 0x84
 80018da:	2100      	movs	r1, #0
 80018dc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e00f      	b.n	8001902 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	69db      	ldr	r3, [r3, #28]
 80018e8:	68ba      	ldr	r2, [r7, #8]
 80018ea:	4013      	ands	r3, r2
 80018ec:	68ba      	ldr	r2, [r7, #8]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	425a      	negs	r2, r3
 80018f2:	4153      	adcs	r3, r2
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	001a      	movs	r2, r3
 80018f8:	1dfb      	adds	r3, r7, #7
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d0a4      	beq.n	800184a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	0018      	movs	r0, r3
 8001904:	46bd      	mov	sp, r7
 8001906:	b004      	add	sp, #16
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08e      	sub	sp, #56	@ 0x38
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001914:	f3ef 8310 	mrs	r3, PRIMASK
 8001918:	617b      	str	r3, [r7, #20]
  return(result);
 800191a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800191c:	637b      	str	r3, [r7, #52]	@ 0x34
 800191e:	2301      	movs	r3, #1
 8001920:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	f383 8810 	msr	PRIMASK, r3
}
 8001928:	46c0      	nop			@ (mov r8, r8)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4926      	ldr	r1, [pc, #152]	@ (80019d0 <UART_EndRxTransfer+0xc4>)
 8001936:	400a      	ands	r2, r1
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800193c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	f383 8810 	msr	PRIMASK, r3
}
 8001944:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001946:	f3ef 8310 	mrs	r3, PRIMASK
 800194a:	623b      	str	r3, [r7, #32]
  return(result);
 800194c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800194e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001950:	2301      	movs	r3, #1
 8001952:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001956:	f383 8810 	msr	PRIMASK, r3
}
 800195a:	46c0      	nop			@ (mov r8, r8)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	491b      	ldr	r1, [pc, #108]	@ (80019d4 <UART_EndRxTransfer+0xc8>)
 8001968:	400a      	ands	r2, r1
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800196e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001972:	f383 8810 	msr	PRIMASK, r3
}
 8001976:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800197c:	2b01      	cmp	r3, #1
 800197e:	d118      	bne.n	80019b2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001980:	f3ef 8310 	mrs	r3, PRIMASK
 8001984:	60bb      	str	r3, [r7, #8]
  return(result);
 8001986:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001988:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800198a:	2301      	movs	r3, #1
 800198c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f383 8810 	msr	PRIMASK, r3
}
 8001994:	46c0      	nop			@ (mov r8, r8)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2110      	movs	r1, #16
 80019a2:	438a      	bics	r2, r1
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	f383 8810 	msr	PRIMASK, r3
}
 80019b0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	228c      	movs	r2, #140	@ 0x8c
 80019b6:	2120      	movs	r1, #32
 80019b8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80019c6:	46c0      	nop			@ (mov r8, r8)
 80019c8:	46bd      	mov	sp, r7
 80019ca:	b00e      	add	sp, #56	@ 0x38
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	46c0      	nop			@ (mov r8, r8)
 80019d0:	fffffedf 	.word	0xfffffedf
 80019d4:	effffffe 	.word	0xeffffffe

080019d8 <memset>:
 80019d8:	0003      	movs	r3, r0
 80019da:	1882      	adds	r2, r0, r2
 80019dc:	4293      	cmp	r3, r2
 80019de:	d100      	bne.n	80019e2 <memset+0xa>
 80019e0:	4770      	bx	lr
 80019e2:	7019      	strb	r1, [r3, #0]
 80019e4:	3301      	adds	r3, #1
 80019e6:	e7f9      	b.n	80019dc <memset+0x4>

080019e8 <__libc_init_array>:
 80019e8:	b570      	push	{r4, r5, r6, lr}
 80019ea:	2600      	movs	r6, #0
 80019ec:	4c0c      	ldr	r4, [pc, #48]	@ (8001a20 <__libc_init_array+0x38>)
 80019ee:	4d0d      	ldr	r5, [pc, #52]	@ (8001a24 <__libc_init_array+0x3c>)
 80019f0:	1b64      	subs	r4, r4, r5
 80019f2:	10a4      	asrs	r4, r4, #2
 80019f4:	42a6      	cmp	r6, r4
 80019f6:	d109      	bne.n	8001a0c <__libc_init_array+0x24>
 80019f8:	2600      	movs	r6, #0
 80019fa:	f000 f819 	bl	8001a30 <_init>
 80019fe:	4c0a      	ldr	r4, [pc, #40]	@ (8001a28 <__libc_init_array+0x40>)
 8001a00:	4d0a      	ldr	r5, [pc, #40]	@ (8001a2c <__libc_init_array+0x44>)
 8001a02:	1b64      	subs	r4, r4, r5
 8001a04:	10a4      	asrs	r4, r4, #2
 8001a06:	42a6      	cmp	r6, r4
 8001a08:	d105      	bne.n	8001a16 <__libc_init_array+0x2e>
 8001a0a:	bd70      	pop	{r4, r5, r6, pc}
 8001a0c:	00b3      	lsls	r3, r6, #2
 8001a0e:	58eb      	ldr	r3, [r5, r3]
 8001a10:	4798      	blx	r3
 8001a12:	3601      	adds	r6, #1
 8001a14:	e7ee      	b.n	80019f4 <__libc_init_array+0xc>
 8001a16:	00b3      	lsls	r3, r6, #2
 8001a18:	58eb      	ldr	r3, [r5, r3]
 8001a1a:	4798      	blx	r3
 8001a1c:	3601      	adds	r6, #1
 8001a1e:	e7f2      	b.n	8001a06 <__libc_init_array+0x1e>
 8001a20:	08001ac0 	.word	0x08001ac0
 8001a24:	08001ac0 	.word	0x08001ac0
 8001a28:	08001ac4 	.word	0x08001ac4
 8001a2c:	08001ac0 	.word	0x08001ac0

08001a30 <_init>:
 8001a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a32:	46c0      	nop			@ (mov r8, r8)
 8001a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a36:	bc08      	pop	{r3}
 8001a38:	469e      	mov	lr, r3
 8001a3a:	4770      	bx	lr

08001a3c <_fini>:
 8001a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a3e:	46c0      	nop			@ (mov r8, r8)
 8001a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a42:	bc08      	pop	{r3}
 8001a44:	469e      	mov	lr, r3
 8001a46:	4770      	bx	lr
