
STM32C031.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f18  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004fd8  08004fd8  00005fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005060  08005060  0000707c  2**0
                  CONTENTS
  4 .ARM          00000000  08005060  08005060  0000707c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005060  08005060  0000707c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005060  08005060  00006060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005064  08005064  00006064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08005068  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  2000007c  080050e4  0000707c  2**2
                  ALLOC
 10 ._user_heap_stack 00001800  200003d8  080050e4  000073d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000707c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003275  00000000  00000000  000070a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a8b  00000000  00000000  0000a319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  0000ada8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000090e  00000000  00000000  0000b988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000983e  00000000  00000000  0000c296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00001eb1  00000000  00000000  00015ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00017985  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002f38  00000000  00000000  000179c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000004b  00000000  00000000  0001a900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000007c 	.word	0x2000007c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004fc0 	.word	0x08004fc0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000080 	.word	0x20000080
 8000104:	08004fc0 	.word	0x08004fc0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b08b      	sub	sp, #44	@ 0x2c
 8000224:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000226:	2414      	movs	r4, #20
 8000228:	193b      	adds	r3, r7, r4
 800022a:	0018      	movs	r0, r3
 800022c:	2314      	movs	r3, #20
 800022e:	001a      	movs	r2, r3
 8000230:	2100      	movs	r1, #0
 8000232:	f004 fbf1 	bl	8004a18 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000236:	4b27      	ldr	r3, [pc, #156]	@ (80002d4 <MX_GPIO_Init+0xb4>)
 8000238:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800023a:	4b26      	ldr	r3, [pc, #152]	@ (80002d4 <MX_GPIO_Init+0xb4>)
 800023c:	2104      	movs	r1, #4
 800023e:	430a      	orrs	r2, r1
 8000240:	635a      	str	r2, [r3, #52]	@ 0x34
 8000242:	4b24      	ldr	r3, [pc, #144]	@ (80002d4 <MX_GPIO_Init+0xb4>)
 8000244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000246:	2204      	movs	r2, #4
 8000248:	4013      	ands	r3, r2
 800024a:	613b      	str	r3, [r7, #16]
 800024c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800024e:	4b21      	ldr	r3, [pc, #132]	@ (80002d4 <MX_GPIO_Init+0xb4>)
 8000250:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000252:	4b20      	ldr	r3, [pc, #128]	@ (80002d4 <MX_GPIO_Init+0xb4>)
 8000254:	2120      	movs	r1, #32
 8000256:	430a      	orrs	r2, r1
 8000258:	635a      	str	r2, [r3, #52]	@ 0x34
 800025a:	4b1e      	ldr	r3, [pc, #120]	@ (80002d4 <MX_GPIO_Init+0xb4>)
 800025c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800025e:	2220      	movs	r2, #32
 8000260:	4013      	ands	r3, r2
 8000262:	60fb      	str	r3, [r7, #12]
 8000264:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000266:	4b1b      	ldr	r3, [pc, #108]	@ (80002d4 <MX_GPIO_Init+0xb4>)
 8000268:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800026a:	4b1a      	ldr	r3, [pc, #104]	@ (80002d4 <MX_GPIO_Init+0xb4>)
 800026c:	2101      	movs	r1, #1
 800026e:	430a      	orrs	r2, r1
 8000270:	635a      	str	r2, [r3, #52]	@ 0x34
 8000272:	4b18      	ldr	r3, [pc, #96]	@ (80002d4 <MX_GPIO_Init+0xb4>)
 8000274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000276:	2201      	movs	r2, #1
 8000278:	4013      	ands	r3, r2
 800027a:	60bb      	str	r3, [r7, #8]
 800027c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800027e:	4b15      	ldr	r3, [pc, #84]	@ (80002d4 <MX_GPIO_Init+0xb4>)
 8000280:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000282:	4b14      	ldr	r3, [pc, #80]	@ (80002d4 <MX_GPIO_Init+0xb4>)
 8000284:	2102      	movs	r1, #2
 8000286:	430a      	orrs	r2, r1
 8000288:	635a      	str	r2, [r3, #52]	@ 0x34
 800028a:	4b12      	ldr	r3, [pc, #72]	@ (80002d4 <MX_GPIO_Init+0xb4>)
 800028c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800028e:	2202      	movs	r2, #2
 8000290:	4013      	ands	r3, r2
 8000292:	607b      	str	r3, [r7, #4]
 8000294:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000296:	23a0      	movs	r3, #160	@ 0xa0
 8000298:	05db      	lsls	r3, r3, #23
 800029a:	2200      	movs	r2, #0
 800029c:	2120      	movs	r1, #32
 800029e:	0018      	movs	r0, r3
 80002a0:	f000 ff36 	bl	8001110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80002a4:	0021      	movs	r1, r4
 80002a6:	187b      	adds	r3, r7, r1
 80002a8:	2220      	movs	r2, #32
 80002aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ac:	187b      	adds	r3, r7, r1
 80002ae:	2201      	movs	r2, #1
 80002b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b2:	187b      	adds	r3, r7, r1
 80002b4:	2200      	movs	r2, #0
 80002b6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	2200      	movs	r2, #0
 80002bc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002be:	187a      	adds	r2, r7, r1
 80002c0:	23a0      	movs	r3, #160	@ 0xa0
 80002c2:	05db      	lsls	r3, r3, #23
 80002c4:	0011      	movs	r1, r2
 80002c6:	0018      	movs	r0, r3
 80002c8:	f000 fdb0 	bl	8000e2c <HAL_GPIO_Init>

}
 80002cc:	46c0      	nop			@ (mov r8, r8)
 80002ce:	46bd      	mov	sp, r7
 80002d0:	b00b      	add	sp, #44	@ 0x2c
 80002d2:	bd90      	pop	{r4, r7, pc}
 80002d4:	40021000 	.word	0x40021000

080002d8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002dc:	4b1b      	ldr	r3, [pc, #108]	@ (800034c <MX_I2C1_Init+0x74>)
 80002de:	4a1c      	ldr	r2, [pc, #112]	@ (8000350 <MX_I2C1_Init+0x78>)
 80002e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2010091A;
 80002e2:	4b1a      	ldr	r3, [pc, #104]	@ (800034c <MX_I2C1_Init+0x74>)
 80002e4:	4a1b      	ldr	r2, [pc, #108]	@ (8000354 <MX_I2C1_Init+0x7c>)
 80002e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 10;
 80002e8:	4b18      	ldr	r3, [pc, #96]	@ (800034c <MX_I2C1_Init+0x74>)
 80002ea:	220a      	movs	r2, #10
 80002ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002ee:	4b17      	ldr	r3, [pc, #92]	@ (800034c <MX_I2C1_Init+0x74>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002f4:	4b15      	ldr	r3, [pc, #84]	@ (800034c <MX_I2C1_Init+0x74>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002fa:	4b14      	ldr	r3, [pc, #80]	@ (800034c <MX_I2C1_Init+0x74>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000300:	4b12      	ldr	r3, [pc, #72]	@ (800034c <MX_I2C1_Init+0x74>)
 8000302:	2200      	movs	r2, #0
 8000304:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000306:	4b11      	ldr	r3, [pc, #68]	@ (800034c <MX_I2C1_Init+0x74>)
 8000308:	2200      	movs	r2, #0
 800030a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800030c:	4b0f      	ldr	r3, [pc, #60]	@ (800034c <MX_I2C1_Init+0x74>)
 800030e:	2200      	movs	r2, #0
 8000310:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000312:	4b0e      	ldr	r3, [pc, #56]	@ (800034c <MX_I2C1_Init+0x74>)
 8000314:	0018      	movs	r0, r3
 8000316:	f000 ff33 	bl	8001180 <HAL_I2C_Init>
 800031a:	1e03      	subs	r3, r0, #0
 800031c:	d001      	beq.n	8000322 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800031e:	f000 f95d 	bl	80005dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000322:	4b0a      	ldr	r3, [pc, #40]	@ (800034c <MX_I2C1_Init+0x74>)
 8000324:	2100      	movs	r1, #0
 8000326:	0018      	movs	r0, r3
 8000328:	f001 fddc 	bl	8001ee4 <HAL_I2CEx_ConfigAnalogFilter>
 800032c:	1e03      	subs	r3, r0, #0
 800032e:	d001      	beq.n	8000334 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000330:	f000 f954 	bl	80005dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000334:	4b05      	ldr	r3, [pc, #20]	@ (800034c <MX_I2C1_Init+0x74>)
 8000336:	2100      	movs	r1, #0
 8000338:	0018      	movs	r0, r3
 800033a:	f001 fe1f 	bl	8001f7c <HAL_I2CEx_ConfigDigitalFilter>
 800033e:	1e03      	subs	r3, r0, #0
 8000340:	d001      	beq.n	8000346 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000342:	f000 f94b 	bl	80005dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000346:	46c0      	nop			@ (mov r8, r8)
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}
 800034c:	20000098 	.word	0x20000098
 8000350:	40005400 	.word	0x40005400
 8000354:	2010091a 	.word	0x2010091a

08000358 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000358:	b590      	push	{r4, r7, lr}
 800035a:	b091      	sub	sp, #68	@ 0x44
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000360:	232c      	movs	r3, #44	@ 0x2c
 8000362:	18fb      	adds	r3, r7, r3
 8000364:	0018      	movs	r0, r3
 8000366:	2314      	movs	r3, #20
 8000368:	001a      	movs	r2, r3
 800036a:	2100      	movs	r1, #0
 800036c:	f004 fb54 	bl	8004a18 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000370:	2410      	movs	r4, #16
 8000372:	193b      	adds	r3, r7, r4
 8000374:	0018      	movs	r0, r3
 8000376:	231c      	movs	r3, #28
 8000378:	001a      	movs	r2, r3
 800037a:	2100      	movs	r1, #0
 800037c:	f004 fb4c 	bl	8004a18 <memset>
  if(i2cHandle->Instance==I2C1)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a26      	ldr	r2, [pc, #152]	@ (8000420 <HAL_I2C_MspInit+0xc8>)
 8000386:	4293      	cmp	r3, r2
 8000388:	d146      	bne.n	8000418 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800038a:	193b      	adds	r3, r7, r4
 800038c:	2240      	movs	r2, #64	@ 0x40
 800038e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000390:	193b      	adds	r3, r7, r4
 8000392:	2200      	movs	r2, #0
 8000394:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000396:	193b      	adds	r3, r7, r4
 8000398:	0018      	movs	r0, r3
 800039a:	f002 f98b 	bl	80026b4 <HAL_RCCEx_PeriphCLKConfig>
 800039e:	1e03      	subs	r3, r0, #0
 80003a0:	d001      	beq.n	80003a6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80003a2:	f000 f91b 	bl	80005dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000424 <HAL_I2C_MspInit+0xcc>)
 80003a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80003aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000424 <HAL_I2C_MspInit+0xcc>)
 80003ac:	2102      	movs	r1, #2
 80003ae:	430a      	orrs	r2, r1
 80003b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80003b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000424 <HAL_I2C_MspInit+0xcc>)
 80003b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80003b6:	2202      	movs	r2, #2
 80003b8:	4013      	ands	r3, r2
 80003ba:	60fb      	str	r3, [r7, #12]
 80003bc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80003be:	212c      	movs	r1, #44	@ 0x2c
 80003c0:	187b      	adds	r3, r7, r1
 80003c2:	22c0      	movs	r2, #192	@ 0xc0
 80003c4:	0092      	lsls	r2, r2, #2
 80003c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003c8:	187b      	adds	r3, r7, r1
 80003ca:	2212      	movs	r2, #18
 80003cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ce:	187b      	adds	r3, r7, r1
 80003d0:	2200      	movs	r2, #0
 80003d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d4:	187b      	adds	r3, r7, r1
 80003d6:	2200      	movs	r2, #0
 80003d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80003da:	187b      	adds	r3, r7, r1
 80003dc:	2206      	movs	r2, #6
 80003de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003e0:	187b      	adds	r3, r7, r1
 80003e2:	4a11      	ldr	r2, [pc, #68]	@ (8000428 <HAL_I2C_MspInit+0xd0>)
 80003e4:	0019      	movs	r1, r3
 80003e6:	0010      	movs	r0, r2
 80003e8:	f000 fd20 	bl	8000e2c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80003ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000424 <HAL_I2C_MspInit+0xcc>)
 80003ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80003f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000424 <HAL_I2C_MspInit+0xcc>)
 80003f2:	2180      	movs	r1, #128	@ 0x80
 80003f4:	0389      	lsls	r1, r1, #14
 80003f6:	430a      	orrs	r2, r1
 80003f8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80003fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000424 <HAL_I2C_MspInit+0xcc>)
 80003fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80003fe:	2380      	movs	r3, #128	@ 0x80
 8000400:	039b      	lsls	r3, r3, #14
 8000402:	4013      	ands	r3, r2
 8000404:	60bb      	str	r3, [r7, #8]
 8000406:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000408:	2200      	movs	r2, #0
 800040a:	2100      	movs	r1, #0
 800040c:	2017      	movs	r0, #23
 800040e:	f000 fbf3 	bl	8000bf8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8000412:	2017      	movs	r0, #23
 8000414:	f000 fc05 	bl	8000c22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000418:	46c0      	nop			@ (mov r8, r8)
 800041a:	46bd      	mov	sp, r7
 800041c:	b011      	add	sp, #68	@ 0x44
 800041e:	bd90      	pop	{r4, r7, pc}
 8000420:	40005400 	.word	0x40005400
 8000424:	40021000 	.word	0x40021000
 8000428:	50000400 	.word	0x50000400

0800042c <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000434:	4b05      	ldr	r3, [pc, #20]	@ (800044c <__io_putchar+0x20>)
 8000436:	1d39      	adds	r1, r7, #4
 8000438:	4805      	ldr	r0, [pc, #20]	@ (8000450 <__io_putchar+0x24>)
 800043a:	2201      	movs	r2, #1
 800043c:	f002 fa7e 	bl	800293c <HAL_UART_Transmit>

  return ch;
 8000440:	687b      	ldr	r3, [r7, #4]
}
 8000442:	0018      	movs	r0, r3
 8000444:	46bd      	mov	sp, r7
 8000446:	b002      	add	sp, #8
 8000448:	bd80      	pop	{r7, pc}
 800044a:	46c0      	nop			@ (mov r8, r8)
 800044c:	0000ffff 	.word	0x0000ffff
 8000450:	200001f4 	.word	0x200001f4

08000454 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800045a:	f000 fa80 	bl	800095e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800045e:	f000 f82f 	bl	80004c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000462:	f7ff fedd 	bl	8000220 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000466:	f000 f9c9 	bl	80007fc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800046a:	f7ff ff35 	bl	80002d8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  // 接收中断函数
  HAL_UART_Receive_IT(&huart2, (uint8_t *)&aRxBuffer, 1);
 800046e:	4910      	ldr	r1, [pc, #64]	@ (80004b0 <main+0x5c>)
 8000470:	4b10      	ldr	r3, [pc, #64]	@ (80004b4 <main+0x60>)
 8000472:	2201      	movs	r2, #1
 8000474:	0018      	movs	r0, r3
 8000476:	f002 fb05 	bl	8002a84 <HAL_UART_Receive_IT>
  uint32_t i = 0;
 800047a:	2300      	movs	r3, #0
 800047c:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    i++;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	3301      	adds	r3, #1
 8000482:	607b      	str	r3, [r7, #4]
    if (i > 5000)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	4a0c      	ldr	r2, [pc, #48]	@ (80004b8 <main+0x64>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d901      	bls.n	8000490 <main+0x3c>
    {


     // HAL_UART_Transmit(&huart2, "ok\r\n", strlen("ok\r\n"), 0xFFFF);
      i = 0;
 800048c:	2300      	movs	r3, #0
 800048e:	607b      	str	r3, [r7, #4]
    }
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000490:	23a0      	movs	r3, #160	@ 0xa0
 8000492:	05db      	lsls	r3, r3, #23
 8000494:	2120      	movs	r1, #32
 8000496:	0018      	movs	r0, r3
 8000498:	f000 fe57 	bl	800114a <HAL_GPIO_TogglePin>
printf("hello world! \n");
 800049c:	4b07      	ldr	r3, [pc, #28]	@ (80004bc <main+0x68>)
 800049e:	0018      	movs	r0, r3
 80004a0:	f004 f9c4 	bl	800482c <puts>
    // HAL_Delay(200);
    //  HAL_UART_Transmit(&huart2, "ok\r\n", strlen("ok\r\n"), 0xFFFF);
HAL_Delay(2000); // 中文显示
 80004a4:	23fa      	movs	r3, #250	@ 0xfa
 80004a6:	00db      	lsls	r3, r3, #3
 80004a8:	0018      	movs	r0, r3
 80004aa:	f000 fad5 	bl	8000a58 <HAL_Delay>
    i++;
 80004ae:	e7e6      	b.n	800047e <main+0x2a>
 80004b0:	200000ed 	.word	0x200000ed
 80004b4:	200001f4 	.word	0x200001f4
 80004b8:	00001388 	.word	0x00001388
 80004bc:	08004fd8 	.word	0x08004fd8

080004c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c0:	b590      	push	{r4, r7, lr}
 80004c2:	b08d      	sub	sp, #52	@ 0x34
 80004c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004c6:	2414      	movs	r4, #20
 80004c8:	193b      	adds	r3, r7, r4
 80004ca:	0018      	movs	r0, r3
 80004cc:	231c      	movs	r3, #28
 80004ce:	001a      	movs	r2, r3
 80004d0:	2100      	movs	r1, #0
 80004d2:	f004 faa1 	bl	8004a18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d6:	003b      	movs	r3, r7
 80004d8:	0018      	movs	r0, r3
 80004da:	2314      	movs	r3, #20
 80004dc:	001a      	movs	r2, r3
 80004de:	2100      	movs	r1, #0
 80004e0:	f004 fa9a 	bl	8004a18 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004e4:	193b      	adds	r3, r7, r4
 80004e6:	2201      	movs	r2, #1
 80004e8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004ea:	193b      	adds	r3, r7, r4
 80004ec:	2280      	movs	r2, #128	@ 0x80
 80004ee:	0252      	lsls	r2, r2, #9
 80004f0:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004f2:	193b      	adds	r3, r7, r4
 80004f4:	0018      	movs	r0, r3
 80004f6:	f001 fd8d 	bl	8002014 <HAL_RCC_OscConfig>
 80004fa:	1e03      	subs	r3, r0, #0
 80004fc:	d001      	beq.n	8000502 <SystemClock_Config+0x42>
  {
    Error_Handler();
 80004fe:	f000 f86d 	bl	80005dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000502:	003b      	movs	r3, r7
 8000504:	2207      	movs	r2, #7
 8000506:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000508:	003b      	movs	r3, r7
 800050a:	2201      	movs	r2, #1
 800050c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800050e:	003b      	movs	r3, r7
 8000510:	2200      	movs	r2, #0
 8000512:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000514:	003b      	movs	r3, r7
 8000516:	2200      	movs	r2, #0
 8000518:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800051a:	003b      	movs	r3, r7
 800051c:	2200      	movs	r2, #0
 800051e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000520:	003b      	movs	r3, r7
 8000522:	2101      	movs	r1, #1
 8000524:	0018      	movs	r0, r3
 8000526:	f001 ff59 	bl	80023dc <HAL_RCC_ClockConfig>
 800052a:	1e03      	subs	r3, r0, #0
 800052c:	d001      	beq.n	8000532 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800052e:	f000 f855 	bl	80005dc <Error_Handler>
  }
}
 8000532:	46c0      	nop			@ (mov r8, r8)
 8000534:	46bd      	mov	sp, r7
 8000536:	b00d      	add	sp, #52	@ 0x34
 8000538:	bd90      	pop	{r4, r7, pc}
	...

0800053c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  static uint8_t i = 0;
  static uint8_t cnt = 0;
  if (USART2_RX_CNT >= 255) // 溢出判断
 8000544:	4b1f      	ldr	r3, [pc, #124]	@ (80005c4 <HAL_UART_RxCpltCallback+0x88>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2bff      	cmp	r3, #255	@ 0xff
 800054a:	d110      	bne.n	800056e <HAL_UART_RxCpltCallback+0x32>
  {
    USART2_RX_CNT = 0;
 800054c:	4b1d      	ldr	r3, [pc, #116]	@ (80005c4 <HAL_UART_RxCpltCallback+0x88>)
 800054e:	2200      	movs	r2, #0
 8000550:	701a      	strb	r2, [r3, #0]
    memset(USART2_RX_BUF, 0x00, sizeof(USART2_RX_BUF));
 8000552:	2380      	movs	r3, #128	@ 0x80
 8000554:	005a      	lsls	r2, r3, #1
 8000556:	4b1c      	ldr	r3, [pc, #112]	@ (80005c8 <HAL_UART_RxCpltCallback+0x8c>)
 8000558:	2100      	movs	r1, #0
 800055a:	0018      	movs	r0, r3
 800055c:	f004 fa5c 	bl	8004a18 <memset>
    HAL_UART_Transmit(&huart2, (uint8_t *)&cAlmStr, sizeof(cAlmStr), 0xFFFF);
 8000560:	4b1a      	ldr	r3, [pc, #104]	@ (80005cc <HAL_UART_RxCpltCallback+0x90>)
 8000562:	491b      	ldr	r1, [pc, #108]	@ (80005d0 <HAL_UART_RxCpltCallback+0x94>)
 8000564:	481b      	ldr	r0, [pc, #108]	@ (80005d4 <HAL_UART_RxCpltCallback+0x98>)
 8000566:	2213      	movs	r2, #19
 8000568:	f002 f9e8 	bl	800293c <HAL_UART_Transmit>
 800056c:	e020      	b.n	80005b0 <HAL_UART_RxCpltCallback+0x74>
  }
  else
  {
    USART2_RX_BUF[USART2_RX_CNT++] = aRxBuffer; // 接收数据转存
 800056e:	4b15      	ldr	r3, [pc, #84]	@ (80005c4 <HAL_UART_RxCpltCallback+0x88>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	1c5a      	adds	r2, r3, #1
 8000574:	b2d1      	uxtb	r1, r2
 8000576:	4a13      	ldr	r2, [pc, #76]	@ (80005c4 <HAL_UART_RxCpltCallback+0x88>)
 8000578:	7011      	strb	r1, [r2, #0]
 800057a:	001a      	movs	r2, r3
 800057c:	4b16      	ldr	r3, [pc, #88]	@ (80005d8 <HAL_UART_RxCpltCallback+0x9c>)
 800057e:	7819      	ldrb	r1, [r3, #0]
 8000580:	4b11      	ldr	r3, [pc, #68]	@ (80005c8 <HAL_UART_RxCpltCallback+0x8c>)
 8000582:	5499      	strb	r1, [r3, r2]
    // if ((USART2_RX_BUF[USART2_RX_CNT - 1] == 0x0A) || (USART2_RX_BUF[USART2_RX_CNT - 2] == 0x0D)) // 判断
    if (USART2_RX_CNT > 10)
 8000584:	4b0f      	ldr	r3, [pc, #60]	@ (80005c4 <HAL_UART_RxCpltCallback+0x88>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b0a      	cmp	r3, #10
 800058a:	d911      	bls.n	80005b0 <HAL_UART_RxCpltCallback+0x74>
    {
      HAL_UART_Transmit(&huart2, (uint8_t *)&USART2_RX_BUF, USART2_RX_CNT, 0xFFFF); // 将收到的
 800058c:	4b0d      	ldr	r3, [pc, #52]	@ (80005c4 <HAL_UART_RxCpltCallback+0x88>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	001a      	movs	r2, r3
 8000592:	4b0e      	ldr	r3, [pc, #56]	@ (80005cc <HAL_UART_RxCpltCallback+0x90>)
 8000594:	490c      	ldr	r1, [pc, #48]	@ (80005c8 <HAL_UART_RxCpltCallback+0x8c>)
 8000596:	480f      	ldr	r0, [pc, #60]	@ (80005d4 <HAL_UART_RxCpltCallback+0x98>)
 8000598:	f002 f9d0 	bl	800293c <HAL_UART_Transmit>
      USART2_RX_CNT = 0;
 800059c:	4b09      	ldr	r3, [pc, #36]	@ (80005c4 <HAL_UART_RxCpltCallback+0x88>)
 800059e:	2200      	movs	r2, #0
 80005a0:	701a      	strb	r2, [r3, #0]
      memset(USART2_RX_BUF, 0x00, sizeof(USART2_RX_BUF)); // 清空数组
 80005a2:	2380      	movs	r3, #128	@ 0x80
 80005a4:	005a      	lsls	r2, r3, #1
 80005a6:	4b08      	ldr	r3, [pc, #32]	@ (80005c8 <HAL_UART_RxCpltCallback+0x8c>)
 80005a8:	2100      	movs	r1, #0
 80005aa:	0018      	movs	r0, r3
 80005ac:	f004 fa34 	bl	8004a18 <memset>
    }
  }
  HAL_UART_Receive_IT(&huart2, (uint8_t *)&aRxBuffer, 1); // 再开启接收中断
 80005b0:	4909      	ldr	r1, [pc, #36]	@ (80005d8 <HAL_UART_RxCpltCallback+0x9c>)
 80005b2:	4b08      	ldr	r3, [pc, #32]	@ (80005d4 <HAL_UART_RxCpltCallback+0x98>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	0018      	movs	r0, r3
 80005b8:	f002 fa64 	bl	8002a84 <HAL_UART_Receive_IT>
}
 80005bc:	46c0      	nop			@ (mov r8, r8)
 80005be:	46bd      	mov	sp, r7
 80005c0:	b002      	add	sp, #8
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	200000ec 	.word	0x200000ec
 80005c8:	200000f0 	.word	0x200000f0
 80005cc:	0000ffff 	.word	0x0000ffff
 80005d0:	20000000 	.word	0x20000000
 80005d4:	200001f4 	.word	0x200001f4
 80005d8:	200000ed 	.word	0x200000ed

080005dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e0:	b672      	cpsid	i
}
 80005e2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005e4:	46c0      	nop			@ (mov r8, r8)
 80005e6:	e7fd      	b.n	80005e4 <Error_Handler+0x8>

080005e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ee:	4b0f      	ldr	r3, [pc, #60]	@ (800062c <HAL_MspInit+0x44>)
 80005f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80005f2:	4b0e      	ldr	r3, [pc, #56]	@ (800062c <HAL_MspInit+0x44>)
 80005f4:	2101      	movs	r1, #1
 80005f6:	430a      	orrs	r2, r1
 80005f8:	641a      	str	r2, [r3, #64]	@ 0x40
 80005fa:	4b0c      	ldr	r3, [pc, #48]	@ (800062c <HAL_MspInit+0x44>)
 80005fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005fe:	2201      	movs	r2, #1
 8000600:	4013      	ands	r3, r2
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000606:	4b09      	ldr	r3, [pc, #36]	@ (800062c <HAL_MspInit+0x44>)
 8000608:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800060a:	4b08      	ldr	r3, [pc, #32]	@ (800062c <HAL_MspInit+0x44>)
 800060c:	2180      	movs	r1, #128	@ 0x80
 800060e:	0549      	lsls	r1, r1, #21
 8000610:	430a      	orrs	r2, r1
 8000612:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000614:	4b05      	ldr	r3, [pc, #20]	@ (800062c <HAL_MspInit+0x44>)
 8000616:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000618:	2380      	movs	r3, #128	@ 0x80
 800061a:	055b      	lsls	r3, r3, #21
 800061c:	4013      	ands	r3, r2
 800061e:	603b      	str	r3, [r7, #0]
 8000620:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000622:	46c0      	nop			@ (mov r8, r8)
 8000624:	46bd      	mov	sp, r7
 8000626:	b002      	add	sp, #8
 8000628:	bd80      	pop	{r7, pc}
 800062a:	46c0      	nop			@ (mov r8, r8)
 800062c:	40021000 	.word	0x40021000

08000630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000634:	46c0      	nop			@ (mov r8, r8)
 8000636:	e7fd      	b.n	8000634 <NMI_Handler+0x4>

08000638 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800063c:	46c0      	nop			@ (mov r8, r8)
 800063e:	e7fd      	b.n	800063c <HardFault_Handler+0x4>

08000640 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000644:	46c0      	nop			@ (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800064e:	46c0      	nop			@ (mov r8, r8)
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000658:	f000 f9e2 	bl	8000a20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800065c:	46c0      	nop			@ (mov r8, r8)
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
	...

08000664 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 interrupt (combined with EXTI 23).
  */
void I2C1_IRQHandler(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8000668:	4b09      	ldr	r3, [pc, #36]	@ (8000690 <I2C1_IRQHandler+0x2c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	699a      	ldr	r2, [r3, #24]
 800066e:	23e0      	movs	r3, #224	@ 0xe0
 8000670:	00db      	lsls	r3, r3, #3
 8000672:	4013      	ands	r3, r2
 8000674:	d004      	beq.n	8000680 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8000676:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <I2C1_IRQHandler+0x2c>)
 8000678:	0018      	movs	r0, r3
 800067a:	f000 fe41 	bl	8001300 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800067e:	e003      	b.n	8000688 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8000680:	4b03      	ldr	r3, [pc, #12]	@ (8000690 <I2C1_IRQHandler+0x2c>)
 8000682:	0018      	movs	r0, r3
 8000684:	f000 fe22 	bl	80012cc <HAL_I2C_EV_IRQHandler>
}
 8000688:	46c0      	nop			@ (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	46c0      	nop			@ (mov r8, r8)
 8000690:	20000098 	.word	0x20000098

08000694 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 interrupt.
  */
void USART2_IRQHandler(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000698:	4b03      	ldr	r3, [pc, #12]	@ (80006a8 <USART2_IRQHandler+0x14>)
 800069a:	0018      	movs	r0, r3
 800069c:	f002 fa4a 	bl	8002b34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80006a0:	46c0      	nop			@ (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	46c0      	nop			@ (mov r8, r8)
 80006a8:	200001f4 	.word	0x200001f4

080006ac <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
 80006bc:	e00a      	b.n	80006d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006be:	e000      	b.n	80006c2 <_read+0x16>
 80006c0:	bf00      	nop
 80006c2:	0001      	movs	r1, r0
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	1c5a      	adds	r2, r3, #1
 80006c8:	60ba      	str	r2, [r7, #8]
 80006ca:	b2ca      	uxtb	r2, r1
 80006cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	3301      	adds	r3, #1
 80006d2:	617b      	str	r3, [r7, #20]
 80006d4:	697a      	ldr	r2, [r7, #20]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	429a      	cmp	r2, r3
 80006da:	dbf0      	blt.n	80006be <_read+0x12>
  }

  return len;
 80006dc:	687b      	ldr	r3, [r7, #4]
}
 80006de:	0018      	movs	r0, r3
 80006e0:	46bd      	mov	sp, r7
 80006e2:	b006      	add	sp, #24
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006e6:	b580      	push	{r7, lr}
 80006e8:	b086      	sub	sp, #24
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	60f8      	str	r0, [r7, #12]
 80006ee:	60b9      	str	r1, [r7, #8]
 80006f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
 80006f6:	e009      	b.n	800070c <_write+0x26>
  {
    __io_putchar(*ptr++);
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	1c5a      	adds	r2, r3, #1
 80006fc:	60ba      	str	r2, [r7, #8]
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	0018      	movs	r0, r3
 8000702:	f7ff fe93 	bl	800042c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	3301      	adds	r3, #1
 800070a:	617b      	str	r3, [r7, #20]
 800070c:	697a      	ldr	r2, [r7, #20]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	429a      	cmp	r2, r3
 8000712:	dbf1      	blt.n	80006f8 <_write+0x12>
  }
  return len;
 8000714:	687b      	ldr	r3, [r7, #4]
}
 8000716:	0018      	movs	r0, r3
 8000718:	46bd      	mov	sp, r7
 800071a:	b006      	add	sp, #24
 800071c:	bd80      	pop	{r7, pc}

0800071e <_close>:

int _close(int file)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	b082      	sub	sp, #8
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000726:	2301      	movs	r3, #1
 8000728:	425b      	negs	r3, r3
}
 800072a:	0018      	movs	r0, r3
 800072c:	46bd      	mov	sp, r7
 800072e:	b002      	add	sp, #8
 8000730:	bd80      	pop	{r7, pc}

08000732 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	b082      	sub	sp, #8
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
 800073a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	2280      	movs	r2, #128	@ 0x80
 8000740:	0192      	lsls	r2, r2, #6
 8000742:	605a      	str	r2, [r3, #4]
  return 0;
 8000744:	2300      	movs	r3, #0
}
 8000746:	0018      	movs	r0, r3
 8000748:	46bd      	mov	sp, r7
 800074a:	b002      	add	sp, #8
 800074c:	bd80      	pop	{r7, pc}

0800074e <_isatty>:

int _isatty(int file)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b082      	sub	sp, #8
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000756:	2301      	movs	r3, #1
}
 8000758:	0018      	movs	r0, r3
 800075a:	46bd      	mov	sp, r7
 800075c:	b002      	add	sp, #8
 800075e:	bd80      	pop	{r7, pc}

08000760 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	60b9      	str	r1, [r7, #8]
 800076a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800076c:	2300      	movs	r3, #0
}
 800076e:	0018      	movs	r0, r3
 8000770:	46bd      	mov	sp, r7
 8000772:	b004      	add	sp, #16
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000780:	4a14      	ldr	r2, [pc, #80]	@ (80007d4 <_sbrk+0x5c>)
 8000782:	4b15      	ldr	r3, [pc, #84]	@ (80007d8 <_sbrk+0x60>)
 8000784:	1ad3      	subs	r3, r2, r3
 8000786:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800078c:	4b13      	ldr	r3, [pc, #76]	@ (80007dc <_sbrk+0x64>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d102      	bne.n	800079a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000794:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <_sbrk+0x64>)
 8000796:	4a12      	ldr	r2, [pc, #72]	@ (80007e0 <_sbrk+0x68>)
 8000798:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800079a:	4b10      	ldr	r3, [pc, #64]	@ (80007dc <_sbrk+0x64>)
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	18d3      	adds	r3, r2, r3
 80007a2:	693a      	ldr	r2, [r7, #16]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d207      	bcs.n	80007b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007a8:	f004 f98c 	bl	8004ac4 <__errno>
 80007ac:	0003      	movs	r3, r0
 80007ae:	220c      	movs	r2, #12
 80007b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007b2:	2301      	movs	r3, #1
 80007b4:	425b      	negs	r3, r3
 80007b6:	e009      	b.n	80007cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007b8:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <_sbrk+0x64>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007be:	4b07      	ldr	r3, [pc, #28]	@ (80007dc <_sbrk+0x64>)
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	18d2      	adds	r2, r2, r3
 80007c6:	4b05      	ldr	r3, [pc, #20]	@ (80007dc <_sbrk+0x64>)
 80007c8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80007ca:	68fb      	ldr	r3, [r7, #12]
}
 80007cc:	0018      	movs	r0, r3
 80007ce:	46bd      	mov	sp, r7
 80007d0:	b006      	add	sp, #24
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20003000 	.word	0x20003000
 80007d8:	00001000 	.word	0x00001000
 80007dc:	200001f0 	.word	0x200001f0
 80007e0:	200003d8 	.word	0x200003d8

080007e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007e8:	4b03      	ldr	r3, [pc, #12]	@ (80007f8 <SystemInit+0x14>)
 80007ea:	2280      	movs	r2, #128	@ 0x80
 80007ec:	0512      	lsls	r2, r2, #20
 80007ee:	609a      	str	r2, [r3, #8]
#endif
}
 80007f0:	46c0      	nop			@ (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	46c0      	nop			@ (mov r8, r8)
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000800:	4b17      	ldr	r3, [pc, #92]	@ (8000860 <MX_USART2_UART_Init+0x64>)
 8000802:	4a18      	ldr	r2, [pc, #96]	@ (8000864 <MX_USART2_UART_Init+0x68>)
 8000804:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000806:	4b16      	ldr	r3, [pc, #88]	@ (8000860 <MX_USART2_UART_Init+0x64>)
 8000808:	22e1      	movs	r2, #225	@ 0xe1
 800080a:	0252      	lsls	r2, r2, #9
 800080c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800080e:	4b14      	ldr	r3, [pc, #80]	@ (8000860 <MX_USART2_UART_Init+0x64>)
 8000810:	2280      	movs	r2, #128	@ 0x80
 8000812:	0152      	lsls	r2, r2, #5
 8000814:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000816:	4b12      	ldr	r3, [pc, #72]	@ (8000860 <MX_USART2_UART_Init+0x64>)
 8000818:	2200      	movs	r2, #0
 800081a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800081c:	4b10      	ldr	r3, [pc, #64]	@ (8000860 <MX_USART2_UART_Init+0x64>)
 800081e:	2280      	movs	r2, #128	@ 0x80
 8000820:	00d2      	lsls	r2, r2, #3
 8000822:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000824:	4b0e      	ldr	r3, [pc, #56]	@ (8000860 <MX_USART2_UART_Init+0x64>)
 8000826:	220c      	movs	r2, #12
 8000828:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082a:	4b0d      	ldr	r3, [pc, #52]	@ (8000860 <MX_USART2_UART_Init+0x64>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000830:	4b0b      	ldr	r3, [pc, #44]	@ (8000860 <MX_USART2_UART_Init+0x64>)
 8000832:	2200      	movs	r2, #0
 8000834:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000836:	4b0a      	ldr	r3, [pc, #40]	@ (8000860 <MX_USART2_UART_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800083c:	4b08      	ldr	r3, [pc, #32]	@ (8000860 <MX_USART2_UART_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000842:	4b07      	ldr	r3, [pc, #28]	@ (8000860 <MX_USART2_UART_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000848:	4b05      	ldr	r3, [pc, #20]	@ (8000860 <MX_USART2_UART_Init+0x64>)
 800084a:	0018      	movs	r0, r3
 800084c:	f002 f820 	bl	8002890 <HAL_UART_Init>
 8000850:	1e03      	subs	r3, r0, #0
 8000852:	d001      	beq.n	8000858 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8000854:	f7ff fec2 	bl	80005dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000858:	46c0      	nop			@ (mov r8, r8)
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	46c0      	nop			@ (mov r8, r8)
 8000860:	200001f4 	.word	0x200001f4
 8000864:	40004400 	.word	0x40004400

08000868 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000868:	b590      	push	{r4, r7, lr}
 800086a:	b08b      	sub	sp, #44	@ 0x2c
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	2414      	movs	r4, #20
 8000872:	193b      	adds	r3, r7, r4
 8000874:	0018      	movs	r0, r3
 8000876:	2314      	movs	r3, #20
 8000878:	001a      	movs	r2, r3
 800087a:	2100      	movs	r1, #0
 800087c:	f004 f8cc 	bl	8004a18 <memset>
  if(uartHandle->Instance==USART2)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a1f      	ldr	r2, [pc, #124]	@ (8000904 <HAL_UART_MspInit+0x9c>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d138      	bne.n	80008fc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800088a:	4b1f      	ldr	r3, [pc, #124]	@ (8000908 <HAL_UART_MspInit+0xa0>)
 800088c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800088e:	4b1e      	ldr	r3, [pc, #120]	@ (8000908 <HAL_UART_MspInit+0xa0>)
 8000890:	2180      	movs	r1, #128	@ 0x80
 8000892:	0289      	lsls	r1, r1, #10
 8000894:	430a      	orrs	r2, r1
 8000896:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000898:	4b1b      	ldr	r3, [pc, #108]	@ (8000908 <HAL_UART_MspInit+0xa0>)
 800089a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800089c:	2380      	movs	r3, #128	@ 0x80
 800089e:	029b      	lsls	r3, r3, #10
 80008a0:	4013      	ands	r3, r2
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	4b18      	ldr	r3, [pc, #96]	@ (8000908 <HAL_UART_MspInit+0xa0>)
 80008a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008aa:	4b17      	ldr	r3, [pc, #92]	@ (8000908 <HAL_UART_MspInit+0xa0>)
 80008ac:	2101      	movs	r1, #1
 80008ae:	430a      	orrs	r2, r1
 80008b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80008b2:	4b15      	ldr	r3, [pc, #84]	@ (8000908 <HAL_UART_MspInit+0xa0>)
 80008b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008b6:	2201      	movs	r2, #1
 80008b8:	4013      	ands	r3, r2
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008be:	0021      	movs	r1, r4
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	220c      	movs	r2, #12
 80008c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	2202      	movs	r2, #2
 80008ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	2200      	movs	r2, #0
 80008d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	2201      	movs	r2, #1
 80008dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008de:	187a      	adds	r2, r7, r1
 80008e0:	23a0      	movs	r3, #160	@ 0xa0
 80008e2:	05db      	lsls	r3, r3, #23
 80008e4:	0011      	movs	r1, r2
 80008e6:	0018      	movs	r0, r3
 80008e8:	f000 faa0 	bl	8000e2c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2100      	movs	r1, #0
 80008f0:	201c      	movs	r0, #28
 80008f2:	f000 f981 	bl	8000bf8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008f6:	201c      	movs	r0, #28
 80008f8:	f000 f993 	bl	8000c22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80008fc:	46c0      	nop			@ (mov r8, r8)
 80008fe:	46bd      	mov	sp, r7
 8000900:	b00b      	add	sp, #44	@ 0x2c
 8000902:	bd90      	pop	{r4, r7, pc}
 8000904:	40004400 	.word	0x40004400
 8000908:	40021000 	.word	0x40021000

0800090c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800090c:	480d      	ldr	r0, [pc, #52]	@ (8000944 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800090e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000910:	f7ff ff68 	bl	80007e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000914:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000916:	e003      	b.n	8000920 <LoopCopyDataInit>

08000918 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000918:	4b0b      	ldr	r3, [pc, #44]	@ (8000948 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800091a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800091c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800091e:	3104      	adds	r1, #4

08000920 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000920:	480a      	ldr	r0, [pc, #40]	@ (800094c <LoopForever+0xa>)
  ldr r3, =_edata
 8000922:	4b0b      	ldr	r3, [pc, #44]	@ (8000950 <LoopForever+0xe>)
  adds r2, r0, r1
 8000924:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000926:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000928:	d3f6      	bcc.n	8000918 <CopyDataInit>
  ldr r2, =_sbss
 800092a:	4a0a      	ldr	r2, [pc, #40]	@ (8000954 <LoopForever+0x12>)
  b LoopFillZerobss
 800092c:	e002      	b.n	8000934 <LoopFillZerobss>

0800092e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800092e:	2300      	movs	r3, #0
  str  r3, [r2]
 8000930:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000932:	3204      	adds	r2, #4

08000934 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000934:	4b08      	ldr	r3, [pc, #32]	@ (8000958 <LoopForever+0x16>)
  cmp r2, r3
 8000936:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000938:	d3f9      	bcc.n	800092e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800093a:	f004 f8c9 	bl	8004ad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800093e:	f7ff fd89 	bl	8000454 <main>

08000942 <LoopForever>:

LoopForever:
    b LoopForever
 8000942:	e7fe      	b.n	8000942 <LoopForever>
  ldr   r0, =_estack
 8000944:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000948:	08005068 	.word	0x08005068
  ldr r0, =_sdata
 800094c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000950:	2000007c 	.word	0x2000007c
  ldr r2, =_sbss
 8000954:	2000007c 	.word	0x2000007c
  ldr r3, = _ebss
 8000958:	200003d8 	.word	0x200003d8

0800095c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800095c:	e7fe      	b.n	800095c <ADC1_IRQHandler>

0800095e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b082      	sub	sp, #8
 8000962:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000964:	1dfb      	adds	r3, r7, #7
 8000966:	2200      	movs	r2, #0
 8000968:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800096a:	2003      	movs	r0, #3
 800096c:	f000 f80e 	bl	800098c <HAL_InitTick>
 8000970:	1e03      	subs	r3, r0, #0
 8000972:	d003      	beq.n	800097c <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000974:	1dfb      	adds	r3, r7, #7
 8000976:	2201      	movs	r2, #1
 8000978:	701a      	strb	r2, [r3, #0]
 800097a:	e001      	b.n	8000980 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800097c:	f7ff fe34 	bl	80005e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000980:	1dfb      	adds	r3, r7, #7
 8000982:	781b      	ldrb	r3, [r3, #0]
}
 8000984:	0018      	movs	r0, r3
 8000986:	46bd      	mov	sp, r7
 8000988:	b002      	add	sp, #8
 800098a:	bd80      	pop	{r7, pc}

0800098c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800098c:	b590      	push	{r4, r7, lr}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000994:	230f      	movs	r3, #15
 8000996:	18fb      	adds	r3, r7, r3
 8000998:	2200      	movs	r2, #0
 800099a:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 800099c:	4b1d      	ldr	r3, [pc, #116]	@ (8000a14 <HAL_InitTick+0x88>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d02b      	beq.n	80009fc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 80009a4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a18 <HAL_InitTick+0x8c>)
 80009a6:	681c      	ldr	r4, [r3, #0]
 80009a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a14 <HAL_InitTick+0x88>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	0019      	movs	r1, r3
 80009ae:	23fa      	movs	r3, #250	@ 0xfa
 80009b0:	0098      	lsls	r0, r3, #2
 80009b2:	f7ff fba9 	bl	8000108 <__udivsi3>
 80009b6:	0003      	movs	r3, r0
 80009b8:	0019      	movs	r1, r3
 80009ba:	0020      	movs	r0, r4
 80009bc:	f7ff fba4 	bl	8000108 <__udivsi3>
 80009c0:	0003      	movs	r3, r0
 80009c2:	0018      	movs	r0, r3
 80009c4:	f000 f93d 	bl	8000c42 <HAL_SYSTICK_Config>
 80009c8:	1e03      	subs	r3, r0, #0
 80009ca:	d112      	bne.n	80009f2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2b03      	cmp	r3, #3
 80009d0:	d80a      	bhi.n	80009e8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d2:	6879      	ldr	r1, [r7, #4]
 80009d4:	2301      	movs	r3, #1
 80009d6:	425b      	negs	r3, r3
 80009d8:	2200      	movs	r2, #0
 80009da:	0018      	movs	r0, r3
 80009dc:	f000 f90c 	bl	8000bf8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009e0:	4b0e      	ldr	r3, [pc, #56]	@ (8000a1c <HAL_InitTick+0x90>)
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	e00d      	b.n	8000a04 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80009e8:	230f      	movs	r3, #15
 80009ea:	18fb      	adds	r3, r7, r3
 80009ec:	2201      	movs	r2, #1
 80009ee:	701a      	strb	r2, [r3, #0]
 80009f0:	e008      	b.n	8000a04 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009f2:	230f      	movs	r3, #15
 80009f4:	18fb      	adds	r3, r7, r3
 80009f6:	2201      	movs	r2, #1
 80009f8:	701a      	strb	r2, [r3, #0]
 80009fa:	e003      	b.n	8000a04 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009fc:	230f      	movs	r3, #15
 80009fe:	18fb      	adds	r3, r7, r3
 8000a00:	2201      	movs	r2, #1
 8000a02:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000a04:	230f      	movs	r3, #15
 8000a06:	18fb      	adds	r3, r7, r3
 8000a08:	781b      	ldrb	r3, [r3, #0]
}
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	b005      	add	sp, #20
 8000a10:	bd90      	pop	{r4, r7, pc}
 8000a12:	46c0      	nop			@ (mov r8, r8)
 8000a14:	2000001c 	.word	0x2000001c
 8000a18:	20000014 	.word	0x20000014
 8000a1c:	20000018 	.word	0x20000018

08000a20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a24:	4b05      	ldr	r3, [pc, #20]	@ (8000a3c <HAL_IncTick+0x1c>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	001a      	movs	r2, r3
 8000a2a:	4b05      	ldr	r3, [pc, #20]	@ (8000a40 <HAL_IncTick+0x20>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	18d2      	adds	r2, r2, r3
 8000a30:	4b03      	ldr	r3, [pc, #12]	@ (8000a40 <HAL_IncTick+0x20>)
 8000a32:	601a      	str	r2, [r3, #0]
}
 8000a34:	46c0      	nop			@ (mov r8, r8)
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	46c0      	nop			@ (mov r8, r8)
 8000a3c:	2000001c 	.word	0x2000001c
 8000a40:	20000288 	.word	0x20000288

08000a44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  return uwTick;
 8000a48:	4b02      	ldr	r3, [pc, #8]	@ (8000a54 <HAL_GetTick+0x10>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
}
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	46c0      	nop			@ (mov r8, r8)
 8000a54:	20000288 	.word	0x20000288

08000a58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a60:	f7ff fff0 	bl	8000a44 <HAL_GetTick>
 8000a64:	0003      	movs	r3, r0
 8000a66:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	d005      	beq.n	8000a7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a72:	4b0a      	ldr	r3, [pc, #40]	@ (8000a9c <HAL_Delay+0x44>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	001a      	movs	r2, r3
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	189b      	adds	r3, r3, r2
 8000a7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a7e:	46c0      	nop			@ (mov r8, r8)
 8000a80:	f7ff ffe0 	bl	8000a44 <HAL_GetTick>
 8000a84:	0002      	movs	r2, r0
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	68fa      	ldr	r2, [r7, #12]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d8f7      	bhi.n	8000a80 <HAL_Delay+0x28>
  {
  }
}
 8000a90:	46c0      	nop			@ (mov r8, r8)
 8000a92:	46c0      	nop			@ (mov r8, r8)
 8000a94:	46bd      	mov	sp, r7
 8000a96:	b004      	add	sp, #16
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	46c0      	nop			@ (mov r8, r8)
 8000a9c:	2000001c 	.word	0x2000001c

08000aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	0002      	movs	r2, r0
 8000aa8:	1dfb      	adds	r3, r7, #7
 8000aaa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000aac:	1dfb      	adds	r3, r7, #7
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ab2:	d809      	bhi.n	8000ac8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ab4:	1dfb      	adds	r3, r7, #7
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	001a      	movs	r2, r3
 8000aba:	231f      	movs	r3, #31
 8000abc:	401a      	ands	r2, r3
 8000abe:	4b04      	ldr	r3, [pc, #16]	@ (8000ad0 <__NVIC_EnableIRQ+0x30>)
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	4091      	lsls	r1, r2
 8000ac4:	000a      	movs	r2, r1
 8000ac6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000ac8:	46c0      	nop			@ (mov r8, r8)
 8000aca:	46bd      	mov	sp, r7
 8000acc:	b002      	add	sp, #8
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	e000e100 	.word	0xe000e100

08000ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad4:	b590      	push	{r4, r7, lr}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	0002      	movs	r2, r0
 8000adc:	6039      	str	r1, [r7, #0]
 8000ade:	1dfb      	adds	r3, r7, #7
 8000ae0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ae2:	1dfb      	adds	r3, r7, #7
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ae8:	d828      	bhi.n	8000b3c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aea:	4a2f      	ldr	r2, [pc, #188]	@ (8000ba8 <__NVIC_SetPriority+0xd4>)
 8000aec:	1dfb      	adds	r3, r7, #7
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	b25b      	sxtb	r3, r3
 8000af2:	089b      	lsrs	r3, r3, #2
 8000af4:	33c0      	adds	r3, #192	@ 0xc0
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	589b      	ldr	r3, [r3, r2]
 8000afa:	1dfa      	adds	r2, r7, #7
 8000afc:	7812      	ldrb	r2, [r2, #0]
 8000afe:	0011      	movs	r1, r2
 8000b00:	2203      	movs	r2, #3
 8000b02:	400a      	ands	r2, r1
 8000b04:	00d2      	lsls	r2, r2, #3
 8000b06:	21ff      	movs	r1, #255	@ 0xff
 8000b08:	4091      	lsls	r1, r2
 8000b0a:	000a      	movs	r2, r1
 8000b0c:	43d2      	mvns	r2, r2
 8000b0e:	401a      	ands	r2, r3
 8000b10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	019b      	lsls	r3, r3, #6
 8000b16:	22ff      	movs	r2, #255	@ 0xff
 8000b18:	401a      	ands	r2, r3
 8000b1a:	1dfb      	adds	r3, r7, #7
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	0018      	movs	r0, r3
 8000b20:	2303      	movs	r3, #3
 8000b22:	4003      	ands	r3, r0
 8000b24:	00db      	lsls	r3, r3, #3
 8000b26:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b28:	481f      	ldr	r0, [pc, #124]	@ (8000ba8 <__NVIC_SetPriority+0xd4>)
 8000b2a:	1dfb      	adds	r3, r7, #7
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	b25b      	sxtb	r3, r3
 8000b30:	089b      	lsrs	r3, r3, #2
 8000b32:	430a      	orrs	r2, r1
 8000b34:	33c0      	adds	r3, #192	@ 0xc0
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b3a:	e031      	b.n	8000ba0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b3c:	4a1b      	ldr	r2, [pc, #108]	@ (8000bac <__NVIC_SetPriority+0xd8>)
 8000b3e:	1dfb      	adds	r3, r7, #7
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	0019      	movs	r1, r3
 8000b44:	230f      	movs	r3, #15
 8000b46:	400b      	ands	r3, r1
 8000b48:	3b08      	subs	r3, #8
 8000b4a:	089b      	lsrs	r3, r3, #2
 8000b4c:	3306      	adds	r3, #6
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	18d3      	adds	r3, r2, r3
 8000b52:	3304      	adds	r3, #4
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	1dfa      	adds	r2, r7, #7
 8000b58:	7812      	ldrb	r2, [r2, #0]
 8000b5a:	0011      	movs	r1, r2
 8000b5c:	2203      	movs	r2, #3
 8000b5e:	400a      	ands	r2, r1
 8000b60:	00d2      	lsls	r2, r2, #3
 8000b62:	21ff      	movs	r1, #255	@ 0xff
 8000b64:	4091      	lsls	r1, r2
 8000b66:	000a      	movs	r2, r1
 8000b68:	43d2      	mvns	r2, r2
 8000b6a:	401a      	ands	r2, r3
 8000b6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	019b      	lsls	r3, r3, #6
 8000b72:	22ff      	movs	r2, #255	@ 0xff
 8000b74:	401a      	ands	r2, r3
 8000b76:	1dfb      	adds	r3, r7, #7
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	4003      	ands	r3, r0
 8000b80:	00db      	lsls	r3, r3, #3
 8000b82:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b84:	4809      	ldr	r0, [pc, #36]	@ (8000bac <__NVIC_SetPriority+0xd8>)
 8000b86:	1dfb      	adds	r3, r7, #7
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	001c      	movs	r4, r3
 8000b8c:	230f      	movs	r3, #15
 8000b8e:	4023      	ands	r3, r4
 8000b90:	3b08      	subs	r3, #8
 8000b92:	089b      	lsrs	r3, r3, #2
 8000b94:	430a      	orrs	r2, r1
 8000b96:	3306      	adds	r3, #6
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	18c3      	adds	r3, r0, r3
 8000b9c:	3304      	adds	r3, #4
 8000b9e:	601a      	str	r2, [r3, #0]
}
 8000ba0:	46c0      	nop			@ (mov r8, r8)
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	b003      	add	sp, #12
 8000ba6:	bd90      	pop	{r4, r7, pc}
 8000ba8:	e000e100 	.word	0xe000e100
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	1e5a      	subs	r2, r3, #1
 8000bbc:	2380      	movs	r3, #128	@ 0x80
 8000bbe:	045b      	lsls	r3, r3, #17
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d301      	bcc.n	8000bc8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	e010      	b.n	8000bea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf4 <SysTick_Config+0x44>)
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	3a01      	subs	r2, #1
 8000bce:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	425b      	negs	r3, r3
 8000bd4:	2103      	movs	r1, #3
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f7ff ff7c 	bl	8000ad4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bdc:	4b05      	ldr	r3, [pc, #20]	@ (8000bf4 <SysTick_Config+0x44>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000be2:	4b04      	ldr	r3, [pc, #16]	@ (8000bf4 <SysTick_Config+0x44>)
 8000be4:	2207      	movs	r2, #7
 8000be6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	0018      	movs	r0, r3
 8000bec:	46bd      	mov	sp, r7
 8000bee:	b002      	add	sp, #8
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	46c0      	nop			@ (mov r8, r8)
 8000bf4:	e000e010 	.word	0xe000e010

08000bf8 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60b9      	str	r1, [r7, #8]
 8000c00:	607a      	str	r2, [r7, #4]
 8000c02:	210f      	movs	r1, #15
 8000c04:	187b      	adds	r3, r7, r1
 8000c06:	1c02      	adds	r2, r0, #0
 8000c08:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000c0a:	68ba      	ldr	r2, [r7, #8]
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	b25b      	sxtb	r3, r3
 8000c12:	0011      	movs	r1, r2
 8000c14:	0018      	movs	r0, r3
 8000c16:	f7ff ff5d 	bl	8000ad4 <__NVIC_SetPriority>
}
 8000c1a:	46c0      	nop			@ (mov r8, r8)
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	b004      	add	sp, #16
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b082      	sub	sp, #8
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	0002      	movs	r2, r0
 8000c2a:	1dfb      	adds	r3, r7, #7
 8000c2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	b25b      	sxtb	r3, r3
 8000c34:	0018      	movs	r0, r3
 8000c36:	f7ff ff33 	bl	8000aa0 <__NVIC_EnableIRQ>
}
 8000c3a:	46c0      	nop			@ (mov r8, r8)
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	b002      	add	sp, #8
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f7ff ffaf 	bl	8000bb0 <SysTick_Config>
 8000c52:	0003      	movs	r3, r0
}
 8000c54:	0018      	movs	r0, r3
 8000c56:	46bd      	mov	sp, r7
 8000c58:	b002      	add	sp, #8
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d101      	bne.n	8000c6e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e050      	b.n	8000d10 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2225      	movs	r2, #37	@ 0x25
 8000c72:	5c9b      	ldrb	r3, [r3, r2]
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	2b02      	cmp	r3, #2
 8000c78:	d008      	beq.n	8000c8c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2204      	movs	r2, #4
 8000c7e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2224      	movs	r2, #36	@ 0x24
 8000c84:	2100      	movs	r1, #0
 8000c86:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e041      	b.n	8000d10 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	210e      	movs	r1, #14
 8000c98:	438a      	bics	r2, r1
 8000c9a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca6:	491c      	ldr	r1, [pc, #112]	@ (8000d18 <HAL_DMA_Abort+0xbc>)
 8000ca8:	400a      	ands	r2, r1
 8000caa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	438a      	bics	r2, r1
 8000cba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8000cbc:	4b17      	ldr	r3, [pc, #92]	@ (8000d1c <HAL_DMA_Abort+0xc0>)
 8000cbe:	6859      	ldr	r1, [r3, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc4:	221c      	movs	r2, #28
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	2201      	movs	r2, #1
 8000cca:	409a      	lsls	r2, r3
 8000ccc:	4b13      	ldr	r3, [pc, #76]	@ (8000d1c <HAL_DMA_Abort+0xc0>)
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000cda:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d00c      	beq.n	8000cfe <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000cee:	490a      	ldr	r1, [pc, #40]	@ (8000d18 <HAL_DMA_Abort+0xbc>)
 8000cf0:	400a      	ands	r2, r1
 8000cf2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000cfc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2225      	movs	r2, #37	@ 0x25
 8000d02:	2101      	movs	r1, #1
 8000d04:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2224      	movs	r2, #36	@ 0x24
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000d0e:	2300      	movs	r3, #0
}
 8000d10:	0018      	movs	r0, r3
 8000d12:	46bd      	mov	sp, r7
 8000d14:	b002      	add	sp, #8
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	fffffeff 	.word	0xfffffeff
 8000d1c:	40020000 	.word	0x40020000

08000d20 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d28:	230f      	movs	r3, #15
 8000d2a:	18fb      	adds	r3, r7, r3
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2224      	movs	r2, #36	@ 0x24
 8000d34:	2100      	movs	r1, #0
 8000d36:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2224      	movs	r2, #36	@ 0x24
 8000d3c:	5c9b      	ldrb	r3, [r3, r2]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d101      	bne.n	8000d46 <HAL_DMA_Abort_IT+0x26>
 8000d42:	2302      	movs	r3, #2
 8000d44:	e05e      	b.n	8000e04 <HAL_DMA_Abort_IT+0xe4>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2224      	movs	r2, #36	@ 0x24
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2225      	movs	r2, #37	@ 0x25
 8000d52:	5c9b      	ldrb	r3, [r3, r2]
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d007      	beq.n	8000d6a <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2204      	movs	r2, #4
 8000d5e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000d60:	230f      	movs	r3, #15
 8000d62:	18fb      	adds	r3, r7, r3
 8000d64:	2201      	movs	r2, #1
 8000d66:	701a      	strb	r2, [r3, #0]
 8000d68:	e049      	b.n	8000dfe <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	210e      	movs	r1, #14
 8000d76:	438a      	bics	r2, r1
 8000d78:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2101      	movs	r1, #1
 8000d86:	438a      	bics	r2, r1
 8000d88:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d94:	491d      	ldr	r1, [pc, #116]	@ (8000e0c <HAL_DMA_Abort_IT+0xec>)
 8000d96:	400a      	ands	r2, r1
 8000d98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8000d9a:	4b1d      	ldr	r3, [pc, #116]	@ (8000e10 <HAL_DMA_Abort_IT+0xf0>)
 8000d9c:	6859      	ldr	r1, [r3, #4]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da2:	221c      	movs	r2, #28
 8000da4:	4013      	ands	r3, r2
 8000da6:	2201      	movs	r2, #1
 8000da8:	409a      	lsls	r2, r3
 8000daa:	4b19      	ldr	r3, [pc, #100]	@ (8000e10 <HAL_DMA_Abort_IT+0xf0>)
 8000dac:	430a      	orrs	r2, r1
 8000dae:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000db8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d00c      	beq.n	8000ddc <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000dcc:	490f      	ldr	r1, [pc, #60]	@ (8000e0c <HAL_DMA_Abort_IT+0xec>)
 8000dce:	400a      	ands	r2, r1
 8000dd0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000dda:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2225      	movs	r2, #37	@ 0x25
 8000de0:	2101      	movs	r1, #1
 8000de2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2224      	movs	r2, #36	@ 0x24
 8000de8:	2100      	movs	r1, #0
 8000dea:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d004      	beq.n	8000dfe <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	0010      	movs	r0, r2
 8000dfc:	4798      	blx	r3
    }
  }
  return status;
 8000dfe:	230f      	movs	r3, #15
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	781b      	ldrb	r3, [r3, #0]
}
 8000e04:	0018      	movs	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	b004      	add	sp, #16
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	fffffeff 	.word	0xfffffeff
 8000e10:	40020000 	.word	0x40020000

08000e14 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2225      	movs	r2, #37	@ 0x25
 8000e20:	5c9b      	ldrb	r3, [r3, r2]
 8000e22:	b2db      	uxtb	r3, r3
}
 8000e24:	0018      	movs	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	b002      	add	sp, #8
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000e3a:	e153      	b.n	80010e4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2101      	movs	r1, #1
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4091      	lsls	r1, r2
 8000e46:	000a      	movs	r2, r1
 8000e48:	4013      	ands	r3, r2
 8000e4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d100      	bne.n	8000e54 <HAL_GPIO_Init+0x28>
 8000e52:	e144      	b.n	80010de <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d003      	beq.n	8000e64 <HAL_GPIO_Init+0x38>
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	2b12      	cmp	r3, #18
 8000e62:	d125      	bne.n	8000eb0 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	08da      	lsrs	r2, r3, #3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3208      	adds	r2, #8
 8000e6c:	0092      	lsls	r2, r2, #2
 8000e6e:	58d3      	ldr	r3, [r2, r3]
 8000e70:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	2207      	movs	r2, #7
 8000e76:	4013      	ands	r3, r2
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	220f      	movs	r2, #15
 8000e7c:	409a      	lsls	r2, r3
 8000e7e:	0013      	movs	r3, r2
 8000e80:	43da      	mvns	r2, r3
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	4013      	ands	r3, r2
 8000e86:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	691b      	ldr	r3, [r3, #16]
 8000e8c:	220f      	movs	r2, #15
 8000e8e:	401a      	ands	r2, r3
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	2107      	movs	r1, #7
 8000e94:	400b      	ands	r3, r1
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	409a      	lsls	r2, r3
 8000e9a:	0013      	movs	r3, r2
 8000e9c:	697a      	ldr	r2, [r7, #20]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	08da      	lsrs	r2, r3, #3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	3208      	adds	r2, #8
 8000eaa:	0092      	lsls	r2, r2, #2
 8000eac:	6979      	ldr	r1, [r7, #20]
 8000eae:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	2203      	movs	r2, #3
 8000ebc:	409a      	lsls	r2, r3
 8000ebe:	0013      	movs	r3, r2
 8000ec0:	43da      	mvns	r2, r3
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	2203      	movs	r2, #3
 8000ece:	401a      	ands	r2, r3
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	409a      	lsls	r2, r3
 8000ed6:	0013      	movs	r3, r2
 8000ed8:	697a      	ldr	r2, [r7, #20]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	697a      	ldr	r2, [r7, #20]
 8000ee2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d00b      	beq.n	8000f04 <HAL_GPIO_Init+0xd8>
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d007      	beq.n	8000f04 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ef8:	2b11      	cmp	r3, #17
 8000efa:	d003      	beq.n	8000f04 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	2b12      	cmp	r3, #18
 8000f02:	d130      	bne.n	8000f66 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	2203      	movs	r2, #3
 8000f10:	409a      	lsls	r2, r3
 8000f12:	0013      	movs	r3, r2
 8000f14:	43da      	mvns	r2, r3
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	68da      	ldr	r2, [r3, #12]
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	409a      	lsls	r2, r3
 8000f26:	0013      	movs	r3, r2
 8000f28:	697a      	ldr	r2, [r7, #20]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	697a      	ldr	r2, [r7, #20]
 8000f32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	409a      	lsls	r2, r3
 8000f40:	0013      	movs	r3, r2
 8000f42:	43da      	mvns	r2, r3
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	4013      	ands	r3, r2
 8000f48:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	091b      	lsrs	r3, r3, #4
 8000f50:	2201      	movs	r2, #1
 8000f52:	401a      	ands	r2, r3
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	409a      	lsls	r2, r3
 8000f58:	0013      	movs	r3, r2
 8000f5a:	697a      	ldr	r2, [r7, #20]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	697a      	ldr	r2, [r7, #20]
 8000f64:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	2b03      	cmp	r3, #3
 8000f6c:	d017      	beq.n	8000f9e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	68db      	ldr	r3, [r3, #12]
 8000f72:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	2203      	movs	r2, #3
 8000f7a:	409a      	lsls	r2, r3
 8000f7c:	0013      	movs	r3, r2
 8000f7e:	43da      	mvns	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	4013      	ands	r3, r2
 8000f84:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	689a      	ldr	r2, [r3, #8]
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	409a      	lsls	r2, r3
 8000f90:	0013      	movs	r3, r2
 8000f92:	697a      	ldr	r2, [r7, #20]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	697a      	ldr	r2, [r7, #20]
 8000f9c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685a      	ldr	r2, [r3, #4]
 8000fa2:	2380      	movs	r3, #128	@ 0x80
 8000fa4:	055b      	lsls	r3, r3, #21
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	d100      	bne.n	8000fac <HAL_GPIO_Init+0x180>
 8000faa:	e098      	b.n	80010de <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000fac:	4a53      	ldr	r2, [pc, #332]	@ (80010fc <HAL_GPIO_Init+0x2d0>)
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	089b      	lsrs	r3, r3, #2
 8000fb2:	3318      	adds	r3, #24
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	589b      	ldr	r3, [r3, r2]
 8000fb8:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	220f      	movs	r2, #15
 8000fc4:	409a      	lsls	r2, r3
 8000fc6:	0013      	movs	r3, r2
 8000fc8:	43da      	mvns	r2, r3
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	23a0      	movs	r3, #160	@ 0xa0
 8000fd4:	05db      	lsls	r3, r3, #23
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d019      	beq.n	800100e <HAL_GPIO_Init+0x1e2>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a48      	ldr	r2, [pc, #288]	@ (8001100 <HAL_GPIO_Init+0x2d4>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d013      	beq.n	800100a <HAL_GPIO_Init+0x1de>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a47      	ldr	r2, [pc, #284]	@ (8001104 <HAL_GPIO_Init+0x2d8>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d00d      	beq.n	8001006 <HAL_GPIO_Init+0x1da>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a46      	ldr	r2, [pc, #280]	@ (8001108 <HAL_GPIO_Init+0x2dc>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d007      	beq.n	8001002 <HAL_GPIO_Init+0x1d6>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a45      	ldr	r2, [pc, #276]	@ (800110c <HAL_GPIO_Init+0x2e0>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d101      	bne.n	8000ffe <HAL_GPIO_Init+0x1d2>
 8000ffa:	2305      	movs	r3, #5
 8000ffc:	e008      	b.n	8001010 <HAL_GPIO_Init+0x1e4>
 8000ffe:	2306      	movs	r3, #6
 8001000:	e006      	b.n	8001010 <HAL_GPIO_Init+0x1e4>
 8001002:	2303      	movs	r3, #3
 8001004:	e004      	b.n	8001010 <HAL_GPIO_Init+0x1e4>
 8001006:	2302      	movs	r3, #2
 8001008:	e002      	b.n	8001010 <HAL_GPIO_Init+0x1e4>
 800100a:	2301      	movs	r3, #1
 800100c:	e000      	b.n	8001010 <HAL_GPIO_Init+0x1e4>
 800100e:	2300      	movs	r3, #0
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	2103      	movs	r1, #3
 8001014:	400a      	ands	r2, r1
 8001016:	00d2      	lsls	r2, r2, #3
 8001018:	4093      	lsls	r3, r2
 800101a:	697a      	ldr	r2, [r7, #20]
 800101c:	4313      	orrs	r3, r2
 800101e:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001020:	4936      	ldr	r1, [pc, #216]	@ (80010fc <HAL_GPIO_Init+0x2d0>)
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	089b      	lsrs	r3, r3, #2
 8001026:	3318      	adds	r3, #24
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	697a      	ldr	r2, [r7, #20]
 800102c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 800102e:	4a33      	ldr	r2, [pc, #204]	@ (80010fc <HAL_GPIO_Init+0x2d0>)
 8001030:	2380      	movs	r3, #128	@ 0x80
 8001032:	58d3      	ldr	r3, [r2, r3]
 8001034:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	43da      	mvns	r2, r3
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	4013      	ands	r3, r2
 800103e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685a      	ldr	r2, [r3, #4]
 8001044:	2380      	movs	r3, #128	@ 0x80
 8001046:	025b      	lsls	r3, r3, #9
 8001048:	4013      	ands	r3, r2
 800104a:	d003      	beq.n	8001054 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 800104c:	697a      	ldr	r2, [r7, #20]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	4313      	orrs	r3, r2
 8001052:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001054:	4929      	ldr	r1, [pc, #164]	@ (80010fc <HAL_GPIO_Init+0x2d0>)
 8001056:	2280      	movs	r2, #128	@ 0x80
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 800105c:	4a27      	ldr	r2, [pc, #156]	@ (80010fc <HAL_GPIO_Init+0x2d0>)
 800105e:	2384      	movs	r3, #132	@ 0x84
 8001060:	58d3      	ldr	r3, [r2, r3]
 8001062:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	43da      	mvns	r2, r3
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	4013      	ands	r3, r2
 800106c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	2380      	movs	r3, #128	@ 0x80
 8001074:	029b      	lsls	r3, r3, #10
 8001076:	4013      	ands	r3, r2
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 800107a:	697a      	ldr	r2, [r7, #20]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4313      	orrs	r3, r2
 8001080:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001082:	491e      	ldr	r1, [pc, #120]	@ (80010fc <HAL_GPIO_Init+0x2d0>)
 8001084:	2284      	movs	r2, #132	@ 0x84
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800108a:	4b1c      	ldr	r3, [pc, #112]	@ (80010fc <HAL_GPIO_Init+0x2d0>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	43da      	mvns	r2, r3
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	4013      	ands	r3, r2
 8001098:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685a      	ldr	r2, [r3, #4]
 800109e:	2380      	movs	r3, #128	@ 0x80
 80010a0:	035b      	lsls	r3, r3, #13
 80010a2:	4013      	ands	r3, r2
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 80010a6:	697a      	ldr	r2, [r7, #20]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80010ae:	4b13      	ldr	r3, [pc, #76]	@ (80010fc <HAL_GPIO_Init+0x2d0>)
 80010b0:	697a      	ldr	r2, [r7, #20]
 80010b2:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 80010b4:	4b11      	ldr	r3, [pc, #68]	@ (80010fc <HAL_GPIO_Init+0x2d0>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	43da      	mvns	r2, r3
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	4013      	ands	r3, r2
 80010c2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	2380      	movs	r3, #128	@ 0x80
 80010ca:	039b      	lsls	r3, r3, #14
 80010cc:	4013      	ands	r3, r2
 80010ce:	d003      	beq.n	80010d8 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 80010d0:	697a      	ldr	r2, [r7, #20]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80010d8:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <HAL_GPIO_Init+0x2d0>)
 80010da:	697a      	ldr	r2, [r7, #20]
 80010dc:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	3301      	adds	r3, #1
 80010e2:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	40da      	lsrs	r2, r3
 80010ec:	1e13      	subs	r3, r2, #0
 80010ee:	d000      	beq.n	80010f2 <HAL_GPIO_Init+0x2c6>
 80010f0:	e6a4      	b.n	8000e3c <HAL_GPIO_Init+0x10>
  }
}
 80010f2:	46c0      	nop			@ (mov r8, r8)
 80010f4:	46c0      	nop			@ (mov r8, r8)
 80010f6:	46bd      	mov	sp, r7
 80010f8:	b006      	add	sp, #24
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40021800 	.word	0x40021800
 8001100:	50000400 	.word	0x50000400
 8001104:	50000800 	.word	0x50000800
 8001108:	50000c00 	.word	0x50000c00
 800110c:	50001400 	.word	0x50001400

08001110 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	0008      	movs	r0, r1
 800111a:	0011      	movs	r1, r2
 800111c:	1cbb      	adds	r3, r7, #2
 800111e:	1c02      	adds	r2, r0, #0
 8001120:	801a      	strh	r2, [r3, #0]
 8001122:	1c7b      	adds	r3, r7, #1
 8001124:	1c0a      	adds	r2, r1, #0
 8001126:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001128:	1c7b      	adds	r3, r7, #1
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d004      	beq.n	800113a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001130:	1cbb      	adds	r3, r7, #2
 8001132:	881a      	ldrh	r2, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001138:	e003      	b.n	8001142 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800113a:	1cbb      	adds	r3, r7, #2
 800113c:	881a      	ldrh	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001142:	46c0      	nop			@ (mov r8, r8)
 8001144:	46bd      	mov	sp, r7
 8001146:	b002      	add	sp, #8
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32C0 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b084      	sub	sp, #16
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	000a      	movs	r2, r1
 8001154:	1cbb      	adds	r3, r7, #2
 8001156:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	695b      	ldr	r3, [r3, #20]
 800115c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800115e:	1cbb      	adds	r3, r7, #2
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	4013      	ands	r3, r2
 8001166:	041a      	lsls	r2, r3, #16
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	43db      	mvns	r3, r3
 800116c:	1cb9      	adds	r1, r7, #2
 800116e:	8809      	ldrh	r1, [r1, #0]
 8001170:	400b      	ands	r3, r1
 8001172:	431a      	orrs	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	619a      	str	r2, [r3, #24]
}
 8001178:	46c0      	nop			@ (mov r8, r8)
 800117a:	46bd      	mov	sp, r7
 800117c:	b004      	add	sp, #16
 800117e:	bd80      	pop	{r7, pc}

08001180 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d101      	bne.n	8001192 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e08f      	b.n	80012b2 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2241      	movs	r2, #65	@ 0x41
 8001196:	5c9b      	ldrb	r3, [r3, r2]
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	d107      	bne.n	80011ae <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2240      	movs	r2, #64	@ 0x40
 80011a2:	2100      	movs	r1, #0
 80011a4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	0018      	movs	r0, r3
 80011aa:	f7ff f8d5 	bl	8000358 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2241      	movs	r2, #65	@ 0x41
 80011b2:	2124      	movs	r1, #36	@ 0x24
 80011b4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2101      	movs	r1, #1
 80011c2:	438a      	bics	r2, r1
 80011c4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685a      	ldr	r2, [r3, #4]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	493b      	ldr	r1, [pc, #236]	@ (80012bc <HAL_I2C_Init+0x13c>)
 80011d0:	400a      	ands	r2, r1
 80011d2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4938      	ldr	r1, [pc, #224]	@ (80012c0 <HAL_I2C_Init+0x140>)
 80011e0:	400a      	ands	r2, r1
 80011e2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d108      	bne.n	80011fe <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689a      	ldr	r2, [r3, #8]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2180      	movs	r1, #128	@ 0x80
 80011f6:	0209      	lsls	r1, r1, #8
 80011f8:	430a      	orrs	r2, r1
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	e007      	b.n	800120e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	689a      	ldr	r2, [r3, #8]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2184      	movs	r1, #132	@ 0x84
 8001208:	0209      	lsls	r1, r1, #8
 800120a:	430a      	orrs	r2, r1
 800120c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	2b02      	cmp	r3, #2
 8001214:	d109      	bne.n	800122a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	685a      	ldr	r2, [r3, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2180      	movs	r1, #128	@ 0x80
 8001222:	0109      	lsls	r1, r1, #4
 8001224:	430a      	orrs	r2, r1
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	e007      	b.n	800123a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4923      	ldr	r1, [pc, #140]	@ (80012c4 <HAL_I2C_Init+0x144>)
 8001236:	400a      	ands	r2, r1
 8001238:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	685a      	ldr	r2, [r3, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4920      	ldr	r1, [pc, #128]	@ (80012c8 <HAL_I2C_Init+0x148>)
 8001246:	430a      	orrs	r2, r1
 8001248:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	68da      	ldr	r2, [r3, #12]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	491a      	ldr	r1, [pc, #104]	@ (80012c0 <HAL_I2C_Init+0x140>)
 8001256:	400a      	ands	r2, r1
 8001258:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	691a      	ldr	r2, [r3, #16]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	695b      	ldr	r3, [r3, #20]
 8001262:	431a      	orrs	r2, r3
 8001264:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	430a      	orrs	r2, r1
 8001272:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69d9      	ldr	r1, [r3, #28]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a1a      	ldr	r2, [r3, #32]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	430a      	orrs	r2, r1
 8001282:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2101      	movs	r1, #1
 8001290:	430a      	orrs	r2, r1
 8001292:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2241      	movs	r2, #65	@ 0x41
 800129e:	2120      	movs	r1, #32
 80012a0:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2242      	movs	r2, #66	@ 0x42
 80012ac:	2100      	movs	r1, #0
 80012ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	0018      	movs	r0, r3
 80012b4:	46bd      	mov	sp, r7
 80012b6:	b002      	add	sp, #8
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	46c0      	nop			@ (mov r8, r8)
 80012bc:	f0ffffff 	.word	0xf0ffffff
 80012c0:	ffff7fff 	.word	0xffff7fff
 80012c4:	fffff7ff 	.word	0xfffff7ff
 80012c8:	02008000 	.word	0x02008000

080012cc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d005      	beq.n	80012f8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012f0:	68ba      	ldr	r2, [r7, #8]
 80012f2:	68f9      	ldr	r1, [r7, #12]
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	4798      	blx	r3
  }
}
 80012f8:	46c0      	nop			@ (mov r8, r8)
 80012fa:	46bd      	mov	sp, r7
 80012fc:	b004      	add	sp, #16
 80012fe:	bd80      	pop	{r7, pc}

08001300 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001318:	697a      	ldr	r2, [r7, #20]
 800131a:	2380      	movs	r3, #128	@ 0x80
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	4013      	ands	r3, r2
 8001320:	d00e      	beq.n	8001340 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	2280      	movs	r2, #128	@ 0x80
 8001326:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001328:	d00a      	beq.n	8001340 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132e:	2201      	movs	r2, #1
 8001330:	431a      	orrs	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2280      	movs	r2, #128	@ 0x80
 800133c:	0052      	lsls	r2, r2, #1
 800133e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001340:	697a      	ldr	r2, [r7, #20]
 8001342:	2380      	movs	r3, #128	@ 0x80
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	4013      	ands	r3, r2
 8001348:	d00e      	beq.n	8001368 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	2280      	movs	r2, #128	@ 0x80
 800134e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001350:	d00a      	beq.n	8001368 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001356:	2208      	movs	r2, #8
 8001358:	431a      	orrs	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2280      	movs	r2, #128	@ 0x80
 8001364:	00d2      	lsls	r2, r2, #3
 8001366:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001368:	697a      	ldr	r2, [r7, #20]
 800136a:	2380      	movs	r3, #128	@ 0x80
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	4013      	ands	r3, r2
 8001370:	d00e      	beq.n	8001390 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	2280      	movs	r2, #128	@ 0x80
 8001376:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001378:	d00a      	beq.n	8001390 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800137e:	2202      	movs	r2, #2
 8001380:	431a      	orrs	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2280      	movs	r2, #128	@ 0x80
 800138c:	0092      	lsls	r2, r2, #2
 800138e:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001394:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	220b      	movs	r2, #11
 800139a:	4013      	ands	r3, r2
 800139c:	d005      	beq.n	80013aa <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	0011      	movs	r1, r2
 80013a4:	0018      	movs	r0, r3
 80013a6:	f000 fbcd 	bl	8001b44 <I2C_ITError>
  }
}
 80013aa:	46c0      	nop			@ (mov r8, r8)
 80013ac:	46bd      	mov	sp, r7
 80013ae:	b006      	add	sp, #24
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80013ba:	46c0      	nop			@ (mov r8, r8)
 80013bc:	46bd      	mov	sp, r7
 80013be:	b002      	add	sp, #8
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80013ca:	46c0      	nop			@ (mov r8, r8)
 80013cc:	46bd      	mov	sp, r7
 80013ce:	b002      	add	sp, #8
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	0008      	movs	r0, r1
 80013dc:	0011      	movs	r1, r2
 80013de:	1cfb      	adds	r3, r7, #3
 80013e0:	1c02      	adds	r2, r0, #0
 80013e2:	701a      	strb	r2, [r3, #0]
 80013e4:	003b      	movs	r3, r7
 80013e6:	1c0a      	adds	r2, r1, #0
 80013e8:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80013ea:	46c0      	nop			@ (mov r8, r8)
 80013ec:	46bd      	mov	sp, r7
 80013ee:	b002      	add	sp, #8
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80013fa:	46c0      	nop			@ (mov r8, r8)
 80013fc:	46bd      	mov	sp, r7
 80013fe:	b002      	add	sp, #8
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800140a:	46c0      	nop			@ (mov r8, r8)
 800140c:	46bd      	mov	sp, r7
 800140e:	b002      	add	sp, #8
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800141a:	46c0      	nop			@ (mov r8, r8)
 800141c:	46bd      	mov	sp, r7
 800141e:	b002      	add	sp, #8
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001434:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	2240      	movs	r2, #64	@ 0x40
 800143e:	5c9b      	ldrb	r3, [r3, r2]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d101      	bne.n	8001448 <I2C_Slave_ISR_IT+0x24>
 8001444:	2302      	movs	r3, #2
 8001446:	e0e6      	b.n	8001616 <I2C_Slave_ISR_IT+0x1f2>
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2240      	movs	r2, #64	@ 0x40
 800144c:	2101      	movs	r1, #1
 800144e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	2220      	movs	r2, #32
 8001454:	4013      	ands	r3, r2
 8001456:	d009      	beq.n	800146c <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2220      	movs	r2, #32
 800145c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800145e:	d005      	beq.n	800146c <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	0011      	movs	r1, r2
 8001466:	0018      	movs	r0, r3
 8001468:	f000 f9e4 	bl	8001834 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	2210      	movs	r2, #16
 8001470:	4013      	ands	r3, r2
 8001472:	d052      	beq.n	800151a <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2210      	movs	r2, #16
 8001478:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800147a:	d04e      	beq.n	800151a <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001480:	b29b      	uxth	r3, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	d12d      	bne.n	80014e2 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2241      	movs	r2, #65	@ 0x41
 800148a:	5c9b      	ldrb	r3, [r3, r2]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b28      	cmp	r3, #40	@ 0x28
 8001490:	d10b      	bne.n	80014aa <I2C_Slave_ISR_IT+0x86>
 8001492:	697a      	ldr	r2, [r7, #20]
 8001494:	2380      	movs	r3, #128	@ 0x80
 8001496:	049b      	lsls	r3, r3, #18
 8001498:	429a      	cmp	r2, r3
 800149a:	d106      	bne.n	80014aa <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	0011      	movs	r1, r2
 80014a2:	0018      	movs	r0, r3
 80014a4:	f000 faf6 	bl	8001a94 <I2C_ITListenCplt>
 80014a8:	e036      	b.n	8001518 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2241      	movs	r2, #65	@ 0x41
 80014ae:	5c9b      	ldrb	r3, [r3, r2]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b29      	cmp	r3, #41	@ 0x29
 80014b4:	d110      	bne.n	80014d8 <I2C_Slave_ISR_IT+0xb4>
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	4a59      	ldr	r2, [pc, #356]	@ (8001620 <I2C_Slave_ISR_IT+0x1fc>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d00c      	beq.n	80014d8 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2210      	movs	r2, #16
 80014c4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	0018      	movs	r0, r3
 80014ca:	f000 fc66 	bl	8001d9a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	0018      	movs	r0, r3
 80014d2:	f000 f94b 	bl	800176c <I2C_ITSlaveSeqCplt>
 80014d6:	e01f      	b.n	8001518 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2210      	movs	r2, #16
 80014de:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80014e0:	e091      	b.n	8001606 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2210      	movs	r2, #16
 80014e8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ee:	2204      	movs	r2, #4
 80014f0:	431a      	orrs	r2, r3
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d005      	beq.n	8001508 <I2C_Slave_ISR_IT+0xe4>
 80014fc:	697a      	ldr	r2, [r7, #20]
 80014fe:	2380      	movs	r3, #128	@ 0x80
 8001500:	045b      	lsls	r3, r3, #17
 8001502:	429a      	cmp	r2, r3
 8001504:	d000      	beq.n	8001508 <I2C_Slave_ISR_IT+0xe4>
 8001506:	e07e      	b.n	8001606 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	0011      	movs	r1, r2
 8001510:	0018      	movs	r0, r3
 8001512:	f000 fb17 	bl	8001b44 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001516:	e076      	b.n	8001606 <I2C_Slave_ISR_IT+0x1e2>
 8001518:	e075      	b.n	8001606 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	2204      	movs	r2, #4
 800151e:	4013      	ands	r3, r2
 8001520:	d02f      	beq.n	8001582 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2204      	movs	r2, #4
 8001526:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001528:	d02b      	beq.n	8001582 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800152e:	b29b      	uxth	r3, r3
 8001530:	2b00      	cmp	r3, #0
 8001532:	d018      	beq.n	8001566 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001546:	1c5a      	adds	r2, r3, #1
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001550:	3b01      	subs	r3, #1
 8001552:	b29a      	uxth	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800155c:	b29b      	uxth	r3, r3
 800155e:	3b01      	subs	r3, #1
 8001560:	b29a      	uxth	r2, r3
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800156a:	b29b      	uxth	r3, r3
 800156c:	2b00      	cmp	r3, #0
 800156e:	d14c      	bne.n	800160a <I2C_Slave_ISR_IT+0x1e6>
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	4a2b      	ldr	r2, [pc, #172]	@ (8001620 <I2C_Slave_ISR_IT+0x1fc>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d048      	beq.n	800160a <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	0018      	movs	r0, r3
 800157c:	f000 f8f6 	bl	800176c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001580:	e043      	b.n	800160a <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	2208      	movs	r2, #8
 8001586:	4013      	ands	r3, r2
 8001588:	d00a      	beq.n	80015a0 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2208      	movs	r2, #8
 800158e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001590:	d006      	beq.n	80015a0 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	0011      	movs	r1, r2
 8001598:	0018      	movs	r0, r3
 800159a:	f000 f843 	bl	8001624 <I2C_ITAddrCplt>
 800159e:	e035      	b.n	800160c <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	2202      	movs	r2, #2
 80015a4:	4013      	ands	r3, r2
 80015a6:	d031      	beq.n	800160c <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2202      	movs	r2, #2
 80015ac:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80015ae:	d02d      	beq.n	800160c <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d018      	beq.n	80015ec <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015be:	781a      	ldrb	r2, [r3, #0]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ca:	1c5a      	adds	r2, r3, #1
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	3b01      	subs	r3, #1
 80015d8:	b29a      	uxth	r2, r3
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015e2:	3b01      	subs	r3, #1
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80015ea:	e00f      	b.n	800160c <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80015ec:	697a      	ldr	r2, [r7, #20]
 80015ee:	2380      	movs	r3, #128	@ 0x80
 80015f0:	045b      	lsls	r3, r3, #17
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d002      	beq.n	80015fc <I2C_Slave_ISR_IT+0x1d8>
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d107      	bne.n	800160c <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	0018      	movs	r0, r3
 8001600:	f000 f8b4 	bl	800176c <I2C_ITSlaveSeqCplt>
 8001604:	e002      	b.n	800160c <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8001606:	46c0      	nop			@ (mov r8, r8)
 8001608:	e000      	b.n	800160c <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 800160a:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2240      	movs	r2, #64	@ 0x40
 8001610:	2100      	movs	r1, #0
 8001612:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	0018      	movs	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	b006      	add	sp, #24
 800161c:	bd80      	pop	{r7, pc}
 800161e:	46c0      	nop			@ (mov r8, r8)
 8001620:	ffff0000 	.word	0xffff0000

08001624 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001624:	b5b0      	push	{r4, r5, r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2241      	movs	r2, #65	@ 0x41
 8001632:	5c9b      	ldrb	r3, [r3, r2]
 8001634:	b2db      	uxtb	r3, r3
 8001636:	001a      	movs	r2, r3
 8001638:	2328      	movs	r3, #40	@ 0x28
 800163a:	4013      	ands	r3, r2
 800163c:	2b28      	cmp	r3, #40	@ 0x28
 800163e:	d000      	beq.n	8001642 <I2C_ITAddrCplt+0x1e>
 8001640:	e088      	b.n	8001754 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	0c1b      	lsrs	r3, r3, #16
 800164a:	b2da      	uxtb	r2, r3
 800164c:	250f      	movs	r5, #15
 800164e:	197b      	adds	r3, r7, r5
 8001650:	2101      	movs	r1, #1
 8001652:	400a      	ands	r2, r1
 8001654:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	0c1b      	lsrs	r3, r3, #16
 800165e:	b29a      	uxth	r2, r3
 8001660:	200c      	movs	r0, #12
 8001662:	183b      	adds	r3, r7, r0
 8001664:	21fe      	movs	r1, #254	@ 0xfe
 8001666:	400a      	ands	r2, r1
 8001668:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	b29a      	uxth	r2, r3
 8001672:	240a      	movs	r4, #10
 8001674:	193b      	adds	r3, r7, r4
 8001676:	0592      	lsls	r2, r2, #22
 8001678:	0d92      	lsrs	r2, r2, #22
 800167a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	b29a      	uxth	r2, r3
 8001684:	2308      	movs	r3, #8
 8001686:	18fb      	adds	r3, r7, r3
 8001688:	21fe      	movs	r1, #254	@ 0xfe
 800168a:	400a      	ands	r2, r1
 800168c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	2b02      	cmp	r3, #2
 8001694:	d148      	bne.n	8001728 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001696:	0021      	movs	r1, r4
 8001698:	187b      	adds	r3, r7, r1
 800169a:	881b      	ldrh	r3, [r3, #0]
 800169c:	09db      	lsrs	r3, r3, #7
 800169e:	b29a      	uxth	r2, r3
 80016a0:	183b      	adds	r3, r7, r0
 80016a2:	881b      	ldrh	r3, [r3, #0]
 80016a4:	4053      	eors	r3, r2
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	001a      	movs	r2, r3
 80016aa:	2306      	movs	r3, #6
 80016ac:	4013      	ands	r3, r2
 80016ae:	d120      	bne.n	80016f2 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80016b0:	183b      	adds	r3, r7, r0
 80016b2:	187a      	adds	r2, r7, r1
 80016b4:	8812      	ldrh	r2, [r2, #0]
 80016b6:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016bc:	1c5a      	adds	r2, r3, #1
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d14c      	bne.n	8001764 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2208      	movs	r2, #8
 80016d6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2240      	movs	r2, #64	@ 0x40
 80016dc:	2100      	movs	r1, #0
 80016de:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80016e0:	183b      	adds	r3, r7, r0
 80016e2:	881a      	ldrh	r2, [r3, #0]
 80016e4:	197b      	adds	r3, r7, r5
 80016e6:	7819      	ldrb	r1, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	0018      	movs	r0, r3
 80016ec:	f7ff fe71 	bl	80013d2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80016f0:	e038      	b.n	8001764 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80016f2:	240c      	movs	r4, #12
 80016f4:	193b      	adds	r3, r7, r4
 80016f6:	2208      	movs	r2, #8
 80016f8:	18ba      	adds	r2, r7, r2
 80016fa:	8812      	ldrh	r2, [r2, #0]
 80016fc:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80016fe:	2380      	movs	r3, #128	@ 0x80
 8001700:	021a      	lsls	r2, r3, #8
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	0011      	movs	r1, r2
 8001706:	0018      	movs	r0, r3
 8001708:	f000 fb88 	bl	8001e1c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2240      	movs	r2, #64	@ 0x40
 8001710:	2100      	movs	r1, #0
 8001712:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001714:	193b      	adds	r3, r7, r4
 8001716:	881a      	ldrh	r2, [r3, #0]
 8001718:	230f      	movs	r3, #15
 800171a:	18fb      	adds	r3, r7, r3
 800171c:	7819      	ldrb	r1, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	0018      	movs	r0, r3
 8001722:	f7ff fe56 	bl	80013d2 <HAL_I2C_AddrCallback>
}
 8001726:	e01d      	b.n	8001764 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001728:	2380      	movs	r3, #128	@ 0x80
 800172a:	021a      	lsls	r2, r3, #8
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	0011      	movs	r1, r2
 8001730:	0018      	movs	r0, r3
 8001732:	f000 fb73 	bl	8001e1c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2240      	movs	r2, #64	@ 0x40
 800173a:	2100      	movs	r1, #0
 800173c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800173e:	230c      	movs	r3, #12
 8001740:	18fb      	adds	r3, r7, r3
 8001742:	881a      	ldrh	r2, [r3, #0]
 8001744:	230f      	movs	r3, #15
 8001746:	18fb      	adds	r3, r7, r3
 8001748:	7819      	ldrb	r1, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	0018      	movs	r0, r3
 800174e:	f7ff fe40 	bl	80013d2 <HAL_I2C_AddrCallback>
}
 8001752:	e007      	b.n	8001764 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2208      	movs	r2, #8
 800175a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2240      	movs	r2, #64	@ 0x40
 8001760:	2100      	movs	r1, #0
 8001762:	5499      	strb	r1, [r3, r2]
}
 8001764:	46c0      	nop			@ (mov r8, r8)
 8001766:	46bd      	mov	sp, r7
 8001768:	b004      	add	sp, #16
 800176a:	bdb0      	pop	{r4, r5, r7, pc}

0800176c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2242      	movs	r2, #66	@ 0x42
 8001780:	2100      	movs	r1, #0
 8001782:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001784:	68fa      	ldr	r2, [r7, #12]
 8001786:	2380      	movs	r3, #128	@ 0x80
 8001788:	01db      	lsls	r3, r3, #7
 800178a:	4013      	ands	r3, r2
 800178c:	d008      	beq.n	80017a0 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4924      	ldr	r1, [pc, #144]	@ (800182c <I2C_ITSlaveSeqCplt+0xc0>)
 800179a:	400a      	ands	r2, r1
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	e00c      	b.n	80017ba <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	2380      	movs	r3, #128	@ 0x80
 80017a4:	021b      	lsls	r3, r3, #8
 80017a6:	4013      	ands	r3, r2
 80017a8:	d007      	beq.n	80017ba <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	491e      	ldr	r1, [pc, #120]	@ (8001830 <I2C_ITSlaveSeqCplt+0xc4>)
 80017b6:	400a      	ands	r2, r1
 80017b8:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2241      	movs	r2, #65	@ 0x41
 80017be:	5c9b      	ldrb	r3, [r3, r2]
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b29      	cmp	r3, #41	@ 0x29
 80017c4:	d114      	bne.n	80017f0 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2241      	movs	r2, #65	@ 0x41
 80017ca:	2128      	movs	r1, #40	@ 0x28
 80017cc:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2221      	movs	r2, #33	@ 0x21
 80017d2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2101      	movs	r1, #1
 80017d8:	0018      	movs	r0, r3
 80017da:	f000 fb1f 	bl	8001e1c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2240      	movs	r2, #64	@ 0x40
 80017e2:	2100      	movs	r1, #0
 80017e4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	0018      	movs	r0, r3
 80017ea:	f7ff fde2 	bl	80013b2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80017ee:	e019      	b.n	8001824 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2241      	movs	r2, #65	@ 0x41
 80017f4:	5c9b      	ldrb	r3, [r3, r2]
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80017fa:	d113      	bne.n	8001824 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2241      	movs	r2, #65	@ 0x41
 8001800:	2128      	movs	r1, #40	@ 0x28
 8001802:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2222      	movs	r2, #34	@ 0x22
 8001808:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2102      	movs	r1, #2
 800180e:	0018      	movs	r0, r3
 8001810:	f000 fb04 	bl	8001e1c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2240      	movs	r2, #64	@ 0x40
 8001818:	2100      	movs	r1, #0
 800181a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	0018      	movs	r0, r3
 8001820:	f7ff fdcf 	bl	80013c2 <HAL_I2C_SlaveRxCpltCallback>
}
 8001824:	46c0      	nop			@ (mov r8, r8)
 8001826:	46bd      	mov	sp, r7
 8001828:	b004      	add	sp, #16
 800182a:	bd80      	pop	{r7, pc}
 800182c:	ffffbfff 	.word	0xffffbfff
 8001830:	ffff7fff 	.word	0xffff7fff

08001834 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800184a:	200f      	movs	r0, #15
 800184c:	183b      	adds	r3, r7, r0
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	2141      	movs	r1, #65	@ 0x41
 8001852:	5c52      	ldrb	r2, [r2, r1]
 8001854:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2220      	movs	r2, #32
 800185c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800185e:	183b      	adds	r3, r7, r0
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b21      	cmp	r3, #33	@ 0x21
 8001864:	d003      	beq.n	800186e <I2C_ITSlaveCplt+0x3a>
 8001866:	183b      	adds	r3, r7, r0
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b29      	cmp	r3, #41	@ 0x29
 800186c:	d109      	bne.n	8001882 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800186e:	4a82      	ldr	r2, [pc, #520]	@ (8001a78 <I2C_ITSlaveCplt+0x244>)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	0011      	movs	r1, r2
 8001874:	0018      	movs	r0, r3
 8001876:	f000 fad1 	bl	8001e1c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2221      	movs	r2, #33	@ 0x21
 800187e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001880:	e020      	b.n	80018c4 <I2C_ITSlaveCplt+0x90>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001882:	220f      	movs	r2, #15
 8001884:	18bb      	adds	r3, r7, r2
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b22      	cmp	r3, #34	@ 0x22
 800188a:	d003      	beq.n	8001894 <I2C_ITSlaveCplt+0x60>
 800188c:	18bb      	adds	r3, r7, r2
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b2a      	cmp	r3, #42	@ 0x2a
 8001892:	d109      	bne.n	80018a8 <I2C_ITSlaveCplt+0x74>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001894:	4a79      	ldr	r2, [pc, #484]	@ (8001a7c <I2C_ITSlaveCplt+0x248>)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	0011      	movs	r1, r2
 800189a:	0018      	movs	r0, r3
 800189c:	f000 fabe 	bl	8001e1c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2222      	movs	r2, #34	@ 0x22
 80018a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80018a6:	e00d      	b.n	80018c4 <I2C_ITSlaveCplt+0x90>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80018a8:	230f      	movs	r3, #15
 80018aa:	18fb      	adds	r3, r7, r3
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b28      	cmp	r3, #40	@ 0x28
 80018b0:	d108      	bne.n	80018c4 <I2C_ITSlaveCplt+0x90>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80018b2:	4a73      	ldr	r2, [pc, #460]	@ (8001a80 <I2C_ITSlaveCplt+0x24c>)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	0011      	movs	r1, r2
 80018b8:	0018      	movs	r0, r3
 80018ba:	f000 faaf 	bl	8001e1c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	685a      	ldr	r2, [r3, #4]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2180      	movs	r1, #128	@ 0x80
 80018d0:	0209      	lsls	r1, r1, #8
 80018d2:	430a      	orrs	r2, r1
 80018d4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4968      	ldr	r1, [pc, #416]	@ (8001a84 <I2C_ITSlaveCplt+0x250>)
 80018e2:	400a      	ands	r2, r1
 80018e4:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	0018      	movs	r0, r3
 80018ea:	f000 fa56 	bl	8001d9a <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	2380      	movs	r3, #128	@ 0x80
 80018f2:	01db      	lsls	r3, r3, #7
 80018f4:	4013      	ands	r3, r2
 80018f6:	d013      	beq.n	8001920 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4961      	ldr	r1, [pc, #388]	@ (8001a88 <I2C_ITSlaveCplt+0x254>)
 8001904:	400a      	ands	r2, r1
 8001906:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800190c:	2b00      	cmp	r3, #0
 800190e:	d01f      	beq.n	8001950 <I2C_ITSlaveCplt+0x11c>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	b29a      	uxth	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800191e:	e017      	b.n	8001950 <I2C_ITSlaveCplt+0x11c>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	2380      	movs	r3, #128	@ 0x80
 8001924:	021b      	lsls	r3, r3, #8
 8001926:	4013      	ands	r3, r2
 8001928:	d012      	beq.n	8001950 <I2C_ITSlaveCplt+0x11c>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4955      	ldr	r1, [pc, #340]	@ (8001a8c <I2C_ITSlaveCplt+0x258>)
 8001936:	400a      	ands	r2, r1
 8001938:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800193e:	2b00      	cmp	r3, #0
 8001940:	d006      	beq.n	8001950 <I2C_ITSlaveCplt+0x11c>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	b29a      	uxth	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	2204      	movs	r2, #4
 8001954:	4013      	ands	r3, r2
 8001956:	d020      	beq.n	800199a <I2C_ITSlaveCplt+0x166>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	2204      	movs	r2, #4
 800195c:	4393      	bics	r3, r2
 800195e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001972:	1c5a      	adds	r2, r3, #1
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800197c:	2b00      	cmp	r3, #0
 800197e:	d00c      	beq.n	800199a <I2C_ITSlaveCplt+0x166>
    {
      hi2c->XferSize--;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001984:	3b01      	subs	r3, #1
 8001986:	b29a      	uxth	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001990:	b29b      	uxth	r3, r3
 8001992:	3b01      	subs	r3, #1
 8001994:	b29a      	uxth	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800199e:	b29b      	uxth	r3, r3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d005      	beq.n	80019b0 <I2C_ITSlaveCplt+0x17c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a8:	2204      	movs	r2, #4
 80019aa:	431a      	orrs	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2242      	movs	r2, #66	@ 0x42
 80019b4:	2100      	movs	r1, #0
 80019b6:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d013      	beq.n	80019ee <I2C_ITSlaveCplt+0x1ba>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	0011      	movs	r1, r2
 80019ce:	0018      	movs	r0, r3
 80019d0:	f000 f8b8 	bl	8001b44 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2241      	movs	r2, #65	@ 0x41
 80019d8:	5c9b      	ldrb	r3, [r3, r2]
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b28      	cmp	r3, #40	@ 0x28
 80019de:	d147      	bne.n	8001a70 <I2C_ITSlaveCplt+0x23c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	0011      	movs	r1, r2
 80019e6:	0018      	movs	r0, r3
 80019e8:	f000 f854 	bl	8001a94 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80019ec:	e040      	b.n	8001a70 <I2C_ITSlaveCplt+0x23c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f2:	4a27      	ldr	r2, [pc, #156]	@ (8001a90 <I2C_ITSlaveCplt+0x25c>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d016      	beq.n	8001a26 <I2C_ITSlaveCplt+0x1f2>
    I2C_ITSlaveSeqCplt(hi2c);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	0018      	movs	r0, r3
 80019fc:	f7ff feb6 	bl	800176c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a23      	ldr	r2, [pc, #140]	@ (8001a90 <I2C_ITSlaveCplt+0x25c>)
 8001a04:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2241      	movs	r2, #65	@ 0x41
 8001a0a:	2120      	movs	r1, #32
 8001a0c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2240      	movs	r2, #64	@ 0x40
 8001a18:	2100      	movs	r1, #0
 8001a1a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	0018      	movs	r0, r3
 8001a20:	f7ff fce7 	bl	80013f2 <HAL_I2C_ListenCpltCallback>
}
 8001a24:	e024      	b.n	8001a70 <I2C_ITSlaveCplt+0x23c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2241      	movs	r2, #65	@ 0x41
 8001a2a:	5c9b      	ldrb	r3, [r3, r2]
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b22      	cmp	r3, #34	@ 0x22
 8001a30:	d10f      	bne.n	8001a52 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2241      	movs	r2, #65	@ 0x41
 8001a36:	2120      	movs	r1, #32
 8001a38:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2240      	movs	r2, #64	@ 0x40
 8001a44:	2100      	movs	r1, #0
 8001a46:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	f7ff fcb9 	bl	80013c2 <HAL_I2C_SlaveRxCpltCallback>
}
 8001a50:	e00e      	b.n	8001a70 <I2C_ITSlaveCplt+0x23c>
    hi2c->State = HAL_I2C_STATE_READY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2241      	movs	r2, #65	@ 0x41
 8001a56:	2120      	movs	r1, #32
 8001a58:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2240      	movs	r2, #64	@ 0x40
 8001a64:	2100      	movs	r1, #0
 8001a66:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	f7ff fca1 	bl	80013b2 <HAL_I2C_SlaveTxCpltCallback>
}
 8001a70:	46c0      	nop			@ (mov r8, r8)
 8001a72:	46bd      	mov	sp, r7
 8001a74:	b006      	add	sp, #24
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	00008001 	.word	0x00008001
 8001a7c:	00008002 	.word	0x00008002
 8001a80:	00008003 	.word	0x00008003
 8001a84:	fe00e800 	.word	0xfe00e800
 8001a88:	ffffbfff 	.word	0xffffbfff
 8001a8c:	ffff7fff 	.word	0xffff7fff
 8001a90:	ffff0000 	.word	0xffff0000

08001a94 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a26      	ldr	r2, [pc, #152]	@ (8001b3c <I2C_ITListenCplt+0xa8>)
 8001aa2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2241      	movs	r2, #65	@ 0x41
 8001aae:	2120      	movs	r1, #32
 8001ab0:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2242      	movs	r2, #66	@ 0x42
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	2204      	movs	r2, #4
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d022      	beq.n	8001b0e <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ada:	1c5a      	adds	r2, r3, #1
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d012      	beq.n	8001b0e <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aec:	3b01      	subs	r3, #1
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	3b01      	subs	r3, #1
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b06:	2204      	movs	r2, #4
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001b0e:	4a0c      	ldr	r2, [pc, #48]	@ (8001b40 <I2C_ITListenCplt+0xac>)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	0011      	movs	r1, r2
 8001b14:	0018      	movs	r0, r3
 8001b16:	f000 f981 	bl	8001e1c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2210      	movs	r2, #16
 8001b20:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2240      	movs	r2, #64	@ 0x40
 8001b26:	2100      	movs	r1, #0
 8001b28:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	f7ff fc60 	bl	80013f2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8001b32:	46c0      	nop			@ (mov r8, r8)
 8001b34:	46bd      	mov	sp, r7
 8001b36:	b002      	add	sp, #8
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	46c0      	nop			@ (mov r8, r8)
 8001b3c:	ffff0000 	.word	0xffff0000
 8001b40:	00008003 	.word	0x00008003

08001b44 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001b4e:	200f      	movs	r0, #15
 8001b50:	183b      	adds	r3, r7, r0
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	2141      	movs	r1, #65	@ 0x41
 8001b56:	5c52      	ldrb	r2, [r2, r1]
 8001b58:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2242      	movs	r2, #66	@ 0x42
 8001b5e:	2100      	movs	r1, #0
 8001b60:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a72      	ldr	r2, [pc, #456]	@ (8001d30 <I2C_ITError+0x1ec>)
 8001b66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	431a      	orrs	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001b7a:	183b      	adds	r3, r7, r0
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b28      	cmp	r3, #40	@ 0x28
 8001b80:	d007      	beq.n	8001b92 <I2C_ITError+0x4e>
 8001b82:	183b      	adds	r3, r7, r0
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b29      	cmp	r3, #41	@ 0x29
 8001b88:	d003      	beq.n	8001b92 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001b8a:	183b      	adds	r3, r7, r0
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b90:	d10c      	bne.n	8001bac <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2103      	movs	r1, #3
 8001b96:	0018      	movs	r0, r3
 8001b98:	f000 f940 	bl	8001e1c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2241      	movs	r2, #65	@ 0x41
 8001ba0:	2128      	movs	r1, #40	@ 0x28
 8001ba2:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4a63      	ldr	r2, [pc, #396]	@ (8001d34 <I2C_ITError+0x1f0>)
 8001ba8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001baa:	e032      	b.n	8001c12 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001bac:	4a62      	ldr	r2, [pc, #392]	@ (8001d38 <I2C_ITError+0x1f4>)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	0011      	movs	r1, r2
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	f000 f932 	bl	8001e1c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	0018      	movs	r0, r3
 8001bbc:	f000 f8ed 	bl	8001d9a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2241      	movs	r2, #65	@ 0x41
 8001bc4:	5c9b      	ldrb	r3, [r3, r2]
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b60      	cmp	r3, #96	@ 0x60
 8001bca:	d01f      	beq.n	8001c0c <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2241      	movs	r2, #65	@ 0x41
 8001bd0:	2120      	movs	r1, #32
 8001bd2:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	2220      	movs	r2, #32
 8001bdc:	4013      	ands	r3, r2
 8001bde:	2b20      	cmp	r3, #32
 8001be0:	d114      	bne.n	8001c0c <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	2210      	movs	r2, #16
 8001bea:	4013      	ands	r3, r2
 8001bec:	2b10      	cmp	r3, #16
 8001bee:	d109      	bne.n	8001c04 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2210      	movs	r2, #16
 8001bf6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bfc:	2204      	movs	r2, #4
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2220      	movs	r2, #32
 8001c0a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c16:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d03b      	beq.n	8001c98 <I2C_ITError+0x154>
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	2b11      	cmp	r3, #17
 8001c24:	d002      	beq.n	8001c2c <I2C_ITError+0xe8>
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	2b21      	cmp	r3, #33	@ 0x21
 8001c2a:	d135      	bne.n	8001c98 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	2380      	movs	r3, #128	@ 0x80
 8001c34:	01db      	lsls	r3, r3, #7
 8001c36:	401a      	ands	r2, r3
 8001c38:	2380      	movs	r3, #128	@ 0x80
 8001c3a:	01db      	lsls	r3, r3, #7
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d107      	bne.n	8001c50 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	493c      	ldr	r1, [pc, #240]	@ (8001d3c <I2C_ITError+0x1f8>)
 8001c4c:	400a      	ands	r2, r1
 8001c4e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c54:	0018      	movs	r0, r3
 8001c56:	f7ff f8dd 	bl	8000e14 <HAL_DMA_GetState>
 8001c5a:	0003      	movs	r3, r0
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d016      	beq.n	8001c8e <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c64:	4a36      	ldr	r2, [pc, #216]	@ (8001d40 <I2C_ITError+0x1fc>)
 8001c66:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2240      	movs	r2, #64	@ 0x40
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c74:	0018      	movs	r0, r3
 8001c76:	f7ff f853 	bl	8000d20 <HAL_DMA_Abort_IT>
 8001c7a:	1e03      	subs	r3, r0, #0
 8001c7c:	d051      	beq.n	8001d22 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c88:	0018      	movs	r0, r3
 8001c8a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001c8c:	e049      	b.n	8001d22 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	0018      	movs	r0, r3
 8001c92:	f000 f859 	bl	8001d48 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001c96:	e044      	b.n	8001d22 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d03b      	beq.n	8001d18 <I2C_ITError+0x1d4>
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	2b12      	cmp	r3, #18
 8001ca4:	d002      	beq.n	8001cac <I2C_ITError+0x168>
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	2b22      	cmp	r3, #34	@ 0x22
 8001caa:	d135      	bne.n	8001d18 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	2380      	movs	r3, #128	@ 0x80
 8001cb4:	021b      	lsls	r3, r3, #8
 8001cb6:	401a      	ands	r2, r3
 8001cb8:	2380      	movs	r3, #128	@ 0x80
 8001cba:	021b      	lsls	r3, r3, #8
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d107      	bne.n	8001cd0 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	491e      	ldr	r1, [pc, #120]	@ (8001d44 <I2C_ITError+0x200>)
 8001ccc:	400a      	ands	r2, r1
 8001cce:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f7ff f89d 	bl	8000e14 <HAL_DMA_GetState>
 8001cda:	0003      	movs	r3, r0
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d016      	beq.n	8001d0e <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ce4:	4a16      	ldr	r2, [pc, #88]	@ (8001d40 <I2C_ITError+0x1fc>)
 8001ce6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2240      	movs	r2, #64	@ 0x40
 8001cec:	2100      	movs	r1, #0
 8001cee:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	f7ff f813 	bl	8000d20 <HAL_DMA_Abort_IT>
 8001cfa:	1e03      	subs	r3, r0, #0
 8001cfc:	d013      	beq.n	8001d26 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d08:	0018      	movs	r0, r3
 8001d0a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001d0c:	e00b      	b.n	8001d26 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	0018      	movs	r0, r3
 8001d12:	f000 f819 	bl	8001d48 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001d16:	e006      	b.n	8001d26 <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	f000 f814 	bl	8001d48 <I2C_TreatErrorCallback>
  }
}
 8001d20:	e002      	b.n	8001d28 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001d22:	46c0      	nop			@ (mov r8, r8)
 8001d24:	e000      	b.n	8001d28 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001d26:	46c0      	nop			@ (mov r8, r8)
}
 8001d28:	46c0      	nop			@ (mov r8, r8)
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	b004      	add	sp, #16
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	ffff0000 	.word	0xffff0000
 8001d34:	08001425 	.word	0x08001425
 8001d38:	00008003 	.word	0x00008003
 8001d3c:	ffffbfff 	.word	0xffffbfff
 8001d40:	08001ddf 	.word	0x08001ddf
 8001d44:	ffff7fff 	.word	0xffff7fff

08001d48 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2241      	movs	r2, #65	@ 0x41
 8001d54:	5c9b      	ldrb	r3, [r3, r2]
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b60      	cmp	r3, #96	@ 0x60
 8001d5a:	d10f      	bne.n	8001d7c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2241      	movs	r2, #65	@ 0x41
 8001d60:	2120      	movs	r1, #32
 8001d62:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2240      	movs	r2, #64	@ 0x40
 8001d6e:	2100      	movs	r1, #0
 8001d70:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	0018      	movs	r0, r3
 8001d76:	f7ff fb4c 	bl	8001412 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001d7a:	e00a      	b.n	8001d92 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2240      	movs	r2, #64	@ 0x40
 8001d86:	2100      	movs	r1, #0
 8001d88:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f7ff fb38 	bl	8001402 <HAL_I2C_ErrorCallback>
}
 8001d92:	46c0      	nop			@ (mov r8, r8)
 8001d94:	46bd      	mov	sp, r7
 8001d96:	b002      	add	sp, #8
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	2202      	movs	r2, #2
 8001daa:	4013      	ands	r3, r2
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d103      	bne.n	8001db8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2200      	movs	r2, #0
 8001db6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d007      	beq.n	8001dd6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	699a      	ldr	r2, [r3, #24]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	619a      	str	r2, [r3, #24]
  }
}
 8001dd6:	46c0      	nop			@ (mov r8, r8)
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	b002      	add	sp, #8
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b084      	sub	sp, #16
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dea:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d003      	beq.n	8001dfc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001df8:	2200      	movs	r2, #0
 8001dfa:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e08:	2200      	movs	r2, #0
 8001e0a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	0018      	movs	r0, r3
 8001e10:	f7ff ff9a 	bl	8001d48 <I2C_TreatErrorCallback>
}
 8001e14:	46c0      	nop			@ (mov r8, r8)
 8001e16:	46bd      	mov	sp, r7
 8001e18:	b004      	add	sp, #16
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	000a      	movs	r2, r1
 8001e26:	1cbb      	adds	r3, r7, #2
 8001e28:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8001e2e:	1cbb      	adds	r3, r7, #2
 8001e30:	881b      	ldrh	r3, [r3, #0]
 8001e32:	2201      	movs	r2, #1
 8001e34:	4013      	ands	r3, r2
 8001e36:	d010      	beq.n	8001e5a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2242      	movs	r2, #66	@ 0x42
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2241      	movs	r2, #65	@ 0x41
 8001e44:	5c9b      	ldrb	r3, [r3, r2]
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	001a      	movs	r2, r3
 8001e4a:	2328      	movs	r3, #40	@ 0x28
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	2b28      	cmp	r3, #40	@ 0x28
 8001e50:	d003      	beq.n	8001e5a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	22b0      	movs	r2, #176	@ 0xb0
 8001e56:	4313      	orrs	r3, r2
 8001e58:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8001e5a:	1cbb      	adds	r3, r7, #2
 8001e5c:	881b      	ldrh	r3, [r3, #0]
 8001e5e:	2202      	movs	r2, #2
 8001e60:	4013      	ands	r3, r2
 8001e62:	d010      	beq.n	8001e86 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2244      	movs	r2, #68	@ 0x44
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2241      	movs	r2, #65	@ 0x41
 8001e70:	5c9b      	ldrb	r3, [r3, r2]
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	001a      	movs	r2, r3
 8001e76:	2328      	movs	r3, #40	@ 0x28
 8001e78:	4013      	ands	r3, r2
 8001e7a:	2b28      	cmp	r3, #40	@ 0x28
 8001e7c:	d003      	beq.n	8001e86 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	22b0      	movs	r2, #176	@ 0xb0
 8001e82:	4313      	orrs	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8001e86:	1cbb      	adds	r3, r7, #2
 8001e88:	2200      	movs	r2, #0
 8001e8a:	5e9b      	ldrsh	r3, [r3, r2]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	da03      	bge.n	8001e98 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	22b8      	movs	r2, #184	@ 0xb8
 8001e94:	4313      	orrs	r3, r2
 8001e96:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8001e98:	1cbb      	adds	r3, r7, #2
 8001e9a:	881b      	ldrh	r3, [r3, #0]
 8001e9c:	2b10      	cmp	r3, #16
 8001e9e:	d103      	bne.n	8001ea8 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2290      	movs	r2, #144	@ 0x90
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8001ea8:	1cbb      	adds	r3, r7, #2
 8001eaa:	881b      	ldrh	r3, [r3, #0]
 8001eac:	2b20      	cmp	r3, #32
 8001eae:	d103      	bne.n	8001eb8 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8001eb8:	1cbb      	adds	r3, r7, #2
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	2b40      	cmp	r3, #64	@ 0x40
 8001ebe:	d103      	bne.n	8001ec8 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2240      	movs	r2, #64	@ 0x40
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	43d9      	mvns	r1, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	400a      	ands	r2, r1
 8001ed8:	601a      	str	r2, [r3, #0]
}
 8001eda:	46c0      	nop			@ (mov r8, r8)
 8001edc:	46bd      	mov	sp, r7
 8001ede:	b004      	add	sp, #16
 8001ee0:	bd80      	pop	{r7, pc}
	...

08001ee4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2241      	movs	r2, #65	@ 0x41
 8001ef2:	5c9b      	ldrb	r3, [r3, r2]
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b20      	cmp	r3, #32
 8001ef8:	d138      	bne.n	8001f6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2240      	movs	r2, #64	@ 0x40
 8001efe:	5c9b      	ldrb	r3, [r3, r2]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d101      	bne.n	8001f08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f04:	2302      	movs	r3, #2
 8001f06:	e032      	b.n	8001f6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2240      	movs	r2, #64	@ 0x40
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2241      	movs	r2, #65	@ 0x41
 8001f14:	2124      	movs	r1, #36	@ 0x24
 8001f16:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2101      	movs	r1, #1
 8001f24:	438a      	bics	r2, r1
 8001f26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4911      	ldr	r1, [pc, #68]	@ (8001f78 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001f34:	400a      	ands	r2, r1
 8001f36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6819      	ldr	r1, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2101      	movs	r1, #1
 8001f54:	430a      	orrs	r2, r1
 8001f56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2241      	movs	r2, #65	@ 0x41
 8001f5c:	2120      	movs	r1, #32
 8001f5e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2240      	movs	r2, #64	@ 0x40
 8001f64:	2100      	movs	r1, #0
 8001f66:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	e000      	b.n	8001f6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f6c:	2302      	movs	r3, #2
  }
}
 8001f6e:	0018      	movs	r0, r3
 8001f70:	46bd      	mov	sp, r7
 8001f72:	b002      	add	sp, #8
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	46c0      	nop			@ (mov r8, r8)
 8001f78:	ffffefff 	.word	0xffffefff

08001f7c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2241      	movs	r2, #65	@ 0x41
 8001f8a:	5c9b      	ldrb	r3, [r3, r2]
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b20      	cmp	r3, #32
 8001f90:	d139      	bne.n	8002006 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2240      	movs	r2, #64	@ 0x40
 8001f96:	5c9b      	ldrb	r3, [r3, r2]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d101      	bne.n	8001fa0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	e033      	b.n	8002008 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2240      	movs	r2, #64	@ 0x40
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2241      	movs	r2, #65	@ 0x41
 8001fac:	2124      	movs	r1, #36	@ 0x24
 8001fae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2101      	movs	r1, #1
 8001fbc:	438a      	bics	r2, r1
 8001fbe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4a11      	ldr	r2, [pc, #68]	@ (8002010 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	021b      	lsls	r3, r3, #8
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2101      	movs	r1, #1
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2241      	movs	r2, #65	@ 0x41
 8001ff6:	2120      	movs	r1, #32
 8001ff8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2240      	movs	r2, #64	@ 0x40
 8001ffe:	2100      	movs	r1, #0
 8002000:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002002:	2300      	movs	r3, #0
 8002004:	e000      	b.n	8002008 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002006:	2302      	movs	r3, #2
  }
}
 8002008:	0018      	movs	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	b004      	add	sp, #16
 800200e:	bd80      	pop	{r7, pc}
 8002010:	fffff0ff 	.word	0xfffff0ff

08002014 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e1d0      	b.n	80023c8 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2201      	movs	r2, #1
 800202c:	4013      	ands	r3, r2
 800202e:	d100      	bne.n	8002032 <HAL_RCC_OscConfig+0x1e>
 8002030:	e069      	b.n	8002106 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002032:	4bc8      	ldr	r3, [pc, #800]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	2238      	movs	r2, #56	@ 0x38
 8002038:	4013      	ands	r3, r2
 800203a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	2b08      	cmp	r3, #8
 8002040:	d105      	bne.n	800204e <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d15d      	bne.n	8002106 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e1bc      	b.n	80023c8 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	2380      	movs	r3, #128	@ 0x80
 8002054:	025b      	lsls	r3, r3, #9
 8002056:	429a      	cmp	r2, r3
 8002058:	d107      	bne.n	800206a <HAL_RCC_OscConfig+0x56>
 800205a:	4bbe      	ldr	r3, [pc, #760]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	4bbd      	ldr	r3, [pc, #756]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 8002060:	2180      	movs	r1, #128	@ 0x80
 8002062:	0249      	lsls	r1, r1, #9
 8002064:	430a      	orrs	r2, r1
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	e020      	b.n	80020ac <HAL_RCC_OscConfig+0x98>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	23a0      	movs	r3, #160	@ 0xa0
 8002070:	02db      	lsls	r3, r3, #11
 8002072:	429a      	cmp	r2, r3
 8002074:	d10e      	bne.n	8002094 <HAL_RCC_OscConfig+0x80>
 8002076:	4bb7      	ldr	r3, [pc, #732]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	4bb6      	ldr	r3, [pc, #728]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 800207c:	2180      	movs	r1, #128	@ 0x80
 800207e:	02c9      	lsls	r1, r1, #11
 8002080:	430a      	orrs	r2, r1
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	4bb3      	ldr	r3, [pc, #716]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	4bb2      	ldr	r3, [pc, #712]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 800208a:	2180      	movs	r1, #128	@ 0x80
 800208c:	0249      	lsls	r1, r1, #9
 800208e:	430a      	orrs	r2, r1
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	e00b      	b.n	80020ac <HAL_RCC_OscConfig+0x98>
 8002094:	4baf      	ldr	r3, [pc, #700]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4bae      	ldr	r3, [pc, #696]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 800209a:	49af      	ldr	r1, [pc, #700]	@ (8002358 <HAL_RCC_OscConfig+0x344>)
 800209c:	400a      	ands	r2, r1
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	4bac      	ldr	r3, [pc, #688]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	4bab      	ldr	r3, [pc, #684]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 80020a6:	49ad      	ldr	r1, [pc, #692]	@ (800235c <HAL_RCC_OscConfig+0x348>)
 80020a8:	400a      	ands	r2, r1
 80020aa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d014      	beq.n	80020de <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b4:	f7fe fcc6 	bl	8000a44 <HAL_GetTick>
 80020b8:	0003      	movs	r3, r0
 80020ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020bc:	e008      	b.n	80020d0 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80020be:	f7fe fcc1 	bl	8000a44 <HAL_GetTick>
 80020c2:	0002      	movs	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b64      	cmp	r3, #100	@ 0x64
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e17b      	b.n	80023c8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020d0:	4ba0      	ldr	r3, [pc, #640]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	2380      	movs	r3, #128	@ 0x80
 80020d6:	029b      	lsls	r3, r3, #10
 80020d8:	4013      	ands	r3, r2
 80020da:	d0f0      	beq.n	80020be <HAL_RCC_OscConfig+0xaa>
 80020dc:	e013      	b.n	8002106 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020de:	f7fe fcb1 	bl	8000a44 <HAL_GetTick>
 80020e2:	0003      	movs	r3, r0
 80020e4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80020e8:	f7fe fcac 	bl	8000a44 <HAL_GetTick>
 80020ec:	0002      	movs	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b64      	cmp	r3, #100	@ 0x64
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e166      	b.n	80023c8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020fa:	4b96      	ldr	r3, [pc, #600]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	2380      	movs	r3, #128	@ 0x80
 8002100:	029b      	lsls	r3, r3, #10
 8002102:	4013      	ands	r3, r2
 8002104:	d1f0      	bne.n	80020e8 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2202      	movs	r2, #2
 800210c:	4013      	ands	r3, r2
 800210e:	d100      	bne.n	8002112 <HAL_RCC_OscConfig+0xfe>
 8002110:	e086      	b.n	8002220 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002112:	4b90      	ldr	r3, [pc, #576]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	2238      	movs	r2, #56	@ 0x38
 8002118:	4013      	ands	r3, r2
 800211a:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d12f      	bne.n	8002182 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e14c      	b.n	80023c8 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800212e:	4b89      	ldr	r3, [pc, #548]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	4a8b      	ldr	r2, [pc, #556]	@ (8002360 <HAL_RCC_OscConfig+0x34c>)
 8002134:	4013      	ands	r3, r2
 8002136:	0019      	movs	r1, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	021a      	lsls	r2, r3, #8
 800213e:	4b85      	ldr	r3, [pc, #532]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 8002140:	430a      	orrs	r2, r1
 8002142:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d112      	bne.n	8002170 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800214a:	4b82      	ldr	r3, [pc, #520]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a85      	ldr	r2, [pc, #532]	@ (8002364 <HAL_RCC_OscConfig+0x350>)
 8002150:	4013      	ands	r3, r2
 8002152:	0019      	movs	r1, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	691a      	ldr	r2, [r3, #16]
 8002158:	4b7e      	ldr	r3, [pc, #504]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 800215a:	430a      	orrs	r2, r1
 800215c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800215e:	4b7d      	ldr	r3, [pc, #500]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	0adb      	lsrs	r3, r3, #11
 8002164:	2207      	movs	r2, #7
 8002166:	4013      	ands	r3, r2
 8002168:	4a7f      	ldr	r2, [pc, #508]	@ (8002368 <HAL_RCC_OscConfig+0x354>)
 800216a:	40da      	lsrs	r2, r3
 800216c:	4b7f      	ldr	r3, [pc, #508]	@ (800236c <HAL_RCC_OscConfig+0x358>)
 800216e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002170:	4b7f      	ldr	r3, [pc, #508]	@ (8002370 <HAL_RCC_OscConfig+0x35c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	0018      	movs	r0, r3
 8002176:	f7fe fc09 	bl	800098c <HAL_InitTick>
 800217a:	1e03      	subs	r3, r0, #0
 800217c:	d050      	beq.n	8002220 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e122      	b.n	80023c8 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d030      	beq.n	80021ec <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800218a:	4b72      	ldr	r3, [pc, #456]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a75      	ldr	r2, [pc, #468]	@ (8002364 <HAL_RCC_OscConfig+0x350>)
 8002190:	4013      	ands	r3, r2
 8002192:	0019      	movs	r1, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691a      	ldr	r2, [r3, #16]
 8002198:	4b6e      	ldr	r3, [pc, #440]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 800219a:	430a      	orrs	r2, r1
 800219c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800219e:	4b6d      	ldr	r3, [pc, #436]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	4b6c      	ldr	r3, [pc, #432]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 80021a4:	2180      	movs	r1, #128	@ 0x80
 80021a6:	0049      	lsls	r1, r1, #1
 80021a8:	430a      	orrs	r2, r1
 80021aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ac:	f7fe fc4a 	bl	8000a44 <HAL_GetTick>
 80021b0:	0003      	movs	r3, r0
 80021b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80021b6:	f7fe fc45 	bl	8000a44 <HAL_GetTick>
 80021ba:	0002      	movs	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e0ff      	b.n	80023c8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021c8:	4b62      	ldr	r3, [pc, #392]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	2380      	movs	r3, #128	@ 0x80
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	4013      	ands	r3, r2
 80021d2:	d0f0      	beq.n	80021b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d4:	4b5f      	ldr	r3, [pc, #380]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	4a61      	ldr	r2, [pc, #388]	@ (8002360 <HAL_RCC_OscConfig+0x34c>)
 80021da:	4013      	ands	r3, r2
 80021dc:	0019      	movs	r1, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	021a      	lsls	r2, r3, #8
 80021e4:	4b5b      	ldr	r3, [pc, #364]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 80021e6:	430a      	orrs	r2, r1
 80021e8:	605a      	str	r2, [r3, #4]
 80021ea:	e019      	b.n	8002220 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80021ec:	4b59      	ldr	r3, [pc, #356]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	4b58      	ldr	r3, [pc, #352]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 80021f2:	4960      	ldr	r1, [pc, #384]	@ (8002374 <HAL_RCC_OscConfig+0x360>)
 80021f4:	400a      	ands	r2, r1
 80021f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f8:	f7fe fc24 	bl	8000a44 <HAL_GetTick>
 80021fc:	0003      	movs	r3, r0
 80021fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002202:	f7fe fc1f 	bl	8000a44 <HAL_GetTick>
 8002206:	0002      	movs	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e0d9      	b.n	80023c8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002214:	4b4f      	ldr	r3, [pc, #316]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	2380      	movs	r3, #128	@ 0x80
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	4013      	ands	r3, r2
 800221e:	d1f0      	bne.n	8002202 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2208      	movs	r2, #8
 8002226:	4013      	ands	r3, r2
 8002228:	d042      	beq.n	80022b0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800222a:	4b4a      	ldr	r3, [pc, #296]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	2238      	movs	r2, #56	@ 0x38
 8002230:	4013      	ands	r3, r2
 8002232:	2b18      	cmp	r3, #24
 8002234:	d105      	bne.n	8002242 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d138      	bne.n	80022b0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e0c2      	b.n	80023c8 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d019      	beq.n	800227e <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800224a:	4b42      	ldr	r3, [pc, #264]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 800224c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800224e:	4b41      	ldr	r3, [pc, #260]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 8002250:	2101      	movs	r1, #1
 8002252:	430a      	orrs	r2, r1
 8002254:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002256:	f7fe fbf5 	bl	8000a44 <HAL_GetTick>
 800225a:	0003      	movs	r3, r0
 800225c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002260:	f7fe fbf0 	bl	8000a44 <HAL_GetTick>
 8002264:	0002      	movs	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e0aa      	b.n	80023c8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002272:	4b38      	ldr	r3, [pc, #224]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 8002274:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002276:	2202      	movs	r2, #2
 8002278:	4013      	ands	r3, r2
 800227a:	d0f1      	beq.n	8002260 <HAL_RCC_OscConfig+0x24c>
 800227c:	e018      	b.n	80022b0 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800227e:	4b35      	ldr	r3, [pc, #212]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 8002280:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002282:	4b34      	ldr	r3, [pc, #208]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 8002284:	2101      	movs	r1, #1
 8002286:	438a      	bics	r2, r1
 8002288:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228a:	f7fe fbdb 	bl	8000a44 <HAL_GetTick>
 800228e:	0003      	movs	r3, r0
 8002290:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002294:	f7fe fbd6 	bl	8000a44 <HAL_GetTick>
 8002298:	0002      	movs	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e090      	b.n	80023c8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80022a6:	4b2b      	ldr	r3, [pc, #172]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 80022a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022aa:	2202      	movs	r2, #2
 80022ac:	4013      	ands	r3, r2
 80022ae:	d1f1      	bne.n	8002294 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2204      	movs	r2, #4
 80022b6:	4013      	ands	r3, r2
 80022b8:	d100      	bne.n	80022bc <HAL_RCC_OscConfig+0x2a8>
 80022ba:	e084      	b.n	80023c6 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022bc:	230f      	movs	r3, #15
 80022be:	18fb      	adds	r3, r7, r3
 80022c0:	2200      	movs	r2, #0
 80022c2:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80022c4:	4b23      	ldr	r3, [pc, #140]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	2238      	movs	r2, #56	@ 0x38
 80022ca:	4013      	ands	r3, r2
 80022cc:	2b20      	cmp	r3, #32
 80022ce:	d106      	bne.n	80022de <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d000      	beq.n	80022da <HAL_RCC_OscConfig+0x2c6>
 80022d8:	e075      	b.n	80023c6 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e074      	b.n	80023c8 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d106      	bne.n	80022f4 <HAL_RCC_OscConfig+0x2e0>
 80022e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 80022e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80022ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 80022ec:	2101      	movs	r1, #1
 80022ee:	430a      	orrs	r2, r1
 80022f0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80022f2:	e01c      	b.n	800232e <HAL_RCC_OscConfig+0x31a>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	2b05      	cmp	r3, #5
 80022fa:	d10c      	bne.n	8002316 <HAL_RCC_OscConfig+0x302>
 80022fc:	4b15      	ldr	r3, [pc, #84]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 80022fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002300:	4b14      	ldr	r3, [pc, #80]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 8002302:	2104      	movs	r1, #4
 8002304:	430a      	orrs	r2, r1
 8002306:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002308:	4b12      	ldr	r3, [pc, #72]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 800230a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800230c:	4b11      	ldr	r3, [pc, #68]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 800230e:	2101      	movs	r1, #1
 8002310:	430a      	orrs	r2, r1
 8002312:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002314:	e00b      	b.n	800232e <HAL_RCC_OscConfig+0x31a>
 8002316:	4b0f      	ldr	r3, [pc, #60]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 8002318:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800231a:	4b0e      	ldr	r3, [pc, #56]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 800231c:	2101      	movs	r1, #1
 800231e:	438a      	bics	r2, r1
 8002320:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002322:	4b0c      	ldr	r3, [pc, #48]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 8002324:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002326:	4b0b      	ldr	r3, [pc, #44]	@ (8002354 <HAL_RCC_OscConfig+0x340>)
 8002328:	2104      	movs	r1, #4
 800232a:	438a      	bics	r2, r1
 800232c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d028      	beq.n	8002388 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002336:	f7fe fb85 	bl	8000a44 <HAL_GetTick>
 800233a:	0003      	movs	r3, r0
 800233c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800233e:	e01d      	b.n	800237c <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002340:	f7fe fb80 	bl	8000a44 <HAL_GetTick>
 8002344:	0002      	movs	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	4a0b      	ldr	r2, [pc, #44]	@ (8002378 <HAL_RCC_OscConfig+0x364>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d915      	bls.n	800237c <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e039      	b.n	80023c8 <HAL_RCC_OscConfig+0x3b4>
 8002354:	40021000 	.word	0x40021000
 8002358:	fffeffff 	.word	0xfffeffff
 800235c:	fffbffff 	.word	0xfffbffff
 8002360:	ffff80ff 	.word	0xffff80ff
 8002364:	ffffc7ff 	.word	0xffffc7ff
 8002368:	02dc6c00 	.word	0x02dc6c00
 800236c:	20000014 	.word	0x20000014
 8002370:	20000018 	.word	0x20000018
 8002374:	fffffeff 	.word	0xfffffeff
 8002378:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800237c:	4b14      	ldr	r3, [pc, #80]	@ (80023d0 <HAL_RCC_OscConfig+0x3bc>)
 800237e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002380:	2202      	movs	r2, #2
 8002382:	4013      	ands	r3, r2
 8002384:	d0dc      	beq.n	8002340 <HAL_RCC_OscConfig+0x32c>
 8002386:	e013      	b.n	80023b0 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002388:	f7fe fb5c 	bl	8000a44 <HAL_GetTick>
 800238c:	0003      	movs	r3, r0
 800238e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002390:	e009      	b.n	80023a6 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002392:	f7fe fb57 	bl	8000a44 <HAL_GetTick>
 8002396:	0002      	movs	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	4a0d      	ldr	r2, [pc, #52]	@ (80023d4 <HAL_RCC_OscConfig+0x3c0>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e010      	b.n	80023c8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80023a6:	4b0a      	ldr	r3, [pc, #40]	@ (80023d0 <HAL_RCC_OscConfig+0x3bc>)
 80023a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023aa:	2202      	movs	r2, #2
 80023ac:	4013      	ands	r3, r2
 80023ae:	d1f0      	bne.n	8002392 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80023b0:	230f      	movs	r3, #15
 80023b2:	18fb      	adds	r3, r7, r3
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d105      	bne.n	80023c6 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80023ba:	4b05      	ldr	r3, [pc, #20]	@ (80023d0 <HAL_RCC_OscConfig+0x3bc>)
 80023bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023be:	4b04      	ldr	r3, [pc, #16]	@ (80023d0 <HAL_RCC_OscConfig+0x3bc>)
 80023c0:	4905      	ldr	r1, [pc, #20]	@ (80023d8 <HAL_RCC_OscConfig+0x3c4>)
 80023c2:	400a      	ands	r2, r1
 80023c4:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	0018      	movs	r0, r3
 80023ca:	46bd      	mov	sp, r7
 80023cc:	b006      	add	sp, #24
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40021000 	.word	0x40021000
 80023d4:	00001388 	.word	0x00001388
 80023d8:	efffffff 	.word	0xefffffff

080023dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e0e9      	b.n	80025c4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023f0:	4b76      	ldr	r3, [pc, #472]	@ (80025cc <HAL_RCC_ClockConfig+0x1f0>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2207      	movs	r2, #7
 80023f6:	4013      	ands	r3, r2
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d91e      	bls.n	800243c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fe:	4b73      	ldr	r3, [pc, #460]	@ (80025cc <HAL_RCC_ClockConfig+0x1f0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2207      	movs	r2, #7
 8002404:	4393      	bics	r3, r2
 8002406:	0019      	movs	r1, r3
 8002408:	4b70      	ldr	r3, [pc, #448]	@ (80025cc <HAL_RCC_ClockConfig+0x1f0>)
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	430a      	orrs	r2, r1
 800240e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002410:	f7fe fb18 	bl	8000a44 <HAL_GetTick>
 8002414:	0003      	movs	r3, r0
 8002416:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002418:	e009      	b.n	800242e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800241a:	f7fe fb13 	bl	8000a44 <HAL_GetTick>
 800241e:	0002      	movs	r2, r0
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	4a6a      	ldr	r2, [pc, #424]	@ (80025d0 <HAL_RCC_ClockConfig+0x1f4>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d901      	bls.n	800242e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e0ca      	b.n	80025c4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800242e:	4b67      	ldr	r3, [pc, #412]	@ (80025cc <HAL_RCC_ClockConfig+0x1f0>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2207      	movs	r2, #7
 8002434:	4013      	ands	r3, r2
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	429a      	cmp	r2, r3
 800243a:	d1ee      	bne.n	800241a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2202      	movs	r2, #2
 8002442:	4013      	ands	r3, r2
 8002444:	d017      	beq.n	8002476 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2204      	movs	r2, #4
 800244c:	4013      	ands	r3, r2
 800244e:	d008      	beq.n	8002462 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002450:	4b60      	ldr	r3, [pc, #384]	@ (80025d4 <HAL_RCC_ClockConfig+0x1f8>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	4a60      	ldr	r2, [pc, #384]	@ (80025d8 <HAL_RCC_ClockConfig+0x1fc>)
 8002456:	401a      	ands	r2, r3
 8002458:	4b5e      	ldr	r3, [pc, #376]	@ (80025d4 <HAL_RCC_ClockConfig+0x1f8>)
 800245a:	21b0      	movs	r1, #176	@ 0xb0
 800245c:	0109      	lsls	r1, r1, #4
 800245e:	430a      	orrs	r2, r1
 8002460:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002462:	4b5c      	ldr	r3, [pc, #368]	@ (80025d4 <HAL_RCC_ClockConfig+0x1f8>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	4a5d      	ldr	r2, [pc, #372]	@ (80025dc <HAL_RCC_ClockConfig+0x200>)
 8002468:	4013      	ands	r3, r2
 800246a:	0019      	movs	r1, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68da      	ldr	r2, [r3, #12]
 8002470:	4b58      	ldr	r3, [pc, #352]	@ (80025d4 <HAL_RCC_ClockConfig+0x1f8>)
 8002472:	430a      	orrs	r2, r1
 8002474:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2201      	movs	r2, #1
 800247c:	4013      	ands	r3, r2
 800247e:	d055      	beq.n	800252c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8002480:	4b54      	ldr	r3, [pc, #336]	@ (80025d4 <HAL_RCC_ClockConfig+0x1f8>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	221c      	movs	r2, #28
 8002486:	4393      	bics	r3, r2
 8002488:	0019      	movs	r1, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689a      	ldr	r2, [r3, #8]
 800248e:	4b51      	ldr	r3, [pc, #324]	@ (80025d4 <HAL_RCC_ClockConfig+0x1f8>)
 8002490:	430a      	orrs	r2, r1
 8002492:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d107      	bne.n	80024ac <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800249c:	4b4d      	ldr	r3, [pc, #308]	@ (80025d4 <HAL_RCC_ClockConfig+0x1f8>)
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	2380      	movs	r3, #128	@ 0x80
 80024a2:	029b      	lsls	r3, r3, #10
 80024a4:	4013      	ands	r3, r2
 80024a6:	d11f      	bne.n	80024e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e08b      	b.n	80025c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d107      	bne.n	80024c4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024b4:	4b47      	ldr	r3, [pc, #284]	@ (80025d4 <HAL_RCC_ClockConfig+0x1f8>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	2380      	movs	r3, #128	@ 0x80
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	4013      	ands	r3, r2
 80024be:	d113      	bne.n	80024e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e07f      	b.n	80025c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b03      	cmp	r3, #3
 80024ca:	d106      	bne.n	80024da <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80024cc:	4b41      	ldr	r3, [pc, #260]	@ (80025d4 <HAL_RCC_ClockConfig+0x1f8>)
 80024ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024d0:	2202      	movs	r2, #2
 80024d2:	4013      	ands	r3, r2
 80024d4:	d108      	bne.n	80024e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e074      	b.n	80025c4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80024da:	4b3e      	ldr	r3, [pc, #248]	@ (80025d4 <HAL_RCC_ClockConfig+0x1f8>)
 80024dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024de:	2202      	movs	r2, #2
 80024e0:	4013      	ands	r3, r2
 80024e2:	d101      	bne.n	80024e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e06d      	b.n	80025c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024e8:	4b3a      	ldr	r3, [pc, #232]	@ (80025d4 <HAL_RCC_ClockConfig+0x1f8>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	2207      	movs	r2, #7
 80024ee:	4393      	bics	r3, r2
 80024f0:	0019      	movs	r1, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	4b37      	ldr	r3, [pc, #220]	@ (80025d4 <HAL_RCC_ClockConfig+0x1f8>)
 80024f8:	430a      	orrs	r2, r1
 80024fa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024fc:	f7fe faa2 	bl	8000a44 <HAL_GetTick>
 8002500:	0003      	movs	r3, r0
 8002502:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002504:	e009      	b.n	800251a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002506:	f7fe fa9d 	bl	8000a44 <HAL_GetTick>
 800250a:	0002      	movs	r2, r0
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	4a2f      	ldr	r2, [pc, #188]	@ (80025d0 <HAL_RCC_ClockConfig+0x1f4>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d901      	bls.n	800251a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e054      	b.n	80025c4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800251a:	4b2e      	ldr	r3, [pc, #184]	@ (80025d4 <HAL_RCC_ClockConfig+0x1f8>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2238      	movs	r2, #56	@ 0x38
 8002520:	401a      	ands	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	429a      	cmp	r2, r3
 800252a:	d1ec      	bne.n	8002506 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800252c:	4b27      	ldr	r3, [pc, #156]	@ (80025cc <HAL_RCC_ClockConfig+0x1f0>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2207      	movs	r2, #7
 8002532:	4013      	ands	r3, r2
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	429a      	cmp	r2, r3
 8002538:	d21e      	bcs.n	8002578 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253a:	4b24      	ldr	r3, [pc, #144]	@ (80025cc <HAL_RCC_ClockConfig+0x1f0>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2207      	movs	r2, #7
 8002540:	4393      	bics	r3, r2
 8002542:	0019      	movs	r1, r3
 8002544:	4b21      	ldr	r3, [pc, #132]	@ (80025cc <HAL_RCC_ClockConfig+0x1f0>)
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	430a      	orrs	r2, r1
 800254a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800254c:	f7fe fa7a 	bl	8000a44 <HAL_GetTick>
 8002550:	0003      	movs	r3, r0
 8002552:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002554:	e009      	b.n	800256a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002556:	f7fe fa75 	bl	8000a44 <HAL_GetTick>
 800255a:	0002      	movs	r2, r0
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	4a1b      	ldr	r2, [pc, #108]	@ (80025d0 <HAL_RCC_ClockConfig+0x1f4>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d901      	bls.n	800256a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e02c      	b.n	80025c4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800256a:	4b18      	ldr	r3, [pc, #96]	@ (80025cc <HAL_RCC_ClockConfig+0x1f0>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2207      	movs	r2, #7
 8002570:	4013      	ands	r3, r2
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d1ee      	bne.n	8002556 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2204      	movs	r2, #4
 800257e:	4013      	ands	r3, r2
 8002580:	d009      	beq.n	8002596 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002582:	4b14      	ldr	r3, [pc, #80]	@ (80025d4 <HAL_RCC_ClockConfig+0x1f8>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	4a16      	ldr	r2, [pc, #88]	@ (80025e0 <HAL_RCC_ClockConfig+0x204>)
 8002588:	4013      	ands	r3, r2
 800258a:	0019      	movs	r1, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	691a      	ldr	r2, [r3, #16]
 8002590:	4b10      	ldr	r3, [pc, #64]	@ (80025d4 <HAL_RCC_ClockConfig+0x1f8>)
 8002592:	430a      	orrs	r2, r1
 8002594:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002596:	f000 f82b 	bl	80025f0 <HAL_RCC_GetSysClockFreq>
 800259a:	0001      	movs	r1, r0
 800259c:	4b0d      	ldr	r3, [pc, #52]	@ (80025d4 <HAL_RCC_ClockConfig+0x1f8>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	0a1b      	lsrs	r3, r3, #8
 80025a2:	220f      	movs	r2, #15
 80025a4:	401a      	ands	r2, r3
 80025a6:	4b0f      	ldr	r3, [pc, #60]	@ (80025e4 <HAL_RCC_ClockConfig+0x208>)
 80025a8:	0092      	lsls	r2, r2, #2
 80025aa:	58d3      	ldr	r3, [r2, r3]
 80025ac:	221f      	movs	r2, #31
 80025ae:	4013      	ands	r3, r2
 80025b0:	000a      	movs	r2, r1
 80025b2:	40da      	lsrs	r2, r3
 80025b4:	4b0c      	ldr	r3, [pc, #48]	@ (80025e8 <HAL_RCC_ClockConfig+0x20c>)
 80025b6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80025b8:	4b0c      	ldr	r3, [pc, #48]	@ (80025ec <HAL_RCC_ClockConfig+0x210>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	0018      	movs	r0, r3
 80025be:	f7fe f9e5 	bl	800098c <HAL_InitTick>
 80025c2:	0003      	movs	r3, r0
}
 80025c4:	0018      	movs	r0, r3
 80025c6:	46bd      	mov	sp, r7
 80025c8:	b004      	add	sp, #16
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40022000 	.word	0x40022000
 80025d0:	00001388 	.word	0x00001388
 80025d4:	40021000 	.word	0x40021000
 80025d8:	ffff84ff 	.word	0xffff84ff
 80025dc:	fffff0ff 	.word	0xfffff0ff
 80025e0:	ffff8fff 	.word	0xffff8fff
 80025e4:	08004fe8 	.word	0x08004fe8
 80025e8:	20000014 	.word	0x20000014
 80025ec:	20000018 	.word	0x20000018

080025f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80025f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002668 <HAL_RCC_GetSysClockFreq+0x78>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	2238      	movs	r2, #56	@ 0x38
 80025fc:	4013      	ands	r3, r2
 80025fe:	d10f      	bne.n	8002620 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002600:	4b19      	ldr	r3, [pc, #100]	@ (8002668 <HAL_RCC_GetSysClockFreq+0x78>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	0adb      	lsrs	r3, r3, #11
 8002606:	2207      	movs	r2, #7
 8002608:	4013      	ands	r3, r2
 800260a:	2201      	movs	r2, #1
 800260c:	409a      	lsls	r2, r3
 800260e:	0013      	movs	r3, r2
 8002610:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002612:	6839      	ldr	r1, [r7, #0]
 8002614:	4815      	ldr	r0, [pc, #84]	@ (800266c <HAL_RCC_GetSysClockFreq+0x7c>)
 8002616:	f7fd fd77 	bl	8000108 <__udivsi3>
 800261a:	0003      	movs	r3, r0
 800261c:	607b      	str	r3, [r7, #4]
 800261e:	e01e      	b.n	800265e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002620:	4b11      	ldr	r3, [pc, #68]	@ (8002668 <HAL_RCC_GetSysClockFreq+0x78>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	2238      	movs	r2, #56	@ 0x38
 8002626:	4013      	ands	r3, r2
 8002628:	2b08      	cmp	r3, #8
 800262a:	d102      	bne.n	8002632 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800262c:	4b0f      	ldr	r3, [pc, #60]	@ (800266c <HAL_RCC_GetSysClockFreq+0x7c>)
 800262e:	607b      	str	r3, [r7, #4]
 8002630:	e015      	b.n	800265e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002632:	4b0d      	ldr	r3, [pc, #52]	@ (8002668 <HAL_RCC_GetSysClockFreq+0x78>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	2238      	movs	r2, #56	@ 0x38
 8002638:	4013      	ands	r3, r2
 800263a:	2b20      	cmp	r3, #32
 800263c:	d103      	bne.n	8002646 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800263e:	2380      	movs	r3, #128	@ 0x80
 8002640:	021b      	lsls	r3, r3, #8
 8002642:	607b      	str	r3, [r7, #4]
 8002644:	e00b      	b.n	800265e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002646:	4b08      	ldr	r3, [pc, #32]	@ (8002668 <HAL_RCC_GetSysClockFreq+0x78>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	2238      	movs	r2, #56	@ 0x38
 800264c:	4013      	ands	r3, r2
 800264e:	2b18      	cmp	r3, #24
 8002650:	d103      	bne.n	800265a <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002652:	23fa      	movs	r3, #250	@ 0xfa
 8002654:	01db      	lsls	r3, r3, #7
 8002656:	607b      	str	r3, [r7, #4]
 8002658:	e001      	b.n	800265e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 800265a:	2300      	movs	r3, #0
 800265c:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 800265e:	687b      	ldr	r3, [r7, #4]
}
 8002660:	0018      	movs	r0, r3
 8002662:	46bd      	mov	sp, r7
 8002664:	b002      	add	sp, #8
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40021000 	.word	0x40021000
 800266c:	02dc6c00 	.word	0x02dc6c00

08002670 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002674:	4b02      	ldr	r3, [pc, #8]	@ (8002680 <HAL_RCC_GetHCLKFreq+0x10>)
 8002676:	681b      	ldr	r3, [r3, #0]
}
 8002678:	0018      	movs	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	46c0      	nop			@ (mov r8, r8)
 8002680:	20000014 	.word	0x20000014

08002684 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8002688:	f7ff fff2 	bl	8002670 <HAL_RCC_GetHCLKFreq>
 800268c:	0001      	movs	r1, r0
 800268e:	4b07      	ldr	r3, [pc, #28]	@ (80026ac <HAL_RCC_GetPCLK1Freq+0x28>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	0b1b      	lsrs	r3, r3, #12
 8002694:	2207      	movs	r2, #7
 8002696:	401a      	ands	r2, r3
 8002698:	4b05      	ldr	r3, [pc, #20]	@ (80026b0 <HAL_RCC_GetPCLK1Freq+0x2c>)
 800269a:	0092      	lsls	r2, r2, #2
 800269c:	58d3      	ldr	r3, [r2, r3]
 800269e:	221f      	movs	r2, #31
 80026a0:	4013      	ands	r3, r2
 80026a2:	40d9      	lsrs	r1, r3
 80026a4:	000b      	movs	r3, r1
}
 80026a6:	0018      	movs	r0, r3
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40021000 	.word	0x40021000
 80026b0:	08005028 	.word	0x08005028

080026b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80026bc:	2313      	movs	r3, #19
 80026be:	18fb      	adds	r3, r7, r3
 80026c0:	2200      	movs	r2, #0
 80026c2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026c4:	2312      	movs	r3, #18
 80026c6:	18fb      	adds	r3, r7, r3
 80026c8:	2200      	movs	r2, #0
 80026ca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	2380      	movs	r3, #128	@ 0x80
 80026d2:	029b      	lsls	r3, r3, #10
 80026d4:	4013      	ands	r3, r2
 80026d6:	d100      	bne.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x26>
 80026d8:	e079      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026da:	2011      	movs	r0, #17
 80026dc:	183b      	adds	r3, r7, r0
 80026de:	2200      	movs	r2, #0
 80026e0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026e2:	4b64      	ldr	r3, [pc, #400]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026e6:	2380      	movs	r3, #128	@ 0x80
 80026e8:	055b      	lsls	r3, r3, #21
 80026ea:	4013      	ands	r3, r2
 80026ec:	d110      	bne.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ee:	4b61      	ldr	r3, [pc, #388]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026f2:	4b60      	ldr	r3, [pc, #384]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026f4:	2180      	movs	r1, #128	@ 0x80
 80026f6:	0549      	lsls	r1, r1, #21
 80026f8:	430a      	orrs	r2, r1
 80026fa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80026fc:	4b5d      	ldr	r3, [pc, #372]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002700:	2380      	movs	r3, #128	@ 0x80
 8002702:	055b      	lsls	r3, r3, #21
 8002704:	4013      	ands	r3, r2
 8002706:	60bb      	str	r3, [r7, #8]
 8002708:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800270a:	183b      	adds	r3, r7, r0
 800270c:	2201      	movs	r2, #1
 800270e:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8002710:	4b58      	ldr	r3, [pc, #352]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002712:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002714:	23c0      	movs	r3, #192	@ 0xc0
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	4013      	ands	r3, r2
 800271a:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d019      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	429a      	cmp	r2, r3
 800272a:	d014      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 800272c:	4b51      	ldr	r3, [pc, #324]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800272e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002730:	4a51      	ldr	r2, [pc, #324]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002732:	4013      	ands	r3, r2
 8002734:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002736:	4b4f      	ldr	r3, [pc, #316]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002738:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800273a:	4b4e      	ldr	r3, [pc, #312]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800273c:	2180      	movs	r1, #128	@ 0x80
 800273e:	0249      	lsls	r1, r1, #9
 8002740:	430a      	orrs	r2, r1
 8002742:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002744:	4b4b      	ldr	r3, [pc, #300]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002746:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002748:	4b4a      	ldr	r3, [pc, #296]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800274a:	494c      	ldr	r1, [pc, #304]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800274c:	400a      	ands	r2, r1
 800274e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8002750:	4b48      	ldr	r3, [pc, #288]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	2201      	movs	r2, #1
 800275a:	4013      	ands	r3, r2
 800275c:	d016      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275e:	f7fe f971 	bl	8000a44 <HAL_GetTick>
 8002762:	0003      	movs	r3, r0
 8002764:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002766:	e00c      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002768:	f7fe f96c 	bl	8000a44 <HAL_GetTick>
 800276c:	0002      	movs	r2, r0
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	4a43      	ldr	r2, [pc, #268]	@ (8002880 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d904      	bls.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8002778:	2313      	movs	r3, #19
 800277a:	18fb      	adds	r3, r7, r3
 800277c:	2203      	movs	r2, #3
 800277e:	701a      	strb	r2, [r3, #0]
          break;
 8002780:	e004      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002782:	4b3c      	ldr	r3, [pc, #240]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002784:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002786:	2202      	movs	r2, #2
 8002788:	4013      	ands	r3, r2
 800278a:	d0ed      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 800278c:	2313      	movs	r3, #19
 800278e:	18fb      	adds	r3, r7, r3
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10a      	bne.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002796:	4b37      	ldr	r3, [pc, #220]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800279a:	4a37      	ldr	r2, [pc, #220]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800279c:	4013      	ands	r3, r2
 800279e:	0019      	movs	r1, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	699a      	ldr	r2, [r3, #24]
 80027a4:	4b33      	ldr	r3, [pc, #204]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80027a6:	430a      	orrs	r2, r1
 80027a8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80027aa:	e005      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027ac:	2312      	movs	r3, #18
 80027ae:	18fb      	adds	r3, r7, r3
 80027b0:	2213      	movs	r2, #19
 80027b2:	18ba      	adds	r2, r7, r2
 80027b4:	7812      	ldrb	r2, [r2, #0]
 80027b6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027b8:	2311      	movs	r3, #17
 80027ba:	18fb      	adds	r3, r7, r3
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d105      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c2:	4b2c      	ldr	r3, [pc, #176]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80027c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027c6:	4b2b      	ldr	r3, [pc, #172]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80027c8:	492e      	ldr	r1, [pc, #184]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ca:	400a      	ands	r2, r1
 80027cc:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2201      	movs	r2, #1
 80027d4:	4013      	ands	r3, r2
 80027d6:	d009      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027d8:	4b26      	ldr	r3, [pc, #152]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80027da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027dc:	2203      	movs	r2, #3
 80027de:	4393      	bics	r3, r2
 80027e0:	0019      	movs	r1, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	4b23      	ldr	r3, [pc, #140]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80027e8:	430a      	orrs	r2, r1
 80027ea:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2240      	movs	r2, #64	@ 0x40
 80027f2:	4013      	ands	r3, r2
 80027f4:	d009      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80027f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027fa:	4a23      	ldr	r2, [pc, #140]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80027fc:	4013      	ands	r3, r2
 80027fe:	0019      	movs	r1, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68da      	ldr	r2, [r3, #12]
 8002804:	4b1b      	ldr	r3, [pc, #108]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002806:	430a      	orrs	r2, r1
 8002808:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	2380      	movs	r3, #128	@ 0x80
 8002810:	01db      	lsls	r3, r3, #7
 8002812:	4013      	ands	r3, r2
 8002814:	d008      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002816:	4b17      	ldr	r3, [pc, #92]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	0899      	lsrs	r1, r3, #2
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	695a      	ldr	r2, [r3, #20]
 8002822:	4b14      	ldr	r3, [pc, #80]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002824:	430a      	orrs	r2, r1
 8002826:	655a      	str	r2, [r3, #84]	@ 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	2380      	movs	r3, #128	@ 0x80
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	4013      	ands	r3, r2
 8002832:	d009      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002834:	4b0f      	ldr	r3, [pc, #60]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002838:	4a14      	ldr	r2, [pc, #80]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800283a:	4013      	ands	r3, r2
 800283c:	0019      	movs	r1, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	691a      	ldr	r2, [r3, #16]
 8002842:	4b0c      	ldr	r3, [pc, #48]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002844:	430a      	orrs	r2, r1
 8002846:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	da09      	bge.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8002850:	4b08      	ldr	r3, [pc, #32]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	22e0      	movs	r2, #224	@ 0xe0
 8002856:	4393      	bics	r3, r2
 8002858:	0019      	movs	r1, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	4b05      	ldr	r3, [pc, #20]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002860:	430a      	orrs	r2, r1
 8002862:	601a      	str	r2, [r3, #0]
  }
  return status;
 8002864:	2312      	movs	r3, #18
 8002866:	18fb      	adds	r3, r7, r3
 8002868:	781b      	ldrb	r3, [r3, #0]
}
 800286a:	0018      	movs	r0, r3
 800286c:	46bd      	mov	sp, r7
 800286e:	b006      	add	sp, #24
 8002870:	bd80      	pop	{r7, pc}
 8002872:	46c0      	nop			@ (mov r8, r8)
 8002874:	40021000 	.word	0x40021000
 8002878:	fffffcff 	.word	0xfffffcff
 800287c:	fffeffff 	.word	0xfffeffff
 8002880:	00001388 	.word	0x00001388
 8002884:	efffffff 	.word	0xefffffff
 8002888:	ffffcfff 	.word	0xffffcfff
 800288c:	ffff3fff 	.word	0xffff3fff

08002890 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e046      	b.n	8002930 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2288      	movs	r2, #136	@ 0x88
 80028a6:	589b      	ldr	r3, [r3, r2]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d107      	bne.n	80028bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2284      	movs	r2, #132	@ 0x84
 80028b0:	2100      	movs	r1, #0
 80028b2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	0018      	movs	r0, r3
 80028b8:	f7fd ffd6 	bl	8000868 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2288      	movs	r2, #136	@ 0x88
 80028c0:	2124      	movs	r1, #36	@ 0x24
 80028c2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2101      	movs	r1, #1
 80028d0:	438a      	bics	r2, r1
 80028d2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d003      	beq.n	80028e4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	0018      	movs	r0, r3
 80028e0:	f000 fde8 	bl	80034b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	0018      	movs	r0, r3
 80028e8:	f000 fc66 	bl	80031b8 <UART_SetConfig>
 80028ec:	0003      	movs	r3, r0
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d101      	bne.n	80028f6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e01c      	b.n	8002930 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	490d      	ldr	r1, [pc, #52]	@ (8002938 <HAL_UART_Init+0xa8>)
 8002902:	400a      	ands	r2, r1
 8002904:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	212a      	movs	r1, #42	@ 0x2a
 8002912:	438a      	bics	r2, r1
 8002914:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2101      	movs	r1, #1
 8002922:	430a      	orrs	r2, r1
 8002924:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	0018      	movs	r0, r3
 800292a:	f000 fe77 	bl	800361c <UART_CheckIdleState>
 800292e:	0003      	movs	r3, r0
}
 8002930:	0018      	movs	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	b002      	add	sp, #8
 8002936:	bd80      	pop	{r7, pc}
 8002938:	ffffb7ff 	.word	0xffffb7ff

0800293c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b08a      	sub	sp, #40	@ 0x28
 8002940:	af02      	add	r7, sp, #8
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	1dbb      	adds	r3, r7, #6
 800294a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2288      	movs	r2, #136	@ 0x88
 8002950:	589b      	ldr	r3, [r3, r2]
 8002952:	2b20      	cmp	r3, #32
 8002954:	d000      	beq.n	8002958 <HAL_UART_Transmit+0x1c>
 8002956:	e090      	b.n	8002a7a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_UART_Transmit+0x2a>
 800295e:	1dbb      	adds	r3, r7, #6
 8002960:	881b      	ldrh	r3, [r3, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e088      	b.n	8002a7c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	689a      	ldr	r2, [r3, #8]
 800296e:	2380      	movs	r3, #128	@ 0x80
 8002970:	015b      	lsls	r3, r3, #5
 8002972:	429a      	cmp	r2, r3
 8002974:	d109      	bne.n	800298a <HAL_UART_Transmit+0x4e>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d105      	bne.n	800298a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2201      	movs	r2, #1
 8002982:	4013      	ands	r3, r2
 8002984:	d001      	beq.n	800298a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e078      	b.n	8002a7c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2290      	movs	r2, #144	@ 0x90
 800298e:	2100      	movs	r1, #0
 8002990:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2288      	movs	r2, #136	@ 0x88
 8002996:	2121      	movs	r1, #33	@ 0x21
 8002998:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800299a:	f7fe f853 	bl	8000a44 <HAL_GetTick>
 800299e:	0003      	movs	r3, r0
 80029a0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	1dba      	adds	r2, r7, #6
 80029a6:	2154      	movs	r1, #84	@ 0x54
 80029a8:	8812      	ldrh	r2, [r2, #0]
 80029aa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	1dba      	adds	r2, r7, #6
 80029b0:	2156      	movs	r1, #86	@ 0x56
 80029b2:	8812      	ldrh	r2, [r2, #0]
 80029b4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	2380      	movs	r3, #128	@ 0x80
 80029bc:	015b      	lsls	r3, r3, #5
 80029be:	429a      	cmp	r2, r3
 80029c0:	d108      	bne.n	80029d4 <HAL_UART_Transmit+0x98>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d104      	bne.n	80029d4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80029ca:	2300      	movs	r3, #0
 80029cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	61bb      	str	r3, [r7, #24]
 80029d2:	e003      	b.n	80029dc <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029d8:	2300      	movs	r3, #0
 80029da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029dc:	e030      	b.n	8002a40 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	0013      	movs	r3, r2
 80029e8:	2200      	movs	r2, #0
 80029ea:	2180      	movs	r1, #128	@ 0x80
 80029ec:	f000 fec0 	bl	8003770 <UART_WaitOnFlagUntilTimeout>
 80029f0:	1e03      	subs	r3, r0, #0
 80029f2:	d005      	beq.n	8002a00 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2288      	movs	r2, #136	@ 0x88
 80029f8:	2120      	movs	r1, #32
 80029fa:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e03d      	b.n	8002a7c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10b      	bne.n	8002a1e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	001a      	movs	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	05d2      	lsls	r2, r2, #23
 8002a12:	0dd2      	lsrs	r2, r2, #23
 8002a14:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	3302      	adds	r3, #2
 8002a1a:	61bb      	str	r3, [r7, #24]
 8002a1c:	e007      	b.n	8002a2e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	781a      	ldrb	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2256      	movs	r2, #86	@ 0x56
 8002a32:	5a9b      	ldrh	r3, [r3, r2]
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	3b01      	subs	r3, #1
 8002a38:	b299      	uxth	r1, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2256      	movs	r2, #86	@ 0x56
 8002a3e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2256      	movs	r2, #86	@ 0x56
 8002a44:	5a9b      	ldrh	r3, [r3, r2]
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1c8      	bne.n	80029de <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	0013      	movs	r3, r2
 8002a56:	2200      	movs	r2, #0
 8002a58:	2140      	movs	r1, #64	@ 0x40
 8002a5a:	f000 fe89 	bl	8003770 <UART_WaitOnFlagUntilTimeout>
 8002a5e:	1e03      	subs	r3, r0, #0
 8002a60:	d005      	beq.n	8002a6e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2288      	movs	r2, #136	@ 0x88
 8002a66:	2120      	movs	r1, #32
 8002a68:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e006      	b.n	8002a7c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2288      	movs	r2, #136	@ 0x88
 8002a72:	2120      	movs	r1, #32
 8002a74:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002a76:	2300      	movs	r3, #0
 8002a78:	e000      	b.n	8002a7c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8002a7a:	2302      	movs	r3, #2
  }
}
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	b008      	add	sp, #32
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b088      	sub	sp, #32
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	1dbb      	adds	r3, r7, #6
 8002a90:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	228c      	movs	r2, #140	@ 0x8c
 8002a96:	589b      	ldr	r3, [r3, r2]
 8002a98:	2b20      	cmp	r3, #32
 8002a9a:	d145      	bne.n	8002b28 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_UART_Receive_IT+0x26>
 8002aa2:	1dbb      	adds	r3, r7, #6
 8002aa4:	881b      	ldrh	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e03d      	b.n	8002b2a <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	689a      	ldr	r2, [r3, #8]
 8002ab2:	2380      	movs	r3, #128	@ 0x80
 8002ab4:	015b      	lsls	r3, r3, #5
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d109      	bne.n	8002ace <HAL_UART_Receive_IT+0x4a>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d105      	bne.n	8002ace <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	d001      	beq.n	8002ace <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e02d      	b.n	8002b2a <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	2380      	movs	r3, #128	@ 0x80
 8002adc:	041b      	lsls	r3, r3, #16
 8002ade:	4013      	ands	r3, r2
 8002ae0:	d019      	beq.n	8002b16 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002ae2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ae6:	613b      	str	r3, [r7, #16]
  return(result);
 8002ae8:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002aea:	61fb      	str	r3, [r7, #28]
 8002aec:	2301      	movs	r3, #1
 8002aee:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	f383 8810 	msr	PRIMASK, r3
}
 8002af6:	46c0      	nop			@ (mov r8, r8)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2180      	movs	r1, #128	@ 0x80
 8002b04:	04c9      	lsls	r1, r1, #19
 8002b06:	430a      	orrs	r2, r1
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	f383 8810 	msr	PRIMASK, r3
}
 8002b14:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002b16:	1dbb      	adds	r3, r7, #6
 8002b18:	881a      	ldrh	r2, [r3, #0]
 8002b1a:	68b9      	ldr	r1, [r7, #8]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f000 fe90 	bl	8003844 <UART_Start_Receive_IT>
 8002b24:	0003      	movs	r3, r0
 8002b26:	e000      	b.n	8002b2a <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8002b28:	2302      	movs	r3, #2
  }
}
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	b008      	add	sp, #32
 8002b30:	bd80      	pop	{r7, pc}
	...

08002b34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b34:	b5b0      	push	{r4, r5, r7, lr}
 8002b36:	b0aa      	sub	sp, #168	@ 0xa8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	22a4      	movs	r2, #164	@ 0xa4
 8002b44:	18b9      	adds	r1, r7, r2
 8002b46:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	20a0      	movs	r0, #160	@ 0xa0
 8002b50:	1839      	adds	r1, r7, r0
 8002b52:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	249c      	movs	r4, #156	@ 0x9c
 8002b5c:	1939      	adds	r1, r7, r4
 8002b5e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002b60:	0011      	movs	r1, r2
 8002b62:	18bb      	adds	r3, r7, r2
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4aa2      	ldr	r2, [pc, #648]	@ (8002df0 <HAL_UART_IRQHandler+0x2bc>)
 8002b68:	4013      	ands	r3, r2
 8002b6a:	2298      	movs	r2, #152	@ 0x98
 8002b6c:	18bd      	adds	r5, r7, r2
 8002b6e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002b70:	18bb      	adds	r3, r7, r2
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d11a      	bne.n	8002bae <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002b78:	187b      	adds	r3, r7, r1
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2220      	movs	r2, #32
 8002b7e:	4013      	ands	r3, r2
 8002b80:	d015      	beq.n	8002bae <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002b82:	183b      	adds	r3, r7, r0
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2220      	movs	r2, #32
 8002b88:	4013      	ands	r3, r2
 8002b8a:	d105      	bne.n	8002b98 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002b8c:	193b      	adds	r3, r7, r4
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	2380      	movs	r3, #128	@ 0x80
 8002b92:	055b      	lsls	r3, r3, #21
 8002b94:	4013      	ands	r3, r2
 8002b96:	d00a      	beq.n	8002bae <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d100      	bne.n	8002ba2 <HAL_UART_IRQHandler+0x6e>
 8002ba0:	e2dc      	b.n	800315c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	0010      	movs	r0, r2
 8002baa:	4798      	blx	r3
      }
      return;
 8002bac:	e2d6      	b.n	800315c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002bae:	2398      	movs	r3, #152	@ 0x98
 8002bb0:	18fb      	adds	r3, r7, r3
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d100      	bne.n	8002bba <HAL_UART_IRQHandler+0x86>
 8002bb8:	e122      	b.n	8002e00 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002bba:	239c      	movs	r3, #156	@ 0x9c
 8002bbc:	18fb      	adds	r3, r7, r3
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a8c      	ldr	r2, [pc, #560]	@ (8002df4 <HAL_UART_IRQHandler+0x2c0>)
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	d106      	bne.n	8002bd4 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002bc6:	23a0      	movs	r3, #160	@ 0xa0
 8002bc8:	18fb      	adds	r3, r7, r3
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a8a      	ldr	r2, [pc, #552]	@ (8002df8 <HAL_UART_IRQHandler+0x2c4>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	d100      	bne.n	8002bd4 <HAL_UART_IRQHandler+0xa0>
 8002bd2:	e115      	b.n	8002e00 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002bd4:	23a4      	movs	r3, #164	@ 0xa4
 8002bd6:	18fb      	adds	r3, r7, r3
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	4013      	ands	r3, r2
 8002bde:	d012      	beq.n	8002c06 <HAL_UART_IRQHandler+0xd2>
 8002be0:	23a0      	movs	r3, #160	@ 0xa0
 8002be2:	18fb      	adds	r3, r7, r3
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	2380      	movs	r3, #128	@ 0x80
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	4013      	ands	r3, r2
 8002bec:	d00b      	beq.n	8002c06 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2290      	movs	r2, #144	@ 0x90
 8002bfa:	589b      	ldr	r3, [r3, r2]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2190      	movs	r1, #144	@ 0x90
 8002c04:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c06:	23a4      	movs	r3, #164	@ 0xa4
 8002c08:	18fb      	adds	r3, r7, r3
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	4013      	ands	r3, r2
 8002c10:	d011      	beq.n	8002c36 <HAL_UART_IRQHandler+0x102>
 8002c12:	239c      	movs	r3, #156	@ 0x9c
 8002c14:	18fb      	adds	r3, r7, r3
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	d00b      	beq.n	8002c36 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2202      	movs	r2, #2
 8002c24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2290      	movs	r2, #144	@ 0x90
 8002c2a:	589b      	ldr	r3, [r3, r2]
 8002c2c:	2204      	movs	r2, #4
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2190      	movs	r1, #144	@ 0x90
 8002c34:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c36:	23a4      	movs	r3, #164	@ 0xa4
 8002c38:	18fb      	adds	r3, r7, r3
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2204      	movs	r2, #4
 8002c3e:	4013      	ands	r3, r2
 8002c40:	d011      	beq.n	8002c66 <HAL_UART_IRQHandler+0x132>
 8002c42:	239c      	movs	r3, #156	@ 0x9c
 8002c44:	18fb      	adds	r3, r7, r3
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	d00b      	beq.n	8002c66 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2204      	movs	r2, #4
 8002c54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2290      	movs	r2, #144	@ 0x90
 8002c5a:	589b      	ldr	r3, [r3, r2]
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2190      	movs	r1, #144	@ 0x90
 8002c64:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002c66:	23a4      	movs	r3, #164	@ 0xa4
 8002c68:	18fb      	adds	r3, r7, r3
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2208      	movs	r2, #8
 8002c6e:	4013      	ands	r3, r2
 8002c70:	d017      	beq.n	8002ca2 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002c72:	23a0      	movs	r3, #160	@ 0xa0
 8002c74:	18fb      	adds	r3, r7, r3
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2220      	movs	r2, #32
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d105      	bne.n	8002c8a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002c7e:	239c      	movs	r3, #156	@ 0x9c
 8002c80:	18fb      	adds	r3, r7, r3
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a5b      	ldr	r2, [pc, #364]	@ (8002df4 <HAL_UART_IRQHandler+0x2c0>)
 8002c86:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002c88:	d00b      	beq.n	8002ca2 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2208      	movs	r2, #8
 8002c90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2290      	movs	r2, #144	@ 0x90
 8002c96:	589b      	ldr	r3, [r3, r2]
 8002c98:	2208      	movs	r2, #8
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2190      	movs	r1, #144	@ 0x90
 8002ca0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002ca2:	23a4      	movs	r3, #164	@ 0xa4
 8002ca4:	18fb      	adds	r3, r7, r3
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	2380      	movs	r3, #128	@ 0x80
 8002caa:	011b      	lsls	r3, r3, #4
 8002cac:	4013      	ands	r3, r2
 8002cae:	d013      	beq.n	8002cd8 <HAL_UART_IRQHandler+0x1a4>
 8002cb0:	23a0      	movs	r3, #160	@ 0xa0
 8002cb2:	18fb      	adds	r3, r7, r3
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	2380      	movs	r3, #128	@ 0x80
 8002cb8:	04db      	lsls	r3, r3, #19
 8002cba:	4013      	ands	r3, r2
 8002cbc:	d00c      	beq.n	8002cd8 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2280      	movs	r2, #128	@ 0x80
 8002cc4:	0112      	lsls	r2, r2, #4
 8002cc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2290      	movs	r2, #144	@ 0x90
 8002ccc:	589b      	ldr	r3, [r3, r2]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2190      	movs	r1, #144	@ 0x90
 8002cd6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2290      	movs	r2, #144	@ 0x90
 8002cdc:	589b      	ldr	r3, [r3, r2]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d100      	bne.n	8002ce4 <HAL_UART_IRQHandler+0x1b0>
 8002ce2:	e23d      	b.n	8003160 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002ce4:	23a4      	movs	r3, #164	@ 0xa4
 8002ce6:	18fb      	adds	r3, r7, r3
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2220      	movs	r2, #32
 8002cec:	4013      	ands	r3, r2
 8002cee:	d015      	beq.n	8002d1c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002cf0:	23a0      	movs	r3, #160	@ 0xa0
 8002cf2:	18fb      	adds	r3, r7, r3
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d106      	bne.n	8002d0a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002cfc:	239c      	movs	r3, #156	@ 0x9c
 8002cfe:	18fb      	adds	r3, r7, r3
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	2380      	movs	r3, #128	@ 0x80
 8002d04:	055b      	lsls	r3, r3, #21
 8002d06:	4013      	ands	r3, r2
 8002d08:	d008      	beq.n	8002d1c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d004      	beq.n	8002d1c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	0010      	movs	r0, r2
 8002d1a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2290      	movs	r2, #144	@ 0x90
 8002d20:	589b      	ldr	r3, [r3, r2]
 8002d22:	2194      	movs	r1, #148	@ 0x94
 8002d24:	187a      	adds	r2, r7, r1
 8002d26:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	2240      	movs	r2, #64	@ 0x40
 8002d30:	4013      	ands	r3, r2
 8002d32:	2b40      	cmp	r3, #64	@ 0x40
 8002d34:	d004      	beq.n	8002d40 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002d36:	187b      	adds	r3, r7, r1
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2228      	movs	r2, #40	@ 0x28
 8002d3c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d3e:	d04c      	beq.n	8002dda <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	0018      	movs	r0, r3
 8002d44:	f000 fea2 	bl	8003a8c <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	2240      	movs	r2, #64	@ 0x40
 8002d50:	4013      	ands	r3, r2
 8002d52:	2b40      	cmp	r3, #64	@ 0x40
 8002d54:	d13c      	bne.n	8002dd0 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002d56:	f3ef 8310 	mrs	r3, PRIMASK
 8002d5a:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8002d5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d5e:	2090      	movs	r0, #144	@ 0x90
 8002d60:	183a      	adds	r2, r7, r0
 8002d62:	6013      	str	r3, [r2, #0]
 8002d64:	2301      	movs	r3, #1
 8002d66:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d6a:	f383 8810 	msr	PRIMASK, r3
}
 8002d6e:	46c0      	nop			@ (mov r8, r8)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689a      	ldr	r2, [r3, #8]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2140      	movs	r1, #64	@ 0x40
 8002d7c:	438a      	bics	r2, r1
 8002d7e:	609a      	str	r2, [r3, #8]
 8002d80:	183b      	adds	r3, r7, r0
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d88:	f383 8810 	msr	PRIMASK, r3
}
 8002d8c:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2280      	movs	r2, #128	@ 0x80
 8002d92:	589b      	ldr	r3, [r3, r2]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d016      	beq.n	8002dc6 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2280      	movs	r2, #128	@ 0x80
 8002d9c:	589b      	ldr	r3, [r3, r2]
 8002d9e:	4a17      	ldr	r2, [pc, #92]	@ (8002dfc <HAL_UART_IRQHandler+0x2c8>)
 8002da0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2280      	movs	r2, #128	@ 0x80
 8002da6:	589b      	ldr	r3, [r3, r2]
 8002da8:	0018      	movs	r0, r3
 8002daa:	f7fd ffb9 	bl	8000d20 <HAL_DMA_Abort_IT>
 8002dae:	1e03      	subs	r3, r0, #0
 8002db0:	d01c      	beq.n	8002dec <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2280      	movs	r2, #128	@ 0x80
 8002db6:	589b      	ldr	r3, [r3, r2]
 8002db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	2180      	movs	r1, #128	@ 0x80
 8002dbe:	5852      	ldr	r2, [r2, r1]
 8002dc0:	0010      	movs	r0, r2
 8002dc2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dc4:	e012      	b.n	8002dec <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	0018      	movs	r0, r3
 8002dca:	f000 f9e1 	bl	8003190 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dce:	e00d      	b.n	8002dec <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	f000 f9dc 	bl	8003190 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dd8:	e008      	b.n	8002dec <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	0018      	movs	r0, r3
 8002dde:	f000 f9d7 	bl	8003190 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2290      	movs	r2, #144	@ 0x90
 8002de6:	2100      	movs	r1, #0
 8002de8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002dea:	e1b9      	b.n	8003160 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dec:	46c0      	nop			@ (mov r8, r8)
    return;
 8002dee:	e1b7      	b.n	8003160 <HAL_UART_IRQHandler+0x62c>
 8002df0:	0000080f 	.word	0x0000080f
 8002df4:	10000001 	.word	0x10000001
 8002df8:	04000120 	.word	0x04000120
 8002dfc:	08003b59 	.word	0x08003b59

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d000      	beq.n	8002e0a <HAL_UART_IRQHandler+0x2d6>
 8002e08:	e13e      	b.n	8003088 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002e0a:	23a4      	movs	r3, #164	@ 0xa4
 8002e0c:	18fb      	adds	r3, r7, r3
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2210      	movs	r2, #16
 8002e12:	4013      	ands	r3, r2
 8002e14:	d100      	bne.n	8002e18 <HAL_UART_IRQHandler+0x2e4>
 8002e16:	e137      	b.n	8003088 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002e18:	23a0      	movs	r3, #160	@ 0xa0
 8002e1a:	18fb      	adds	r3, r7, r3
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2210      	movs	r2, #16
 8002e20:	4013      	ands	r3, r2
 8002e22:	d100      	bne.n	8002e26 <HAL_UART_IRQHandler+0x2f2>
 8002e24:	e130      	b.n	8003088 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2210      	movs	r2, #16
 8002e2c:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	2240      	movs	r2, #64	@ 0x40
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b40      	cmp	r3, #64	@ 0x40
 8002e3a:	d000      	beq.n	8002e3e <HAL_UART_IRQHandler+0x30a>
 8002e3c:	e0a4      	b.n	8002f88 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2280      	movs	r2, #128	@ 0x80
 8002e42:	589b      	ldr	r3, [r3, r2]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	217e      	movs	r1, #126	@ 0x7e
 8002e4a:	187b      	adds	r3, r7, r1
 8002e4c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002e4e:	187b      	adds	r3, r7, r1
 8002e50:	881b      	ldrh	r3, [r3, #0]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d100      	bne.n	8002e58 <HAL_UART_IRQHandler+0x324>
 8002e56:	e185      	b.n	8003164 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	225c      	movs	r2, #92	@ 0x5c
 8002e5c:	5a9b      	ldrh	r3, [r3, r2]
 8002e5e:	187a      	adds	r2, r7, r1
 8002e60:	8812      	ldrh	r2, [r2, #0]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d300      	bcc.n	8002e68 <HAL_UART_IRQHandler+0x334>
 8002e66:	e17d      	b.n	8003164 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	187a      	adds	r2, r7, r1
 8002e6c:	215e      	movs	r1, #94	@ 0x5e
 8002e6e:	8812      	ldrh	r2, [r2, #0]
 8002e70:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2280      	movs	r2, #128	@ 0x80
 8002e76:	589b      	ldr	r3, [r3, r2]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	4013      	ands	r3, r2
 8002e80:	d170      	bne.n	8002f64 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002e82:	f3ef 8310 	mrs	r3, PRIMASK
 8002e86:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e8a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e92:	f383 8810 	msr	PRIMASK, r3
}
 8002e96:	46c0      	nop			@ (mov r8, r8)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	49b4      	ldr	r1, [pc, #720]	@ (8003174 <HAL_UART_IRQHandler+0x640>)
 8002ea4:	400a      	ands	r2, r1
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002eaa:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eae:	f383 8810 	msr	PRIMASK, r3
}
 8002eb2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002eb4:	f3ef 8310 	mrs	r3, PRIMASK
 8002eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8002eba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ebc:	677b      	str	r3, [r7, #116]	@ 0x74
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ec2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ec4:	f383 8810 	msr	PRIMASK, r3
}
 8002ec8:	46c0      	nop			@ (mov r8, r8)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2101      	movs	r1, #1
 8002ed6:	438a      	bics	r2, r1
 8002ed8:	609a      	str	r2, [r3, #8]
 8002eda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002edc:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ede:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ee0:	f383 8810 	msr	PRIMASK, r3
}
 8002ee4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002ee6:	f3ef 8310 	mrs	r3, PRIMASK
 8002eea:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002eec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002eee:	673b      	str	r3, [r7, #112]	@ 0x70
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ef4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ef6:	f383 8810 	msr	PRIMASK, r3
}
 8002efa:	46c0      	nop			@ (mov r8, r8)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689a      	ldr	r2, [r3, #8]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2140      	movs	r1, #64	@ 0x40
 8002f08:	438a      	bics	r2, r1
 8002f0a:	609a      	str	r2, [r3, #8]
 8002f0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f0e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f12:	f383 8810 	msr	PRIMASK, r3
}
 8002f16:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	228c      	movs	r2, #140	@ 0x8c
 8002f1c:	2120      	movs	r1, #32
 8002f1e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002f26:	f3ef 8310 	mrs	r3, PRIMASK
 8002f2a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8002f2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f30:	2301      	movs	r3, #1
 8002f32:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f36:	f383 8810 	msr	PRIMASK, r3
}
 8002f3a:	46c0      	nop			@ (mov r8, r8)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2110      	movs	r1, #16
 8002f48:	438a      	bics	r2, r1
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f52:	f383 8810 	msr	PRIMASK, r3
}
 8002f56:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2280      	movs	r2, #128	@ 0x80
 8002f5c:	589b      	ldr	r3, [r3, r2]
 8002f5e:	0018      	movs	r0, r3
 8002f60:	f7fd fe7c 	bl	8000c5c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2202      	movs	r2, #2
 8002f68:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	225c      	movs	r2, #92	@ 0x5c
 8002f6e:	5a9a      	ldrh	r2, [r3, r2]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	215e      	movs	r1, #94	@ 0x5e
 8002f74:	5a5b      	ldrh	r3, [r3, r1]
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	0011      	movs	r1, r2
 8002f80:	0018      	movs	r0, r3
 8002f82:	f000 f90d 	bl	80031a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f86:	e0ed      	b.n	8003164 <HAL_UART_IRQHandler+0x630>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	225c      	movs	r2, #92	@ 0x5c
 8002f8c:	5a99      	ldrh	r1, [r3, r2]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	225e      	movs	r2, #94	@ 0x5e
 8002f92:	5a9b      	ldrh	r3, [r3, r2]
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	208e      	movs	r0, #142	@ 0x8e
 8002f98:	183b      	adds	r3, r7, r0
 8002f9a:	1a8a      	subs	r2, r1, r2
 8002f9c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	225e      	movs	r2, #94	@ 0x5e
 8002fa2:	5a9b      	ldrh	r3, [r3, r2]
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d100      	bne.n	8002fac <HAL_UART_IRQHandler+0x478>
 8002faa:	e0dd      	b.n	8003168 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8002fac:	183b      	adds	r3, r7, r0
 8002fae:	881b      	ldrh	r3, [r3, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d100      	bne.n	8002fb6 <HAL_UART_IRQHandler+0x482>
 8002fb4:	e0d8      	b.n	8003168 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002fb6:	f3ef 8310 	mrs	r3, PRIMASK
 8002fba:	60fb      	str	r3, [r7, #12]
  return(result);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002fbe:	2488      	movs	r4, #136	@ 0x88
 8002fc0:	193a      	adds	r2, r7, r4
 8002fc2:	6013      	str	r3, [r2, #0]
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	f383 8810 	msr	PRIMASK, r3
}
 8002fce:	46c0      	nop			@ (mov r8, r8)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4967      	ldr	r1, [pc, #412]	@ (8003178 <HAL_UART_IRQHandler+0x644>)
 8002fdc:	400a      	ands	r2, r1
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	193b      	adds	r3, r7, r4
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f383 8810 	msr	PRIMASK, r3
}
 8002fec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002fee:	f3ef 8310 	mrs	r3, PRIMASK
 8002ff2:	61bb      	str	r3, [r7, #24]
  return(result);
 8002ff4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002ff6:	2484      	movs	r4, #132	@ 0x84
 8002ff8:	193a      	adds	r2, r7, r4
 8002ffa:	6013      	str	r3, [r2, #0]
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f383 8810 	msr	PRIMASK, r3
}
 8003006:	46c0      	nop			@ (mov r8, r8)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689a      	ldr	r2, [r3, #8]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	495a      	ldr	r1, [pc, #360]	@ (800317c <HAL_UART_IRQHandler+0x648>)
 8003014:	400a      	ands	r2, r1
 8003016:	609a      	str	r2, [r3, #8]
 8003018:	193b      	adds	r3, r7, r4
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800301e:	6a3b      	ldr	r3, [r7, #32]
 8003020:	f383 8810 	msr	PRIMASK, r3
}
 8003024:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	228c      	movs	r2, #140	@ 0x8c
 800302a:	2120      	movs	r1, #32
 800302c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800303a:	f3ef 8310 	mrs	r3, PRIMASK
 800303e:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003042:	2480      	movs	r4, #128	@ 0x80
 8003044:	193a      	adds	r2, r7, r4
 8003046:	6013      	str	r3, [r2, #0]
 8003048:	2301      	movs	r3, #1
 800304a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800304c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800304e:	f383 8810 	msr	PRIMASK, r3
}
 8003052:	46c0      	nop			@ (mov r8, r8)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2110      	movs	r1, #16
 8003060:	438a      	bics	r2, r1
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	193b      	adds	r3, r7, r4
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800306a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800306c:	f383 8810 	msr	PRIMASK, r3
}
 8003070:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2202      	movs	r2, #2
 8003076:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003078:	183b      	adds	r3, r7, r0
 800307a:	881a      	ldrh	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	0011      	movs	r1, r2
 8003080:	0018      	movs	r0, r3
 8003082:	f000 f88d 	bl	80031a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003086:	e06f      	b.n	8003168 <HAL_UART_IRQHandler+0x634>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003088:	23a4      	movs	r3, #164	@ 0xa4
 800308a:	18fb      	adds	r3, r7, r3
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	2380      	movs	r3, #128	@ 0x80
 8003090:	035b      	lsls	r3, r3, #13
 8003092:	4013      	ands	r3, r2
 8003094:	d010      	beq.n	80030b8 <HAL_UART_IRQHandler+0x584>
 8003096:	239c      	movs	r3, #156	@ 0x9c
 8003098:	18fb      	adds	r3, r7, r3
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	2380      	movs	r3, #128	@ 0x80
 800309e:	03db      	lsls	r3, r3, #15
 80030a0:	4013      	ands	r3, r2
 80030a2:	d009      	beq.n	80030b8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2280      	movs	r2, #128	@ 0x80
 80030aa:	0352      	lsls	r2, r2, #13
 80030ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	0018      	movs	r0, r3
 80030b2:	f001 fa89 	bl	80045c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80030b6:	e05a      	b.n	800316e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80030b8:	23a4      	movs	r3, #164	@ 0xa4
 80030ba:	18fb      	adds	r3, r7, r3
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2280      	movs	r2, #128	@ 0x80
 80030c0:	4013      	ands	r3, r2
 80030c2:	d016      	beq.n	80030f2 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80030c4:	23a0      	movs	r3, #160	@ 0xa0
 80030c6:	18fb      	adds	r3, r7, r3
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2280      	movs	r2, #128	@ 0x80
 80030cc:	4013      	ands	r3, r2
 80030ce:	d106      	bne.n	80030de <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80030d0:	239c      	movs	r3, #156	@ 0x9c
 80030d2:	18fb      	adds	r3, r7, r3
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	2380      	movs	r3, #128	@ 0x80
 80030d8:	041b      	lsls	r3, r3, #16
 80030da:	4013      	ands	r3, r2
 80030dc:	d009      	beq.n	80030f2 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d042      	beq.n	800316c <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	0010      	movs	r0, r2
 80030ee:	4798      	blx	r3
    }
    return;
 80030f0:	e03c      	b.n	800316c <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80030f2:	23a4      	movs	r3, #164	@ 0xa4
 80030f4:	18fb      	adds	r3, r7, r3
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2240      	movs	r2, #64	@ 0x40
 80030fa:	4013      	ands	r3, r2
 80030fc:	d00a      	beq.n	8003114 <HAL_UART_IRQHandler+0x5e0>
 80030fe:	23a0      	movs	r3, #160	@ 0xa0
 8003100:	18fb      	adds	r3, r7, r3
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2240      	movs	r2, #64	@ 0x40
 8003106:	4013      	ands	r3, r2
 8003108:	d004      	beq.n	8003114 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	0018      	movs	r0, r3
 800310e:	f000 fd3a 	bl	8003b86 <UART_EndTransmit_IT>
    return;
 8003112:	e02c      	b.n	800316e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003114:	23a4      	movs	r3, #164	@ 0xa4
 8003116:	18fb      	adds	r3, r7, r3
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	2380      	movs	r3, #128	@ 0x80
 800311c:	041b      	lsls	r3, r3, #16
 800311e:	4013      	ands	r3, r2
 8003120:	d00b      	beq.n	800313a <HAL_UART_IRQHandler+0x606>
 8003122:	23a0      	movs	r3, #160	@ 0xa0
 8003124:	18fb      	adds	r3, r7, r3
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	2380      	movs	r3, #128	@ 0x80
 800312a:	05db      	lsls	r3, r3, #23
 800312c:	4013      	ands	r3, r2
 800312e:	d004      	beq.n	800313a <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	0018      	movs	r0, r3
 8003134:	f001 fa58 	bl	80045e8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003138:	e019      	b.n	800316e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800313a:	23a4      	movs	r3, #164	@ 0xa4
 800313c:	18fb      	adds	r3, r7, r3
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	2380      	movs	r3, #128	@ 0x80
 8003142:	045b      	lsls	r3, r3, #17
 8003144:	4013      	ands	r3, r2
 8003146:	d012      	beq.n	800316e <HAL_UART_IRQHandler+0x63a>
 8003148:	23a0      	movs	r3, #160	@ 0xa0
 800314a:	18fb      	adds	r3, r7, r3
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	da0d      	bge.n	800316e <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	0018      	movs	r0, r3
 8003156:	f001 fa3f 	bl	80045d8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800315a:	e008      	b.n	800316e <HAL_UART_IRQHandler+0x63a>
      return;
 800315c:	46c0      	nop			@ (mov r8, r8)
 800315e:	e006      	b.n	800316e <HAL_UART_IRQHandler+0x63a>
    return;
 8003160:	46c0      	nop			@ (mov r8, r8)
 8003162:	e004      	b.n	800316e <HAL_UART_IRQHandler+0x63a>
      return;
 8003164:	46c0      	nop			@ (mov r8, r8)
 8003166:	e002      	b.n	800316e <HAL_UART_IRQHandler+0x63a>
      return;
 8003168:	46c0      	nop			@ (mov r8, r8)
 800316a:	e000      	b.n	800316e <HAL_UART_IRQHandler+0x63a>
    return;
 800316c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800316e:	46bd      	mov	sp, r7
 8003170:	b02a      	add	sp, #168	@ 0xa8
 8003172:	bdb0      	pop	{r4, r5, r7, pc}
 8003174:	fffffeff 	.word	0xfffffeff
 8003178:	fffffedf 	.word	0xfffffedf
 800317c:	effffffe 	.word	0xeffffffe

08003180 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003188:	46c0      	nop			@ (mov r8, r8)
 800318a:	46bd      	mov	sp, r7
 800318c:	b002      	add	sp, #8
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003198:	46c0      	nop			@ (mov r8, r8)
 800319a:	46bd      	mov	sp, r7
 800319c:	b002      	add	sp, #8
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	000a      	movs	r2, r1
 80031aa:	1cbb      	adds	r3, r7, #2
 80031ac:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80031ae:	46c0      	nop			@ (mov r8, r8)
 80031b0:	46bd      	mov	sp, r7
 80031b2:	b002      	add	sp, #8
 80031b4:	bd80      	pop	{r7, pc}
	...

080031b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b088      	sub	sp, #32
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031c0:	231e      	movs	r3, #30
 80031c2:	18fb      	adds	r3, r7, r3
 80031c4:	2200      	movs	r2, #0
 80031c6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	431a      	orrs	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	431a      	orrs	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	4313      	orrs	r3, r2
 80031de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4aab      	ldr	r2, [pc, #684]	@ (8003494 <UART_SetConfig+0x2dc>)
 80031e8:	4013      	ands	r3, r2
 80031ea:	0019      	movs	r1, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	4aa6      	ldr	r2, [pc, #664]	@ (8003498 <UART_SetConfig+0x2e0>)
 80031fe:	4013      	ands	r3, r2
 8003200:	0019      	movs	r1, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68da      	ldr	r2, [r3, #12]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	4313      	orrs	r3, r2
 800321c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	4a9d      	ldr	r2, [pc, #628]	@ (800349c <UART_SetConfig+0x2e4>)
 8003226:	4013      	ands	r3, r2
 8003228:	0019      	movs	r1, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	430a      	orrs	r2, r1
 8003232:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800323a:	220f      	movs	r2, #15
 800323c:	4393      	bics	r3, r2
 800323e:	0019      	movs	r1, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a93      	ldr	r2, [pc, #588]	@ (80034a0 <UART_SetConfig+0x2e8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d127      	bne.n	80032a6 <UART_SetConfig+0xee>
 8003256:	4b93      	ldr	r3, [pc, #588]	@ (80034a4 <UART_SetConfig+0x2ec>)
 8003258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800325a:	2203      	movs	r2, #3
 800325c:	4013      	ands	r3, r2
 800325e:	2b03      	cmp	r3, #3
 8003260:	d017      	beq.n	8003292 <UART_SetConfig+0xda>
 8003262:	d81b      	bhi.n	800329c <UART_SetConfig+0xe4>
 8003264:	2b02      	cmp	r3, #2
 8003266:	d00a      	beq.n	800327e <UART_SetConfig+0xc6>
 8003268:	d818      	bhi.n	800329c <UART_SetConfig+0xe4>
 800326a:	2b00      	cmp	r3, #0
 800326c:	d002      	beq.n	8003274 <UART_SetConfig+0xbc>
 800326e:	2b01      	cmp	r3, #1
 8003270:	d00a      	beq.n	8003288 <UART_SetConfig+0xd0>
 8003272:	e013      	b.n	800329c <UART_SetConfig+0xe4>
 8003274:	231f      	movs	r3, #31
 8003276:	18fb      	adds	r3, r7, r3
 8003278:	2200      	movs	r2, #0
 800327a:	701a      	strb	r2, [r3, #0]
 800327c:	e021      	b.n	80032c2 <UART_SetConfig+0x10a>
 800327e:	231f      	movs	r3, #31
 8003280:	18fb      	adds	r3, r7, r3
 8003282:	2202      	movs	r2, #2
 8003284:	701a      	strb	r2, [r3, #0]
 8003286:	e01c      	b.n	80032c2 <UART_SetConfig+0x10a>
 8003288:	231f      	movs	r3, #31
 800328a:	18fb      	adds	r3, r7, r3
 800328c:	2204      	movs	r2, #4
 800328e:	701a      	strb	r2, [r3, #0]
 8003290:	e017      	b.n	80032c2 <UART_SetConfig+0x10a>
 8003292:	231f      	movs	r3, #31
 8003294:	18fb      	adds	r3, r7, r3
 8003296:	2208      	movs	r2, #8
 8003298:	701a      	strb	r2, [r3, #0]
 800329a:	e012      	b.n	80032c2 <UART_SetConfig+0x10a>
 800329c:	231f      	movs	r3, #31
 800329e:	18fb      	adds	r3, r7, r3
 80032a0:	2210      	movs	r2, #16
 80032a2:	701a      	strb	r2, [r3, #0]
 80032a4:	e00d      	b.n	80032c2 <UART_SetConfig+0x10a>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a7f      	ldr	r2, [pc, #508]	@ (80034a8 <UART_SetConfig+0x2f0>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d104      	bne.n	80032ba <UART_SetConfig+0x102>
 80032b0:	231f      	movs	r3, #31
 80032b2:	18fb      	adds	r3, r7, r3
 80032b4:	2200      	movs	r2, #0
 80032b6:	701a      	strb	r2, [r3, #0]
 80032b8:	e003      	b.n	80032c2 <UART_SetConfig+0x10a>
 80032ba:	231f      	movs	r3, #31
 80032bc:	18fb      	adds	r3, r7, r3
 80032be:	2210      	movs	r2, #16
 80032c0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69da      	ldr	r2, [r3, #28]
 80032c6:	2380      	movs	r3, #128	@ 0x80
 80032c8:	021b      	lsls	r3, r3, #8
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d000      	beq.n	80032d0 <UART_SetConfig+0x118>
 80032ce:	e06f      	b.n	80033b0 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80032d0:	231f      	movs	r3, #31
 80032d2:	18fb      	adds	r3, r7, r3
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	2b08      	cmp	r3, #8
 80032d8:	d01f      	beq.n	800331a <UART_SetConfig+0x162>
 80032da:	dc22      	bgt.n	8003322 <UART_SetConfig+0x16a>
 80032dc:	2b04      	cmp	r3, #4
 80032de:	d017      	beq.n	8003310 <UART_SetConfig+0x158>
 80032e0:	dc1f      	bgt.n	8003322 <UART_SetConfig+0x16a>
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d002      	beq.n	80032ec <UART_SetConfig+0x134>
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d005      	beq.n	80032f6 <UART_SetConfig+0x13e>
 80032ea:	e01a      	b.n	8003322 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032ec:	f7ff f9ca 	bl	8002684 <HAL_RCC_GetPCLK1Freq>
 80032f0:	0003      	movs	r3, r0
 80032f2:	61bb      	str	r3, [r7, #24]
        break;
 80032f4:	e01c      	b.n	8003330 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80032f6:	4b6b      	ldr	r3, [pc, #428]	@ (80034a4 <UART_SetConfig+0x2ec>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	095b      	lsrs	r3, r3, #5
 80032fc:	2207      	movs	r2, #7
 80032fe:	4013      	ands	r3, r2
 8003300:	3301      	adds	r3, #1
 8003302:	0019      	movs	r1, r3
 8003304:	4869      	ldr	r0, [pc, #420]	@ (80034ac <UART_SetConfig+0x2f4>)
 8003306:	f7fc feff 	bl	8000108 <__udivsi3>
 800330a:	0003      	movs	r3, r0
 800330c:	61bb      	str	r3, [r7, #24]
        break;
 800330e:	e00f      	b.n	8003330 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003310:	f7ff f96e 	bl	80025f0 <HAL_RCC_GetSysClockFreq>
 8003314:	0003      	movs	r3, r0
 8003316:	61bb      	str	r3, [r7, #24]
        break;
 8003318:	e00a      	b.n	8003330 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800331a:	2380      	movs	r3, #128	@ 0x80
 800331c:	021b      	lsls	r3, r3, #8
 800331e:	61bb      	str	r3, [r7, #24]
        break;
 8003320:	e006      	b.n	8003330 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8003322:	2300      	movs	r3, #0
 8003324:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003326:	231e      	movs	r3, #30
 8003328:	18fb      	adds	r3, r7, r3
 800332a:	2201      	movs	r2, #1
 800332c:	701a      	strb	r2, [r3, #0]
        break;
 800332e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d100      	bne.n	8003338 <UART_SetConfig+0x180>
 8003336:	e097      	b.n	8003468 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800333c:	4b5c      	ldr	r3, [pc, #368]	@ (80034b0 <UART_SetConfig+0x2f8>)
 800333e:	0052      	lsls	r2, r2, #1
 8003340:	5ad3      	ldrh	r3, [r2, r3]
 8003342:	0019      	movs	r1, r3
 8003344:	69b8      	ldr	r0, [r7, #24]
 8003346:	f7fc fedf 	bl	8000108 <__udivsi3>
 800334a:	0003      	movs	r3, r0
 800334c:	005a      	lsls	r2, r3, #1
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	085b      	lsrs	r3, r3, #1
 8003354:	18d2      	adds	r2, r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	0019      	movs	r1, r3
 800335c:	0010      	movs	r0, r2
 800335e:	f7fc fed3 	bl	8000108 <__udivsi3>
 8003362:	0003      	movs	r3, r0
 8003364:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	2b0f      	cmp	r3, #15
 800336a:	d91c      	bls.n	80033a6 <UART_SetConfig+0x1ee>
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	2380      	movs	r3, #128	@ 0x80
 8003370:	025b      	lsls	r3, r3, #9
 8003372:	429a      	cmp	r2, r3
 8003374:	d217      	bcs.n	80033a6 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	b29a      	uxth	r2, r3
 800337a:	200e      	movs	r0, #14
 800337c:	183b      	adds	r3, r7, r0
 800337e:	210f      	movs	r1, #15
 8003380:	438a      	bics	r2, r1
 8003382:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	085b      	lsrs	r3, r3, #1
 8003388:	b29b      	uxth	r3, r3
 800338a:	2207      	movs	r2, #7
 800338c:	4013      	ands	r3, r2
 800338e:	b299      	uxth	r1, r3
 8003390:	183b      	adds	r3, r7, r0
 8003392:	183a      	adds	r2, r7, r0
 8003394:	8812      	ldrh	r2, [r2, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	183a      	adds	r2, r7, r0
 80033a0:	8812      	ldrh	r2, [r2, #0]
 80033a2:	60da      	str	r2, [r3, #12]
 80033a4:	e060      	b.n	8003468 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80033a6:	231e      	movs	r3, #30
 80033a8:	18fb      	adds	r3, r7, r3
 80033aa:	2201      	movs	r2, #1
 80033ac:	701a      	strb	r2, [r3, #0]
 80033ae:	e05b      	b.n	8003468 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033b0:	231f      	movs	r3, #31
 80033b2:	18fb      	adds	r3, r7, r3
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	2b08      	cmp	r3, #8
 80033b8:	d01f      	beq.n	80033fa <UART_SetConfig+0x242>
 80033ba:	dc22      	bgt.n	8003402 <UART_SetConfig+0x24a>
 80033bc:	2b04      	cmp	r3, #4
 80033be:	d017      	beq.n	80033f0 <UART_SetConfig+0x238>
 80033c0:	dc1f      	bgt.n	8003402 <UART_SetConfig+0x24a>
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d002      	beq.n	80033cc <UART_SetConfig+0x214>
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d005      	beq.n	80033d6 <UART_SetConfig+0x21e>
 80033ca:	e01a      	b.n	8003402 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033cc:	f7ff f95a 	bl	8002684 <HAL_RCC_GetPCLK1Freq>
 80033d0:	0003      	movs	r3, r0
 80033d2:	61bb      	str	r3, [r7, #24]
        break;
 80033d4:	e01c      	b.n	8003410 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80033d6:	4b33      	ldr	r3, [pc, #204]	@ (80034a4 <UART_SetConfig+0x2ec>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	095b      	lsrs	r3, r3, #5
 80033dc:	2207      	movs	r2, #7
 80033de:	4013      	ands	r3, r2
 80033e0:	3301      	adds	r3, #1
 80033e2:	0019      	movs	r1, r3
 80033e4:	4831      	ldr	r0, [pc, #196]	@ (80034ac <UART_SetConfig+0x2f4>)
 80033e6:	f7fc fe8f 	bl	8000108 <__udivsi3>
 80033ea:	0003      	movs	r3, r0
 80033ec:	61bb      	str	r3, [r7, #24]
        break;
 80033ee:	e00f      	b.n	8003410 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033f0:	f7ff f8fe 	bl	80025f0 <HAL_RCC_GetSysClockFreq>
 80033f4:	0003      	movs	r3, r0
 80033f6:	61bb      	str	r3, [r7, #24]
        break;
 80033f8:	e00a      	b.n	8003410 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033fa:	2380      	movs	r3, #128	@ 0x80
 80033fc:	021b      	lsls	r3, r3, #8
 80033fe:	61bb      	str	r3, [r7, #24]
        break;
 8003400:	e006      	b.n	8003410 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8003402:	2300      	movs	r3, #0
 8003404:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003406:	231e      	movs	r3, #30
 8003408:	18fb      	adds	r3, r7, r3
 800340a:	2201      	movs	r2, #1
 800340c:	701a      	strb	r2, [r3, #0]
        break;
 800340e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d028      	beq.n	8003468 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800341a:	4b25      	ldr	r3, [pc, #148]	@ (80034b0 <UART_SetConfig+0x2f8>)
 800341c:	0052      	lsls	r2, r2, #1
 800341e:	5ad3      	ldrh	r3, [r2, r3]
 8003420:	0019      	movs	r1, r3
 8003422:	69b8      	ldr	r0, [r7, #24]
 8003424:	f7fc fe70 	bl	8000108 <__udivsi3>
 8003428:	0003      	movs	r3, r0
 800342a:	001a      	movs	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	085b      	lsrs	r3, r3, #1
 8003432:	18d2      	adds	r2, r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	0019      	movs	r1, r3
 800343a:	0010      	movs	r0, r2
 800343c:	f7fc fe64 	bl	8000108 <__udivsi3>
 8003440:	0003      	movs	r3, r0
 8003442:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	2b0f      	cmp	r3, #15
 8003448:	d90a      	bls.n	8003460 <UART_SetConfig+0x2a8>
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	2380      	movs	r3, #128	@ 0x80
 800344e:	025b      	lsls	r3, r3, #9
 8003450:	429a      	cmp	r2, r3
 8003452:	d205      	bcs.n	8003460 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	b29a      	uxth	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	60da      	str	r2, [r3, #12]
 800345e:	e003      	b.n	8003468 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8003460:	231e      	movs	r3, #30
 8003462:	18fb      	adds	r3, r7, r3
 8003464:	2201      	movs	r2, #1
 8003466:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	226a      	movs	r2, #106	@ 0x6a
 800346c:	2101      	movs	r1, #1
 800346e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2268      	movs	r2, #104	@ 0x68
 8003474:	2101      	movs	r1, #1
 8003476:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003484:	231e      	movs	r3, #30
 8003486:	18fb      	adds	r3, r7, r3
 8003488:	781b      	ldrb	r3, [r3, #0]
}
 800348a:	0018      	movs	r0, r3
 800348c:	46bd      	mov	sp, r7
 800348e:	b008      	add	sp, #32
 8003490:	bd80      	pop	{r7, pc}
 8003492:	46c0      	nop			@ (mov r8, r8)
 8003494:	cfff69f3 	.word	0xcfff69f3
 8003498:	ffffcfff 	.word	0xffffcfff
 800349c:	11fff4ff 	.word	0x11fff4ff
 80034a0:	40013800 	.word	0x40013800
 80034a4:	40021000 	.word	0x40021000
 80034a8:	40004400 	.word	0x40004400
 80034ac:	02dc6c00 	.word	0x02dc6c00
 80034b0:	08005048 	.word	0x08005048

080034b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034c0:	2208      	movs	r2, #8
 80034c2:	4013      	ands	r3, r2
 80034c4:	d00b      	beq.n	80034de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	4a4a      	ldr	r2, [pc, #296]	@ (80035f8 <UART_AdvFeatureConfig+0x144>)
 80034ce:	4013      	ands	r3, r2
 80034d0:	0019      	movs	r1, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e2:	2201      	movs	r2, #1
 80034e4:	4013      	ands	r3, r2
 80034e6:	d00b      	beq.n	8003500 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	4a43      	ldr	r2, [pc, #268]	@ (80035fc <UART_AdvFeatureConfig+0x148>)
 80034f0:	4013      	ands	r3, r2
 80034f2:	0019      	movs	r1, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003504:	2202      	movs	r2, #2
 8003506:	4013      	ands	r3, r2
 8003508:	d00b      	beq.n	8003522 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	4a3b      	ldr	r2, [pc, #236]	@ (8003600 <UART_AdvFeatureConfig+0x14c>)
 8003512:	4013      	ands	r3, r2
 8003514:	0019      	movs	r1, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003526:	2204      	movs	r2, #4
 8003528:	4013      	ands	r3, r2
 800352a:	d00b      	beq.n	8003544 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	4a34      	ldr	r2, [pc, #208]	@ (8003604 <UART_AdvFeatureConfig+0x150>)
 8003534:	4013      	ands	r3, r2
 8003536:	0019      	movs	r1, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003548:	2210      	movs	r2, #16
 800354a:	4013      	ands	r3, r2
 800354c:	d00b      	beq.n	8003566 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	4a2c      	ldr	r2, [pc, #176]	@ (8003608 <UART_AdvFeatureConfig+0x154>)
 8003556:	4013      	ands	r3, r2
 8003558:	0019      	movs	r1, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800356a:	2220      	movs	r2, #32
 800356c:	4013      	ands	r3, r2
 800356e:	d00b      	beq.n	8003588 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	4a25      	ldr	r2, [pc, #148]	@ (800360c <UART_AdvFeatureConfig+0x158>)
 8003578:	4013      	ands	r3, r2
 800357a:	0019      	movs	r1, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	430a      	orrs	r2, r1
 8003586:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800358c:	2240      	movs	r2, #64	@ 0x40
 800358e:	4013      	ands	r3, r2
 8003590:	d01d      	beq.n	80035ce <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	4a1d      	ldr	r2, [pc, #116]	@ (8003610 <UART_AdvFeatureConfig+0x15c>)
 800359a:	4013      	ands	r3, r2
 800359c:	0019      	movs	r1, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035ae:	2380      	movs	r3, #128	@ 0x80
 80035b0:	035b      	lsls	r3, r3, #13
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d10b      	bne.n	80035ce <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	4a15      	ldr	r2, [pc, #84]	@ (8003614 <UART_AdvFeatureConfig+0x160>)
 80035be:	4013      	ands	r3, r2
 80035c0:	0019      	movs	r1, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d2:	2280      	movs	r2, #128	@ 0x80
 80035d4:	4013      	ands	r3, r2
 80035d6:	d00b      	beq.n	80035f0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	4a0e      	ldr	r2, [pc, #56]	@ (8003618 <UART_AdvFeatureConfig+0x164>)
 80035e0:	4013      	ands	r3, r2
 80035e2:	0019      	movs	r1, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	605a      	str	r2, [r3, #4]
  }
}
 80035f0:	46c0      	nop			@ (mov r8, r8)
 80035f2:	46bd      	mov	sp, r7
 80035f4:	b002      	add	sp, #8
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	ffff7fff 	.word	0xffff7fff
 80035fc:	fffdffff 	.word	0xfffdffff
 8003600:	fffeffff 	.word	0xfffeffff
 8003604:	fffbffff 	.word	0xfffbffff
 8003608:	ffffefff 	.word	0xffffefff
 800360c:	ffffdfff 	.word	0xffffdfff
 8003610:	ffefffff 	.word	0xffefffff
 8003614:	ff9fffff 	.word	0xff9fffff
 8003618:	fff7ffff 	.word	0xfff7ffff

0800361c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b092      	sub	sp, #72	@ 0x48
 8003620:	af02      	add	r7, sp, #8
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2290      	movs	r2, #144	@ 0x90
 8003628:	2100      	movs	r1, #0
 800362a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800362c:	f7fd fa0a 	bl	8000a44 <HAL_GetTick>
 8003630:	0003      	movs	r3, r0
 8003632:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2208      	movs	r2, #8
 800363c:	4013      	ands	r3, r2
 800363e:	2b08      	cmp	r3, #8
 8003640:	d12d      	bne.n	800369e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003642:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003644:	2280      	movs	r2, #128	@ 0x80
 8003646:	0391      	lsls	r1, r2, #14
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	4a47      	ldr	r2, [pc, #284]	@ (8003768 <UART_CheckIdleState+0x14c>)
 800364c:	9200      	str	r2, [sp, #0]
 800364e:	2200      	movs	r2, #0
 8003650:	f000 f88e 	bl	8003770 <UART_WaitOnFlagUntilTimeout>
 8003654:	1e03      	subs	r3, r0, #0
 8003656:	d022      	beq.n	800369e <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003658:	f3ef 8310 	mrs	r3, PRIMASK
 800365c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800365e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003660:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003662:	2301      	movs	r3, #1
 8003664:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003668:	f383 8810 	msr	PRIMASK, r3
}
 800366c:	46c0      	nop			@ (mov r8, r8)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2180      	movs	r1, #128	@ 0x80
 800367a:	438a      	bics	r2, r1
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003680:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003684:	f383 8810 	msr	PRIMASK, r3
}
 8003688:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2288      	movs	r2, #136	@ 0x88
 800368e:	2120      	movs	r1, #32
 8003690:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2284      	movs	r2, #132	@ 0x84
 8003696:	2100      	movs	r1, #0
 8003698:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e060      	b.n	8003760 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2204      	movs	r2, #4
 80036a6:	4013      	ands	r3, r2
 80036a8:	2b04      	cmp	r3, #4
 80036aa:	d146      	bne.n	800373a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036ae:	2280      	movs	r2, #128	@ 0x80
 80036b0:	03d1      	lsls	r1, r2, #15
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	4a2c      	ldr	r2, [pc, #176]	@ (8003768 <UART_CheckIdleState+0x14c>)
 80036b6:	9200      	str	r2, [sp, #0]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f000 f859 	bl	8003770 <UART_WaitOnFlagUntilTimeout>
 80036be:	1e03      	subs	r3, r0, #0
 80036c0:	d03b      	beq.n	800373a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80036c2:	f3ef 8310 	mrs	r3, PRIMASK
 80036c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80036c8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80036ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80036cc:	2301      	movs	r3, #1
 80036ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	f383 8810 	msr	PRIMASK, r3
}
 80036d6:	46c0      	nop			@ (mov r8, r8)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4922      	ldr	r1, [pc, #136]	@ (800376c <UART_CheckIdleState+0x150>)
 80036e4:	400a      	ands	r2, r1
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f383 8810 	msr	PRIMASK, r3
}
 80036f2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80036f4:	f3ef 8310 	mrs	r3, PRIMASK
 80036f8:	61bb      	str	r3, [r7, #24]
  return(result);
 80036fa:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80036fe:	2301      	movs	r3, #1
 8003700:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	f383 8810 	msr	PRIMASK, r3
}
 8003708:	46c0      	nop			@ (mov r8, r8)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2101      	movs	r1, #1
 8003716:	438a      	bics	r2, r1
 8003718:	609a      	str	r2, [r3, #8]
 800371a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800371c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800371e:	6a3b      	ldr	r3, [r7, #32]
 8003720:	f383 8810 	msr	PRIMASK, r3
}
 8003724:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	228c      	movs	r2, #140	@ 0x8c
 800372a:	2120      	movs	r1, #32
 800372c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2284      	movs	r2, #132	@ 0x84
 8003732:	2100      	movs	r1, #0
 8003734:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e012      	b.n	8003760 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2288      	movs	r2, #136	@ 0x88
 800373e:	2120      	movs	r1, #32
 8003740:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	228c      	movs	r2, #140	@ 0x8c
 8003746:	2120      	movs	r1, #32
 8003748:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2284      	movs	r2, #132	@ 0x84
 800375a:	2100      	movs	r1, #0
 800375c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	0018      	movs	r0, r3
 8003762:	46bd      	mov	sp, r7
 8003764:	b010      	add	sp, #64	@ 0x40
 8003766:	bd80      	pop	{r7, pc}
 8003768:	01ffffff 	.word	0x01ffffff
 800376c:	fffffedf 	.word	0xfffffedf

08003770 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	603b      	str	r3, [r7, #0]
 800377c:	1dfb      	adds	r3, r7, #7
 800377e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003780:	e04b      	b.n	800381a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	3301      	adds	r3, #1
 8003786:	d048      	beq.n	800381a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003788:	f7fd f95c 	bl	8000a44 <HAL_GetTick>
 800378c:	0002      	movs	r2, r0
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	429a      	cmp	r2, r3
 8003796:	d302      	bcc.n	800379e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e04b      	b.n	800383a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2204      	movs	r2, #4
 80037aa:	4013      	ands	r3, r2
 80037ac:	d035      	beq.n	800381a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	2208      	movs	r2, #8
 80037b6:	4013      	ands	r3, r2
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	d111      	bne.n	80037e0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2208      	movs	r2, #8
 80037c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	0018      	movs	r0, r3
 80037c8:	f000 f960 	bl	8003a8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2290      	movs	r2, #144	@ 0x90
 80037d0:	2108      	movs	r1, #8
 80037d2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2284      	movs	r2, #132	@ 0x84
 80037d8:	2100      	movs	r1, #0
 80037da:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e02c      	b.n	800383a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	69da      	ldr	r2, [r3, #28]
 80037e6:	2380      	movs	r3, #128	@ 0x80
 80037e8:	011b      	lsls	r3, r3, #4
 80037ea:	401a      	ands	r2, r3
 80037ec:	2380      	movs	r3, #128	@ 0x80
 80037ee:	011b      	lsls	r3, r3, #4
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d112      	bne.n	800381a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2280      	movs	r2, #128	@ 0x80
 80037fa:	0112      	lsls	r2, r2, #4
 80037fc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	0018      	movs	r0, r3
 8003802:	f000 f943 	bl	8003a8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2290      	movs	r2, #144	@ 0x90
 800380a:	2120      	movs	r1, #32
 800380c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2284      	movs	r2, #132	@ 0x84
 8003812:	2100      	movs	r1, #0
 8003814:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e00f      	b.n	800383a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	4013      	ands	r3, r2
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	425a      	negs	r2, r3
 800382a:	4153      	adcs	r3, r2
 800382c:	b2db      	uxtb	r3, r3
 800382e:	001a      	movs	r2, r3
 8003830:	1dfb      	adds	r3, r7, #7
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	429a      	cmp	r2, r3
 8003836:	d0a4      	beq.n	8003782 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	0018      	movs	r0, r3
 800383c:	46bd      	mov	sp, r7
 800383e:	b004      	add	sp, #16
 8003840:	bd80      	pop	{r7, pc}
	...

08003844 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b098      	sub	sp, #96	@ 0x60
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	1dbb      	adds	r3, r7, #6
 8003850:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	68ba      	ldr	r2, [r7, #8]
 8003856:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	1dba      	adds	r2, r7, #6
 800385c:	215c      	movs	r1, #92	@ 0x5c
 800385e:	8812      	ldrh	r2, [r2, #0]
 8003860:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	1dba      	adds	r2, r7, #6
 8003866:	215e      	movs	r1, #94	@ 0x5e
 8003868:	8812      	ldrh	r2, [r2, #0]
 800386a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	689a      	ldr	r2, [r3, #8]
 8003876:	2380      	movs	r3, #128	@ 0x80
 8003878:	015b      	lsls	r3, r3, #5
 800387a:	429a      	cmp	r2, r3
 800387c:	d10d      	bne.n	800389a <UART_Start_Receive_IT+0x56>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d104      	bne.n	8003890 <UART_Start_Receive_IT+0x4c>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2260      	movs	r2, #96	@ 0x60
 800388a:	497b      	ldr	r1, [pc, #492]	@ (8003a78 <UART_Start_Receive_IT+0x234>)
 800388c:	5299      	strh	r1, [r3, r2]
 800388e:	e02e      	b.n	80038ee <UART_Start_Receive_IT+0xaa>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2260      	movs	r2, #96	@ 0x60
 8003894:	21ff      	movs	r1, #255	@ 0xff
 8003896:	5299      	strh	r1, [r3, r2]
 8003898:	e029      	b.n	80038ee <UART_Start_Receive_IT+0xaa>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10d      	bne.n	80038be <UART_Start_Receive_IT+0x7a>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d104      	bne.n	80038b4 <UART_Start_Receive_IT+0x70>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2260      	movs	r2, #96	@ 0x60
 80038ae:	21ff      	movs	r1, #255	@ 0xff
 80038b0:	5299      	strh	r1, [r3, r2]
 80038b2:	e01c      	b.n	80038ee <UART_Start_Receive_IT+0xaa>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2260      	movs	r2, #96	@ 0x60
 80038b8:	217f      	movs	r1, #127	@ 0x7f
 80038ba:	5299      	strh	r1, [r3, r2]
 80038bc:	e017      	b.n	80038ee <UART_Start_Receive_IT+0xaa>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	689a      	ldr	r2, [r3, #8]
 80038c2:	2380      	movs	r3, #128	@ 0x80
 80038c4:	055b      	lsls	r3, r3, #21
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d10d      	bne.n	80038e6 <UART_Start_Receive_IT+0xa2>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d104      	bne.n	80038dc <UART_Start_Receive_IT+0x98>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2260      	movs	r2, #96	@ 0x60
 80038d6:	217f      	movs	r1, #127	@ 0x7f
 80038d8:	5299      	strh	r1, [r3, r2]
 80038da:	e008      	b.n	80038ee <UART_Start_Receive_IT+0xaa>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2260      	movs	r2, #96	@ 0x60
 80038e0:	213f      	movs	r1, #63	@ 0x3f
 80038e2:	5299      	strh	r1, [r3, r2]
 80038e4:	e003      	b.n	80038ee <UART_Start_Receive_IT+0xaa>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2260      	movs	r2, #96	@ 0x60
 80038ea:	2100      	movs	r1, #0
 80038ec:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2290      	movs	r2, #144	@ 0x90
 80038f2:	2100      	movs	r1, #0
 80038f4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	228c      	movs	r2, #140	@ 0x8c
 80038fa:	2122      	movs	r1, #34	@ 0x22
 80038fc:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80038fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003902:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8003904:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003906:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003908:	2301      	movs	r3, #1
 800390a:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800390c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800390e:	f383 8810 	msr	PRIMASK, r3
}
 8003912:	46c0      	nop			@ (mov r8, r8)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689a      	ldr	r2, [r3, #8]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2101      	movs	r1, #1
 8003920:	430a      	orrs	r2, r1
 8003922:	609a      	str	r2, [r3, #8]
 8003924:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003926:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003928:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800392a:	f383 8810 	msr	PRIMASK, r3
}
 800392e:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003934:	2380      	movs	r3, #128	@ 0x80
 8003936:	059b      	lsls	r3, r3, #22
 8003938:	429a      	cmp	r2, r3
 800393a:	d150      	bne.n	80039de <UART_Start_Receive_IT+0x19a>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2268      	movs	r2, #104	@ 0x68
 8003940:	5a9b      	ldrh	r3, [r3, r2]
 8003942:	1dba      	adds	r2, r7, #6
 8003944:	8812      	ldrh	r2, [r2, #0]
 8003946:	429a      	cmp	r2, r3
 8003948:	d349      	bcc.n	80039de <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	689a      	ldr	r2, [r3, #8]
 800394e:	2380      	movs	r3, #128	@ 0x80
 8003950:	015b      	lsls	r3, r3, #5
 8003952:	429a      	cmp	r2, r3
 8003954:	d107      	bne.n	8003966 <UART_Start_Receive_IT+0x122>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d103      	bne.n	8003966 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	4a46      	ldr	r2, [pc, #280]	@ (8003a7c <UART_Start_Receive_IT+0x238>)
 8003962:	675a      	str	r2, [r3, #116]	@ 0x74
 8003964:	e002      	b.n	800396c <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4a45      	ldr	r2, [pc, #276]	@ (8003a80 <UART_Start_Receive_IT+0x23c>)
 800396a:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d019      	beq.n	80039a8 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003974:	f3ef 8310 	mrs	r3, PRIMASK
 8003978:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 800397a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800397c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800397e:	2301      	movs	r3, #1
 8003980:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003984:	f383 8810 	msr	PRIMASK, r3
}
 8003988:	46c0      	nop			@ (mov r8, r8)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2180      	movs	r1, #128	@ 0x80
 8003996:	0049      	lsls	r1, r1, #1
 8003998:	430a      	orrs	r2, r1
 800399a:	601a      	str	r2, [r3, #0]
 800399c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800399e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039a2:	f383 8810 	msr	PRIMASK, r3
}
 80039a6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80039a8:	f3ef 8310 	mrs	r3, PRIMASK
 80039ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80039ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80039b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80039b2:	2301      	movs	r3, #1
 80039b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039b8:	f383 8810 	msr	PRIMASK, r3
}
 80039bc:	46c0      	nop			@ (mov r8, r8)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2180      	movs	r1, #128	@ 0x80
 80039ca:	0549      	lsls	r1, r1, #21
 80039cc:	430a      	orrs	r2, r1
 80039ce:	609a      	str	r2, [r3, #8]
 80039d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039d2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d6:	f383 8810 	msr	PRIMASK, r3
}
 80039da:	46c0      	nop			@ (mov r8, r8)
 80039dc:	e047      	b.n	8003a6e <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	689a      	ldr	r2, [r3, #8]
 80039e2:	2380      	movs	r3, #128	@ 0x80
 80039e4:	015b      	lsls	r3, r3, #5
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d107      	bne.n	80039fa <UART_Start_Receive_IT+0x1b6>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d103      	bne.n	80039fa <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	4a23      	ldr	r2, [pc, #140]	@ (8003a84 <UART_Start_Receive_IT+0x240>)
 80039f6:	675a      	str	r2, [r3, #116]	@ 0x74
 80039f8:	e002      	b.n	8003a00 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	4a22      	ldr	r2, [pc, #136]	@ (8003a88 <UART_Start_Receive_IT+0x244>)
 80039fe:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d019      	beq.n	8003a3c <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003a08:	f3ef 8310 	mrs	r3, PRIMASK
 8003a0c:	61fb      	str	r3, [r7, #28]
  return(result);
 8003a0e:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003a10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a12:	2301      	movs	r3, #1
 8003a14:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a16:	6a3b      	ldr	r3, [r7, #32]
 8003a18:	f383 8810 	msr	PRIMASK, r3
}
 8003a1c:	46c0      	nop			@ (mov r8, r8)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2190      	movs	r1, #144	@ 0x90
 8003a2a:	0049      	lsls	r1, r1, #1
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a32:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a36:	f383 8810 	msr	PRIMASK, r3
}
 8003a3a:	e018      	b.n	8003a6e <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003a3c:	f3ef 8310 	mrs	r3, PRIMASK
 8003a40:	613b      	str	r3, [r7, #16]
  return(result);
 8003a42:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003a44:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a46:	2301      	movs	r3, #1
 8003a48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f383 8810 	msr	PRIMASK, r3
}
 8003a50:	46c0      	nop			@ (mov r8, r8)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2120      	movs	r1, #32
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a64:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	f383 8810 	msr	PRIMASK, r3
}
 8003a6c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	0018      	movs	r0, r3
 8003a72:	46bd      	mov	sp, r7
 8003a74:	b018      	add	sp, #96	@ 0x60
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	000001ff 	.word	0x000001ff
 8003a7c:	08004281 	.word	0x08004281
 8003a80:	08003f51 	.word	0x08003f51
 8003a84:	08003d99 	.word	0x08003d99
 8003a88:	08003be1 	.word	0x08003be1

08003a8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b08e      	sub	sp, #56	@ 0x38
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003a94:	f3ef 8310 	mrs	r3, PRIMASK
 8003a98:	617b      	str	r3, [r7, #20]
  return(result);
 8003a9a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	f383 8810 	msr	PRIMASK, r3
}
 8003aa8:	46c0      	nop			@ (mov r8, r8)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4926      	ldr	r1, [pc, #152]	@ (8003b50 <UART_EndRxTransfer+0xc4>)
 8003ab6:	400a      	ands	r2, r1
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003abc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	f383 8810 	msr	PRIMASK, r3
}
 8003ac4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003ac6:	f3ef 8310 	mrs	r3, PRIMASK
 8003aca:	623b      	str	r3, [r7, #32]
  return(result);
 8003acc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003ace:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad6:	f383 8810 	msr	PRIMASK, r3
}
 8003ada:	46c0      	nop			@ (mov r8, r8)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689a      	ldr	r2, [r3, #8]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	491b      	ldr	r1, [pc, #108]	@ (8003b54 <UART_EndRxTransfer+0xc8>)
 8003ae8:	400a      	ands	r2, r1
 8003aea:	609a      	str	r2, [r3, #8]
 8003aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aee:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003af2:	f383 8810 	msr	PRIMASK, r3
}
 8003af6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d118      	bne.n	8003b32 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003b00:	f3ef 8310 	mrs	r3, PRIMASK
 8003b04:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b06:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f383 8810 	msr	PRIMASK, r3
}
 8003b14:	46c0      	nop			@ (mov r8, r8)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2110      	movs	r1, #16
 8003b22:	438a      	bics	r2, r1
 8003b24:	601a      	str	r2, [r3, #0]
 8003b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	f383 8810 	msr	PRIMASK, r3
}
 8003b30:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	228c      	movs	r2, #140	@ 0x8c
 8003b36:	2120      	movs	r1, #32
 8003b38:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003b46:	46c0      	nop			@ (mov r8, r8)
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	b00e      	add	sp, #56	@ 0x38
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	46c0      	nop			@ (mov r8, r8)
 8003b50:	fffffedf 	.word	0xfffffedf
 8003b54:	effffffe 	.word	0xeffffffe

08003b58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	225e      	movs	r2, #94	@ 0x5e
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2256      	movs	r2, #86	@ 0x56
 8003b72:	2100      	movs	r1, #0
 8003b74:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	0018      	movs	r0, r3
 8003b7a:	f7ff fb09 	bl	8003190 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b7e:	46c0      	nop			@ (mov r8, r8)
 8003b80:	46bd      	mov	sp, r7
 8003b82:	b004      	add	sp, #16
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b086      	sub	sp, #24
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003b8e:	f3ef 8310 	mrs	r3, PRIMASK
 8003b92:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b94:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	2301      	movs	r3, #1
 8003b9a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f383 8810 	msr	PRIMASK, r3
}
 8003ba2:	46c0      	nop			@ (mov r8, r8)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2140      	movs	r1, #64	@ 0x40
 8003bb0:	438a      	bics	r2, r1
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	f383 8810 	msr	PRIMASK, r3
}
 8003bbe:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2288      	movs	r2, #136	@ 0x88
 8003bc4:	2120      	movs	r1, #32
 8003bc6:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	f7ff fad5 	bl	8003180 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bd6:	46c0      	nop			@ (mov r8, r8)
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	b006      	add	sp, #24
 8003bdc:	bd80      	pop	{r7, pc}
	...

08003be0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b094      	sub	sp, #80	@ 0x50
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003be8:	204e      	movs	r0, #78	@ 0x4e
 8003bea:	183b      	adds	r3, r7, r0
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	2160      	movs	r1, #96	@ 0x60
 8003bf0:	5a52      	ldrh	r2, [r2, r1]
 8003bf2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	228c      	movs	r2, #140	@ 0x8c
 8003bf8:	589b      	ldr	r3, [r3, r2]
 8003bfa:	2b22      	cmp	r3, #34	@ 0x22
 8003bfc:	d000      	beq.n	8003c00 <UART_RxISR_8BIT+0x20>
 8003bfe:	e0ba      	b.n	8003d76 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c06:	214c      	movs	r1, #76	@ 0x4c
 8003c08:	187b      	adds	r3, r7, r1
 8003c0a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003c0c:	187b      	adds	r3, r7, r1
 8003c0e:	881b      	ldrh	r3, [r3, #0]
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	183b      	adds	r3, r7, r0
 8003c14:	881b      	ldrh	r3, [r3, #0]
 8003c16:	b2d9      	uxtb	r1, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c1c:	400a      	ands	r2, r1
 8003c1e:	b2d2      	uxtb	r2, r2
 8003c20:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c26:	1c5a      	adds	r2, r3, #1
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	225e      	movs	r2, #94	@ 0x5e
 8003c30:	5a9b      	ldrh	r3, [r3, r2]
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	3b01      	subs	r3, #1
 8003c36:	b299      	uxth	r1, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	225e      	movs	r2, #94	@ 0x5e
 8003c3c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	225e      	movs	r2, #94	@ 0x5e
 8003c42:	5a9b      	ldrh	r3, [r3, r2]
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d000      	beq.n	8003c4c <UART_RxISR_8BIT+0x6c>
 8003c4a:	e09c      	b.n	8003d86 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003c4c:	f3ef 8310 	mrs	r3, PRIMASK
 8003c50:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c56:	2301      	movs	r3, #1
 8003c58:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c5c:	f383 8810 	msr	PRIMASK, r3
}
 8003c60:	46c0      	nop			@ (mov r8, r8)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4948      	ldr	r1, [pc, #288]	@ (8003d90 <UART_RxISR_8BIT+0x1b0>)
 8003c6e:	400a      	ands	r2, r1
 8003c70:	601a      	str	r2, [r3, #0]
 8003c72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c78:	f383 8810 	msr	PRIMASK, r3
}
 8003c7c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003c7e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c82:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c86:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c88:	2301      	movs	r3, #1
 8003c8a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c8e:	f383 8810 	msr	PRIMASK, r3
}
 8003c92:	46c0      	nop			@ (mov r8, r8)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689a      	ldr	r2, [r3, #8]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	438a      	bics	r2, r1
 8003ca2:	609a      	str	r2, [r3, #8]
 8003ca4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003caa:	f383 8810 	msr	PRIMASK, r3
}
 8003cae:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	228c      	movs	r2, #140	@ 0x8c
 8003cb4:	2120      	movs	r1, #32
 8003cb6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	2380      	movs	r3, #128	@ 0x80
 8003ccc:	041b      	lsls	r3, r3, #16
 8003cce:	4013      	ands	r3, r2
 8003cd0:	d018      	beq.n	8003d04 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003cd2:	f3ef 8310 	mrs	r3, PRIMASK
 8003cd6:	61bb      	str	r3, [r7, #24]
  return(result);
 8003cd8:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003cda:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cdc:	2301      	movs	r3, #1
 8003cde:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	f383 8810 	msr	PRIMASK, r3
}
 8003ce6:	46c0      	nop			@ (mov r8, r8)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4928      	ldr	r1, [pc, #160]	@ (8003d94 <UART_RxISR_8BIT+0x1b4>)
 8003cf4:	400a      	ands	r2, r1
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cfa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cfc:	6a3b      	ldr	r3, [r7, #32]
 8003cfe:	f383 8810 	msr	PRIMASK, r3
}
 8003d02:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d12f      	bne.n	8003d6c <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003d12:	f3ef 8310 	mrs	r3, PRIMASK
 8003d16:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d18:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	f383 8810 	msr	PRIMASK, r3
}
 8003d26:	46c0      	nop			@ (mov r8, r8)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2110      	movs	r1, #16
 8003d34:	438a      	bics	r2, r1
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d3a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f383 8810 	msr	PRIMASK, r3
}
 8003d42:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	2210      	movs	r2, #16
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	2b10      	cmp	r3, #16
 8003d50:	d103      	bne.n	8003d5a <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2210      	movs	r2, #16
 8003d58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	225c      	movs	r2, #92	@ 0x5c
 8003d5e:	5a9a      	ldrh	r2, [r3, r2]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	0011      	movs	r1, r2
 8003d64:	0018      	movs	r0, r3
 8003d66:	f7ff fa1b 	bl	80031a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003d6a:	e00c      	b.n	8003d86 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	0018      	movs	r0, r3
 8003d70:	f7fc fbe4 	bl	800053c <HAL_UART_RxCpltCallback>
}
 8003d74:	e007      	b.n	8003d86 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	699a      	ldr	r2, [r3, #24]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2108      	movs	r1, #8
 8003d82:	430a      	orrs	r2, r1
 8003d84:	619a      	str	r2, [r3, #24]
}
 8003d86:	46c0      	nop			@ (mov r8, r8)
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	b014      	add	sp, #80	@ 0x50
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	46c0      	nop			@ (mov r8, r8)
 8003d90:	fffffedf 	.word	0xfffffedf
 8003d94:	fbffffff 	.word	0xfbffffff

08003d98 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b094      	sub	sp, #80	@ 0x50
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003da0:	204e      	movs	r0, #78	@ 0x4e
 8003da2:	183b      	adds	r3, r7, r0
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	2160      	movs	r1, #96	@ 0x60
 8003da8:	5a52      	ldrh	r2, [r2, r1]
 8003daa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	228c      	movs	r2, #140	@ 0x8c
 8003db0:	589b      	ldr	r3, [r3, r2]
 8003db2:	2b22      	cmp	r3, #34	@ 0x22
 8003db4:	d000      	beq.n	8003db8 <UART_RxISR_16BIT+0x20>
 8003db6:	e0ba      	b.n	8003f2e <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003dbe:	214c      	movs	r1, #76	@ 0x4c
 8003dc0:	187b      	adds	r3, r7, r1
 8003dc2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dc8:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8003dca:	187b      	adds	r3, r7, r1
 8003dcc:	183a      	adds	r2, r7, r0
 8003dce:	881b      	ldrh	r3, [r3, #0]
 8003dd0:	8812      	ldrh	r2, [r2, #0]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003dd8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dde:	1c9a      	adds	r2, r3, #2
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	225e      	movs	r2, #94	@ 0x5e
 8003de8:	5a9b      	ldrh	r3, [r3, r2]
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	3b01      	subs	r3, #1
 8003dee:	b299      	uxth	r1, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	225e      	movs	r2, #94	@ 0x5e
 8003df4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	225e      	movs	r2, #94	@ 0x5e
 8003dfa:	5a9b      	ldrh	r3, [r3, r2]
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d000      	beq.n	8003e04 <UART_RxISR_16BIT+0x6c>
 8003e02:	e09c      	b.n	8003f3e <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003e04:	f3ef 8310 	mrs	r3, PRIMASK
 8003e08:	623b      	str	r3, [r7, #32]
  return(result);
 8003e0a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e0e:	2301      	movs	r3, #1
 8003e10:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e14:	f383 8810 	msr	PRIMASK, r3
}
 8003e18:	46c0      	nop			@ (mov r8, r8)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4948      	ldr	r1, [pc, #288]	@ (8003f48 <UART_RxISR_16BIT+0x1b0>)
 8003e26:	400a      	ands	r2, r1
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e30:	f383 8810 	msr	PRIMASK, r3
}
 8003e34:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003e36:	f3ef 8310 	mrs	r3, PRIMASK
 8003e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8003e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e40:	2301      	movs	r3, #1
 8003e42:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e46:	f383 8810 	msr	PRIMASK, r3
}
 8003e4a:	46c0      	nop			@ (mov r8, r8)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	689a      	ldr	r2, [r3, #8]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2101      	movs	r1, #1
 8003e58:	438a      	bics	r2, r1
 8003e5a:	609a      	str	r2, [r3, #8]
 8003e5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e5e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e62:	f383 8810 	msr	PRIMASK, r3
}
 8003e66:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	228c      	movs	r2, #140	@ 0x8c
 8003e6c:	2120      	movs	r1, #32
 8003e6e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	2380      	movs	r3, #128	@ 0x80
 8003e84:	041b      	lsls	r3, r3, #16
 8003e86:	4013      	ands	r3, r2
 8003e88:	d018      	beq.n	8003ebc <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003e8a:	f3ef 8310 	mrs	r3, PRIMASK
 8003e8e:	617b      	str	r3, [r7, #20]
  return(result);
 8003e90:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e94:	2301      	movs	r3, #1
 8003e96:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	f383 8810 	msr	PRIMASK, r3
}
 8003e9e:	46c0      	nop			@ (mov r8, r8)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4928      	ldr	r1, [pc, #160]	@ (8003f4c <UART_RxISR_16BIT+0x1b4>)
 8003eac:	400a      	ands	r2, r1
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003eb2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	f383 8810 	msr	PRIMASK, r3
}
 8003eba:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d12f      	bne.n	8003f24 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003eca:	f3ef 8310 	mrs	r3, PRIMASK
 8003ece:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ed0:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ed2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f383 8810 	msr	PRIMASK, r3
}
 8003ede:	46c0      	nop			@ (mov r8, r8)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2110      	movs	r1, #16
 8003eec:	438a      	bics	r2, r1
 8003eee:	601a      	str	r2, [r3, #0]
 8003ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ef2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	f383 8810 	msr	PRIMASK, r3
}
 8003efa:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	69db      	ldr	r3, [r3, #28]
 8003f02:	2210      	movs	r2, #16
 8003f04:	4013      	ands	r3, r2
 8003f06:	2b10      	cmp	r3, #16
 8003f08:	d103      	bne.n	8003f12 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2210      	movs	r2, #16
 8003f10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	225c      	movs	r2, #92	@ 0x5c
 8003f16:	5a9a      	ldrh	r2, [r3, r2]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	0011      	movs	r1, r2
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	f7ff f93f 	bl	80031a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003f22:	e00c      	b.n	8003f3e <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	0018      	movs	r0, r3
 8003f28:	f7fc fb08 	bl	800053c <HAL_UART_RxCpltCallback>
}
 8003f2c:	e007      	b.n	8003f3e <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	699a      	ldr	r2, [r3, #24]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2108      	movs	r1, #8
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	619a      	str	r2, [r3, #24]
}
 8003f3e:	46c0      	nop			@ (mov r8, r8)
 8003f40:	46bd      	mov	sp, r7
 8003f42:	b014      	add	sp, #80	@ 0x50
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	46c0      	nop			@ (mov r8, r8)
 8003f48:	fffffedf 	.word	0xfffffedf
 8003f4c:	fbffffff 	.word	0xfbffffff

08003f50 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b0a0      	sub	sp, #128	@ 0x80
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003f58:	237a      	movs	r3, #122	@ 0x7a
 8003f5a:	18fb      	adds	r3, r7, r3
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	2160      	movs	r1, #96	@ 0x60
 8003f60:	5a52      	ldrh	r2, [r2, r1]
 8003f62:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	228c      	movs	r2, #140	@ 0x8c
 8003f80:	589b      	ldr	r3, [r3, r2]
 8003f82:	2b22      	cmp	r3, #34	@ 0x22
 8003f84:	d000      	beq.n	8003f88 <UART_RxISR_8BIT_FIFOEN+0x38>
 8003f86:	e165      	b.n	8004254 <UART_RxISR_8BIT_FIFOEN+0x304>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003f88:	236e      	movs	r3, #110	@ 0x6e
 8003f8a:	18fb      	adds	r3, r7, r3
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	2168      	movs	r1, #104	@ 0x68
 8003f90:	5a52      	ldrh	r2, [r2, r1]
 8003f92:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003f94:	e10c      	b.n	80041b0 <UART_RxISR_8BIT_FIFOEN+0x260>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f9c:	216c      	movs	r1, #108	@ 0x6c
 8003f9e:	187b      	adds	r3, r7, r1
 8003fa0:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003fa2:	187b      	adds	r3, r7, r1
 8003fa4:	881b      	ldrh	r3, [r3, #0]
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	237a      	movs	r3, #122	@ 0x7a
 8003faa:	18fb      	adds	r3, r7, r3
 8003fac:	881b      	ldrh	r3, [r3, #0]
 8003fae:	b2d9      	uxtb	r1, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fb4:	400a      	ands	r2, r1
 8003fb6:	b2d2      	uxtb	r2, r2
 8003fb8:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fbe:	1c5a      	adds	r2, r3, #1
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	225e      	movs	r2, #94	@ 0x5e
 8003fc8:	5a9b      	ldrh	r3, [r3, r2]
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	b299      	uxth	r1, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	225e      	movs	r2, #94	@ 0x5e
 8003fd4:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	69db      	ldr	r3, [r3, #28]
 8003fdc:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003fde:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003fe0:	2207      	movs	r2, #7
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	d049      	beq.n	800407a <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003fe6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003fe8:	2201      	movs	r2, #1
 8003fea:	4013      	ands	r3, r2
 8003fec:	d010      	beq.n	8004010 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8003fee:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003ff0:	2380      	movs	r3, #128	@ 0x80
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	d00b      	beq.n	8004010 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2290      	movs	r2, #144	@ 0x90
 8004004:	589b      	ldr	r3, [r3, r2]
 8004006:	2201      	movs	r2, #1
 8004008:	431a      	orrs	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2190      	movs	r1, #144	@ 0x90
 800400e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004010:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004012:	2202      	movs	r2, #2
 8004014:	4013      	ands	r3, r2
 8004016:	d00f      	beq.n	8004038 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8004018:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800401a:	2201      	movs	r2, #1
 800401c:	4013      	ands	r3, r2
 800401e:	d00b      	beq.n	8004038 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2202      	movs	r2, #2
 8004026:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2290      	movs	r2, #144	@ 0x90
 800402c:	589b      	ldr	r3, [r3, r2]
 800402e:	2204      	movs	r2, #4
 8004030:	431a      	orrs	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2190      	movs	r1, #144	@ 0x90
 8004036:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004038:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800403a:	2204      	movs	r2, #4
 800403c:	4013      	ands	r3, r2
 800403e:	d00f      	beq.n	8004060 <UART_RxISR_8BIT_FIFOEN+0x110>
 8004040:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004042:	2201      	movs	r2, #1
 8004044:	4013      	ands	r3, r2
 8004046:	d00b      	beq.n	8004060 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2204      	movs	r2, #4
 800404e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2290      	movs	r2, #144	@ 0x90
 8004054:	589b      	ldr	r3, [r3, r2]
 8004056:	2202      	movs	r2, #2
 8004058:	431a      	orrs	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2190      	movs	r1, #144	@ 0x90
 800405e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2290      	movs	r2, #144	@ 0x90
 8004064:	589b      	ldr	r3, [r3, r2]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d007      	beq.n	800407a <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	0018      	movs	r0, r3
 800406e:	f7ff f88f 	bl	8003190 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2290      	movs	r2, #144	@ 0x90
 8004076:	2100      	movs	r1, #0
 8004078:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	225e      	movs	r2, #94	@ 0x5e
 800407e:	5a9b      	ldrh	r3, [r3, r2]
 8004080:	b29b      	uxth	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d000      	beq.n	8004088 <UART_RxISR_8BIT_FIFOEN+0x138>
 8004086:	e093      	b.n	80041b0 <UART_RxISR_8BIT_FIFOEN+0x260>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004088:	f3ef 8310 	mrs	r3, PRIMASK
 800408c:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 800408e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004090:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004092:	2301      	movs	r3, #1
 8004094:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004096:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004098:	f383 8810 	msr	PRIMASK, r3
}
 800409c:	46c0      	nop			@ (mov r8, r8)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4970      	ldr	r1, [pc, #448]	@ (800426c <UART_RxISR_8BIT_FIFOEN+0x31c>)
 80040aa:	400a      	ands	r2, r1
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040b0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040b4:	f383 8810 	msr	PRIMASK, r3
}
 80040b8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80040ba:	f3ef 8310 	mrs	r3, PRIMASK
 80040be:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 80040c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80040c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80040c4:	2301      	movs	r3, #1
 80040c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040ca:	f383 8810 	msr	PRIMASK, r3
}
 80040ce:	46c0      	nop			@ (mov r8, r8)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	689a      	ldr	r2, [r3, #8]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4965      	ldr	r1, [pc, #404]	@ (8004270 <UART_RxISR_8BIT_FIFOEN+0x320>)
 80040dc:	400a      	ands	r2, r1
 80040de:	609a      	str	r2, [r3, #8]
 80040e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040e6:	f383 8810 	msr	PRIMASK, r3
}
 80040ea:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	228c      	movs	r2, #140	@ 0x8c
 80040f0:	2120      	movs	r1, #32
 80040f2:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	2380      	movs	r3, #128	@ 0x80
 8004108:	041b      	lsls	r3, r3, #16
 800410a:	4013      	ands	r3, r2
 800410c:	d018      	beq.n	8004140 <UART_RxISR_8BIT_FIFOEN+0x1f0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800410e:	f3ef 8310 	mrs	r3, PRIMASK
 8004112:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8004114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004116:	663b      	str	r3, [r7, #96]	@ 0x60
 8004118:	2301      	movs	r3, #1
 800411a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800411c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800411e:	f383 8810 	msr	PRIMASK, r3
}
 8004122:	46c0      	nop			@ (mov r8, r8)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4951      	ldr	r1, [pc, #324]	@ (8004274 <UART_RxISR_8BIT_FIFOEN+0x324>)
 8004130:	400a      	ands	r2, r1
 8004132:	601a      	str	r2, [r3, #0]
 8004134:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004136:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800413a:	f383 8810 	msr	PRIMASK, r3
}
 800413e:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004144:	2b01      	cmp	r3, #1
 8004146:	d12f      	bne.n	80041a8 <UART_RxISR_8BIT_FIFOEN+0x258>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800414e:	f3ef 8310 	mrs	r3, PRIMASK
 8004152:	623b      	str	r3, [r7, #32]
  return(result);
 8004154:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004156:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004158:	2301      	movs	r3, #1
 800415a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800415c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415e:	f383 8810 	msr	PRIMASK, r3
}
 8004162:	46c0      	nop			@ (mov r8, r8)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2110      	movs	r1, #16
 8004170:	438a      	bics	r2, r1
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004176:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800417a:	f383 8810 	msr	PRIMASK, r3
}
 800417e:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	2210      	movs	r2, #16
 8004188:	4013      	ands	r3, r2
 800418a:	2b10      	cmp	r3, #16
 800418c:	d103      	bne.n	8004196 <UART_RxISR_8BIT_FIFOEN+0x246>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2210      	movs	r2, #16
 8004194:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	225c      	movs	r2, #92	@ 0x5c
 800419a:	5a9a      	ldrh	r2, [r3, r2]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	0011      	movs	r1, r2
 80041a0:	0018      	movs	r0, r3
 80041a2:	f7fe fffd 	bl	80031a0 <HAL_UARTEx_RxEventCallback>
 80041a6:	e003      	b.n	80041b0 <UART_RxISR_8BIT_FIFOEN+0x260>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	0018      	movs	r0, r3
 80041ac:	f7fc f9c6 	bl	800053c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80041b0:	236e      	movs	r3, #110	@ 0x6e
 80041b2:	18fb      	adds	r3, r7, r3
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d004      	beq.n	80041c4 <UART_RxISR_8BIT_FIFOEN+0x274>
 80041ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041bc:	2220      	movs	r2, #32
 80041be:	4013      	ands	r3, r2
 80041c0:	d000      	beq.n	80041c4 <UART_RxISR_8BIT_FIFOEN+0x274>
 80041c2:	e6e8      	b.n	8003f96 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80041c4:	205a      	movs	r0, #90	@ 0x5a
 80041c6:	183b      	adds	r3, r7, r0
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	215e      	movs	r1, #94	@ 0x5e
 80041cc:	5a52      	ldrh	r2, [r2, r1]
 80041ce:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80041d0:	0001      	movs	r1, r0
 80041d2:	187b      	adds	r3, r7, r1
 80041d4:	881b      	ldrh	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d044      	beq.n	8004264 <UART_RxISR_8BIT_FIFOEN+0x314>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2268      	movs	r2, #104	@ 0x68
 80041de:	5a9b      	ldrh	r3, [r3, r2]
 80041e0:	187a      	adds	r2, r7, r1
 80041e2:	8812      	ldrh	r2, [r2, #0]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d23d      	bcs.n	8004264 <UART_RxISR_8BIT_FIFOEN+0x314>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80041e8:	f3ef 8310 	mrs	r3, PRIMASK
 80041ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80041ee:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80041f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80041f2:	2301      	movs	r3, #1
 80041f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f383 8810 	msr	PRIMASK, r3
}
 80041fc:	46c0      	nop			@ (mov r8, r8)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	689a      	ldr	r2, [r3, #8]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	491b      	ldr	r1, [pc, #108]	@ (8004278 <UART_RxISR_8BIT_FIFOEN+0x328>)
 800420a:	400a      	ands	r2, r1
 800420c:	609a      	str	r2, [r3, #8]
 800420e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004210:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	f383 8810 	msr	PRIMASK, r3
}
 8004218:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a17      	ldr	r2, [pc, #92]	@ (800427c <UART_RxISR_8BIT_FIFOEN+0x32c>)
 800421e:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004220:	f3ef 8310 	mrs	r3, PRIMASK
 8004224:	617b      	str	r3, [r7, #20]
  return(result);
 8004226:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004228:	653b      	str	r3, [r7, #80]	@ 0x50
 800422a:	2301      	movs	r3, #1
 800422c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	f383 8810 	msr	PRIMASK, r3
}
 8004234:	46c0      	nop			@ (mov r8, r8)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2120      	movs	r1, #32
 8004242:	430a      	orrs	r2, r1
 8004244:	601a      	str	r2, [r3, #0]
 8004246:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004248:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	f383 8810 	msr	PRIMASK, r3
}
 8004250:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004252:	e007      	b.n	8004264 <UART_RxISR_8BIT_FIFOEN+0x314>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	699a      	ldr	r2, [r3, #24]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2108      	movs	r1, #8
 8004260:	430a      	orrs	r2, r1
 8004262:	619a      	str	r2, [r3, #24]
}
 8004264:	46c0      	nop			@ (mov r8, r8)
 8004266:	46bd      	mov	sp, r7
 8004268:	b020      	add	sp, #128	@ 0x80
 800426a:	bd80      	pop	{r7, pc}
 800426c:	fffffeff 	.word	0xfffffeff
 8004270:	effffffe 	.word	0xeffffffe
 8004274:	fbffffff 	.word	0xfbffffff
 8004278:	efffffff 	.word	0xefffffff
 800427c:	08003be1 	.word	0x08003be1

08004280 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b0a2      	sub	sp, #136	@ 0x88
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004288:	2382      	movs	r3, #130	@ 0x82
 800428a:	18fb      	adds	r3, r7, r3
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	2160      	movs	r1, #96	@ 0x60
 8004290:	5a52      	ldrh	r2, [r2, r1]
 8004292:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	2284      	movs	r2, #132	@ 0x84
 800429c:	18ba      	adds	r2, r7, r2
 800429e:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	228c      	movs	r2, #140	@ 0x8c
 80042b4:	589b      	ldr	r3, [r3, r2]
 80042b6:	2b22      	cmp	r3, #34	@ 0x22
 80042b8:	d000      	beq.n	80042bc <UART_RxISR_16BIT_FIFOEN+0x3c>
 80042ba:	e16f      	b.n	800459c <UART_RxISR_16BIT_FIFOEN+0x31c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80042bc:	2376      	movs	r3, #118	@ 0x76
 80042be:	18fb      	adds	r3, r7, r3
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	2168      	movs	r1, #104	@ 0x68
 80042c4:	5a52      	ldrh	r2, [r2, r1]
 80042c6:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80042c8:	e114      	b.n	80044f4 <UART_RxISR_16BIT_FIFOEN+0x274>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042d0:	2174      	movs	r1, #116	@ 0x74
 80042d2:	187b      	adds	r3, r7, r1
 80042d4:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042da:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 80042dc:	187b      	adds	r3, r7, r1
 80042de:	2282      	movs	r2, #130	@ 0x82
 80042e0:	18ba      	adds	r2, r7, r2
 80042e2:	881b      	ldrh	r3, [r3, #0]
 80042e4:	8812      	ldrh	r2, [r2, #0]
 80042e6:	4013      	ands	r3, r2
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042f2:	1c9a      	adds	r2, r3, #2
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	225e      	movs	r2, #94	@ 0x5e
 80042fc:	5a9b      	ldrh	r3, [r3, r2]
 80042fe:	b29b      	uxth	r3, r3
 8004300:	3b01      	subs	r3, #1
 8004302:	b299      	uxth	r1, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	225e      	movs	r2, #94	@ 0x5e
 8004308:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	69db      	ldr	r3, [r3, #28]
 8004310:	2184      	movs	r1, #132	@ 0x84
 8004312:	187a      	adds	r2, r7, r1
 8004314:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004316:	187b      	adds	r3, r7, r1
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2207      	movs	r2, #7
 800431c:	4013      	ands	r3, r2
 800431e:	d04e      	beq.n	80043be <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004320:	187b      	adds	r3, r7, r1
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2201      	movs	r2, #1
 8004326:	4013      	ands	r3, r2
 8004328:	d010      	beq.n	800434c <UART_RxISR_16BIT_FIFOEN+0xcc>
 800432a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800432c:	2380      	movs	r3, #128	@ 0x80
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	4013      	ands	r3, r2
 8004332:	d00b      	beq.n	800434c <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2201      	movs	r2, #1
 800433a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2290      	movs	r2, #144	@ 0x90
 8004340:	589b      	ldr	r3, [r3, r2]
 8004342:	2201      	movs	r2, #1
 8004344:	431a      	orrs	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2190      	movs	r1, #144	@ 0x90
 800434a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800434c:	2384      	movs	r3, #132	@ 0x84
 800434e:	18fb      	adds	r3, r7, r3
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2202      	movs	r2, #2
 8004354:	4013      	ands	r3, r2
 8004356:	d00f      	beq.n	8004378 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8004358:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800435a:	2201      	movs	r2, #1
 800435c:	4013      	ands	r3, r2
 800435e:	d00b      	beq.n	8004378 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2202      	movs	r2, #2
 8004366:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2290      	movs	r2, #144	@ 0x90
 800436c:	589b      	ldr	r3, [r3, r2]
 800436e:	2204      	movs	r2, #4
 8004370:	431a      	orrs	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2190      	movs	r1, #144	@ 0x90
 8004376:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004378:	2384      	movs	r3, #132	@ 0x84
 800437a:	18fb      	adds	r3, r7, r3
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2204      	movs	r2, #4
 8004380:	4013      	ands	r3, r2
 8004382:	d00f      	beq.n	80043a4 <UART_RxISR_16BIT_FIFOEN+0x124>
 8004384:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004386:	2201      	movs	r2, #1
 8004388:	4013      	ands	r3, r2
 800438a:	d00b      	beq.n	80043a4 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2204      	movs	r2, #4
 8004392:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2290      	movs	r2, #144	@ 0x90
 8004398:	589b      	ldr	r3, [r3, r2]
 800439a:	2202      	movs	r2, #2
 800439c:	431a      	orrs	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2190      	movs	r1, #144	@ 0x90
 80043a2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2290      	movs	r2, #144	@ 0x90
 80043a8:	589b      	ldr	r3, [r3, r2]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d007      	beq.n	80043be <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	0018      	movs	r0, r3
 80043b2:	f7fe feed 	bl	8003190 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2290      	movs	r2, #144	@ 0x90
 80043ba:	2100      	movs	r1, #0
 80043bc:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	225e      	movs	r2, #94	@ 0x5e
 80043c2:	5a9b      	ldrh	r3, [r3, r2]
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d000      	beq.n	80043cc <UART_RxISR_16BIT_FIFOEN+0x14c>
 80043ca:	e093      	b.n	80044f4 <UART_RxISR_16BIT_FIFOEN+0x274>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80043cc:	f3ef 8310 	mrs	r3, PRIMASK
 80043d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80043d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80043d6:	2301      	movs	r3, #1
 80043d8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043dc:	f383 8810 	msr	PRIMASK, r3
}
 80043e0:	46c0      	nop			@ (mov r8, r8)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4971      	ldr	r1, [pc, #452]	@ (80045b4 <UART_RxISR_16BIT_FIFOEN+0x334>)
 80043ee:	400a      	ands	r2, r1
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043f4:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043f8:	f383 8810 	msr	PRIMASK, r3
}
 80043fc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80043fe:	f3ef 8310 	mrs	r3, PRIMASK
 8004402:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8004404:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004406:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004408:	2301      	movs	r3, #1
 800440a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800440c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800440e:	f383 8810 	msr	PRIMASK, r3
}
 8004412:	46c0      	nop			@ (mov r8, r8)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689a      	ldr	r2, [r3, #8]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4966      	ldr	r1, [pc, #408]	@ (80045b8 <UART_RxISR_16BIT_FIFOEN+0x338>)
 8004420:	400a      	ands	r2, r1
 8004422:	609a      	str	r2, [r3, #8]
 8004424:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004426:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004428:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800442a:	f383 8810 	msr	PRIMASK, r3
}
 800442e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	228c      	movs	r2, #140	@ 0x8c
 8004434:	2120      	movs	r1, #32
 8004436:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	2380      	movs	r3, #128	@ 0x80
 800444c:	041b      	lsls	r3, r3, #16
 800444e:	4013      	ands	r3, r2
 8004450:	d018      	beq.n	8004484 <UART_RxISR_16BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004452:	f3ef 8310 	mrs	r3, PRIMASK
 8004456:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800445a:	667b      	str	r3, [r7, #100]	@ 0x64
 800445c:	2301      	movs	r3, #1
 800445e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004462:	f383 8810 	msr	PRIMASK, r3
}
 8004466:	46c0      	nop			@ (mov r8, r8)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4952      	ldr	r1, [pc, #328]	@ (80045bc <UART_RxISR_16BIT_FIFOEN+0x33c>)
 8004474:	400a      	ands	r2, r1
 8004476:	601a      	str	r2, [r3, #0]
 8004478:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800447a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800447c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800447e:	f383 8810 	msr	PRIMASK, r3
}
 8004482:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004488:	2b01      	cmp	r3, #1
 800448a:	d12f      	bne.n	80044ec <UART_RxISR_16BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004492:	f3ef 8310 	mrs	r3, PRIMASK
 8004496:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800449a:	663b      	str	r3, [r7, #96]	@ 0x60
 800449c:	2301      	movs	r3, #1
 800449e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044a2:	f383 8810 	msr	PRIMASK, r3
}
 80044a6:	46c0      	nop			@ (mov r8, r8)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2110      	movs	r1, #16
 80044b4:	438a      	bics	r2, r1
 80044b6:	601a      	str	r2, [r3, #0]
 80044b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044be:	f383 8810 	msr	PRIMASK, r3
}
 80044c2:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	2210      	movs	r2, #16
 80044cc:	4013      	ands	r3, r2
 80044ce:	2b10      	cmp	r3, #16
 80044d0:	d103      	bne.n	80044da <UART_RxISR_16BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2210      	movs	r2, #16
 80044d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	225c      	movs	r2, #92	@ 0x5c
 80044de:	5a9a      	ldrh	r2, [r3, r2]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	0011      	movs	r1, r2
 80044e4:	0018      	movs	r0, r3
 80044e6:	f7fe fe5b 	bl	80031a0 <HAL_UARTEx_RxEventCallback>
 80044ea:	e003      	b.n	80044f4 <UART_RxISR_16BIT_FIFOEN+0x274>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	0018      	movs	r0, r3
 80044f0:	f7fc f824 	bl	800053c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80044f4:	2376      	movs	r3, #118	@ 0x76
 80044f6:	18fb      	adds	r3, r7, r3
 80044f8:	881b      	ldrh	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d006      	beq.n	800450c <UART_RxISR_16BIT_FIFOEN+0x28c>
 80044fe:	2384      	movs	r3, #132	@ 0x84
 8004500:	18fb      	adds	r3, r7, r3
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2220      	movs	r2, #32
 8004506:	4013      	ands	r3, r2
 8004508:	d000      	beq.n	800450c <UART_RxISR_16BIT_FIFOEN+0x28c>
 800450a:	e6de      	b.n	80042ca <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800450c:	205e      	movs	r0, #94	@ 0x5e
 800450e:	183b      	adds	r3, r7, r0
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	215e      	movs	r1, #94	@ 0x5e
 8004514:	5a52      	ldrh	r2, [r2, r1]
 8004516:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004518:	0001      	movs	r1, r0
 800451a:	187b      	adds	r3, r7, r1
 800451c:	881b      	ldrh	r3, [r3, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d044      	beq.n	80045ac <UART_RxISR_16BIT_FIFOEN+0x32c>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2268      	movs	r2, #104	@ 0x68
 8004526:	5a9b      	ldrh	r3, [r3, r2]
 8004528:	187a      	adds	r2, r7, r1
 800452a:	8812      	ldrh	r2, [r2, #0]
 800452c:	429a      	cmp	r2, r3
 800452e:	d23d      	bcs.n	80045ac <UART_RxISR_16BIT_FIFOEN+0x32c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004530:	f3ef 8310 	mrs	r3, PRIMASK
 8004534:	60fb      	str	r3, [r7, #12]
  return(result);
 8004536:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004538:	65bb      	str	r3, [r7, #88]	@ 0x58
 800453a:	2301      	movs	r3, #1
 800453c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	f383 8810 	msr	PRIMASK, r3
}
 8004544:	46c0      	nop			@ (mov r8, r8)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	491b      	ldr	r1, [pc, #108]	@ (80045c0 <UART_RxISR_16BIT_FIFOEN+0x340>)
 8004552:	400a      	ands	r2, r1
 8004554:	609a      	str	r2, [r3, #8]
 8004556:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004558:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	f383 8810 	msr	PRIMASK, r3
}
 8004560:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a17      	ldr	r2, [pc, #92]	@ (80045c4 <UART_RxISR_16BIT_FIFOEN+0x344>)
 8004566:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004568:	f3ef 8310 	mrs	r3, PRIMASK
 800456c:	61bb      	str	r3, [r7, #24]
  return(result);
 800456e:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004570:	657b      	str	r3, [r7, #84]	@ 0x54
 8004572:	2301      	movs	r3, #1
 8004574:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	f383 8810 	msr	PRIMASK, r3
}
 800457c:	46c0      	nop			@ (mov r8, r8)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2120      	movs	r1, #32
 800458a:	430a      	orrs	r2, r1
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004590:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004592:	6a3b      	ldr	r3, [r7, #32]
 8004594:	f383 8810 	msr	PRIMASK, r3
}
 8004598:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800459a:	e007      	b.n	80045ac <UART_RxISR_16BIT_FIFOEN+0x32c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	699a      	ldr	r2, [r3, #24]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2108      	movs	r1, #8
 80045a8:	430a      	orrs	r2, r1
 80045aa:	619a      	str	r2, [r3, #24]
}
 80045ac:	46c0      	nop			@ (mov r8, r8)
 80045ae:	46bd      	mov	sp, r7
 80045b0:	b022      	add	sp, #136	@ 0x88
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	fffffeff 	.word	0xfffffeff
 80045b8:	effffffe 	.word	0xeffffffe
 80045bc:	fbffffff 	.word	0xfbffffff
 80045c0:	efffffff 	.word	0xefffffff
 80045c4:	08003d99 	.word	0x08003d99

080045c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80045d0:	46c0      	nop			@ (mov r8, r8)
 80045d2:	46bd      	mov	sp, r7
 80045d4:	b002      	add	sp, #8
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80045e0:	46c0      	nop			@ (mov r8, r8)
 80045e2:	46bd      	mov	sp, r7
 80045e4:	b002      	add	sp, #8
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80045f0:	46c0      	nop			@ (mov r8, r8)
 80045f2:	46bd      	mov	sp, r7
 80045f4:	b002      	add	sp, #8
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <std>:
 80045f8:	2300      	movs	r3, #0
 80045fa:	b510      	push	{r4, lr}
 80045fc:	0004      	movs	r4, r0
 80045fe:	6003      	str	r3, [r0, #0]
 8004600:	6043      	str	r3, [r0, #4]
 8004602:	6083      	str	r3, [r0, #8]
 8004604:	8181      	strh	r1, [r0, #12]
 8004606:	6643      	str	r3, [r0, #100]	@ 0x64
 8004608:	81c2      	strh	r2, [r0, #14]
 800460a:	6103      	str	r3, [r0, #16]
 800460c:	6143      	str	r3, [r0, #20]
 800460e:	6183      	str	r3, [r0, #24]
 8004610:	0019      	movs	r1, r3
 8004612:	2208      	movs	r2, #8
 8004614:	305c      	adds	r0, #92	@ 0x5c
 8004616:	f000 f9ff 	bl	8004a18 <memset>
 800461a:	4b0b      	ldr	r3, [pc, #44]	@ (8004648 <std+0x50>)
 800461c:	6224      	str	r4, [r4, #32]
 800461e:	6263      	str	r3, [r4, #36]	@ 0x24
 8004620:	4b0a      	ldr	r3, [pc, #40]	@ (800464c <std+0x54>)
 8004622:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004624:	4b0a      	ldr	r3, [pc, #40]	@ (8004650 <std+0x58>)
 8004626:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004628:	4b0a      	ldr	r3, [pc, #40]	@ (8004654 <std+0x5c>)
 800462a:	6323      	str	r3, [r4, #48]	@ 0x30
 800462c:	4b0a      	ldr	r3, [pc, #40]	@ (8004658 <std+0x60>)
 800462e:	429c      	cmp	r4, r3
 8004630:	d005      	beq.n	800463e <std+0x46>
 8004632:	4b0a      	ldr	r3, [pc, #40]	@ (800465c <std+0x64>)
 8004634:	429c      	cmp	r4, r3
 8004636:	d002      	beq.n	800463e <std+0x46>
 8004638:	4b09      	ldr	r3, [pc, #36]	@ (8004660 <std+0x68>)
 800463a:	429c      	cmp	r4, r3
 800463c:	d103      	bne.n	8004646 <std+0x4e>
 800463e:	0020      	movs	r0, r4
 8004640:	3058      	adds	r0, #88	@ 0x58
 8004642:	f000 fa69 	bl	8004b18 <__retarget_lock_init_recursive>
 8004646:	bd10      	pop	{r4, pc}
 8004648:	08004841 	.word	0x08004841
 800464c:	08004869 	.word	0x08004869
 8004650:	080048a1 	.word	0x080048a1
 8004654:	080048cd 	.word	0x080048cd
 8004658:	2000028c 	.word	0x2000028c
 800465c:	200002f4 	.word	0x200002f4
 8004660:	2000035c 	.word	0x2000035c

08004664 <stdio_exit_handler>:
 8004664:	b510      	push	{r4, lr}
 8004666:	4a03      	ldr	r2, [pc, #12]	@ (8004674 <stdio_exit_handler+0x10>)
 8004668:	4903      	ldr	r1, [pc, #12]	@ (8004678 <stdio_exit_handler+0x14>)
 800466a:	4804      	ldr	r0, [pc, #16]	@ (800467c <stdio_exit_handler+0x18>)
 800466c:	f000 f86c 	bl	8004748 <_fwalk_sglue>
 8004670:	bd10      	pop	{r4, pc}
 8004672:	46c0      	nop			@ (mov r8, r8)
 8004674:	20000020 	.word	0x20000020
 8004678:	08004e25 	.word	0x08004e25
 800467c:	20000030 	.word	0x20000030

08004680 <cleanup_stdio>:
 8004680:	6841      	ldr	r1, [r0, #4]
 8004682:	4b0b      	ldr	r3, [pc, #44]	@ (80046b0 <cleanup_stdio+0x30>)
 8004684:	b510      	push	{r4, lr}
 8004686:	0004      	movs	r4, r0
 8004688:	4299      	cmp	r1, r3
 800468a:	d001      	beq.n	8004690 <cleanup_stdio+0x10>
 800468c:	f000 fbca 	bl	8004e24 <_fflush_r>
 8004690:	68a1      	ldr	r1, [r4, #8]
 8004692:	4b08      	ldr	r3, [pc, #32]	@ (80046b4 <cleanup_stdio+0x34>)
 8004694:	4299      	cmp	r1, r3
 8004696:	d002      	beq.n	800469e <cleanup_stdio+0x1e>
 8004698:	0020      	movs	r0, r4
 800469a:	f000 fbc3 	bl	8004e24 <_fflush_r>
 800469e:	68e1      	ldr	r1, [r4, #12]
 80046a0:	4b05      	ldr	r3, [pc, #20]	@ (80046b8 <cleanup_stdio+0x38>)
 80046a2:	4299      	cmp	r1, r3
 80046a4:	d002      	beq.n	80046ac <cleanup_stdio+0x2c>
 80046a6:	0020      	movs	r0, r4
 80046a8:	f000 fbbc 	bl	8004e24 <_fflush_r>
 80046ac:	bd10      	pop	{r4, pc}
 80046ae:	46c0      	nop			@ (mov r8, r8)
 80046b0:	2000028c 	.word	0x2000028c
 80046b4:	200002f4 	.word	0x200002f4
 80046b8:	2000035c 	.word	0x2000035c

080046bc <global_stdio_init.part.0>:
 80046bc:	b510      	push	{r4, lr}
 80046be:	4b09      	ldr	r3, [pc, #36]	@ (80046e4 <global_stdio_init.part.0+0x28>)
 80046c0:	4a09      	ldr	r2, [pc, #36]	@ (80046e8 <global_stdio_init.part.0+0x2c>)
 80046c2:	2104      	movs	r1, #4
 80046c4:	601a      	str	r2, [r3, #0]
 80046c6:	4809      	ldr	r0, [pc, #36]	@ (80046ec <global_stdio_init.part.0+0x30>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	f7ff ff95 	bl	80045f8 <std>
 80046ce:	2201      	movs	r2, #1
 80046d0:	2109      	movs	r1, #9
 80046d2:	4807      	ldr	r0, [pc, #28]	@ (80046f0 <global_stdio_init.part.0+0x34>)
 80046d4:	f7ff ff90 	bl	80045f8 <std>
 80046d8:	2202      	movs	r2, #2
 80046da:	2112      	movs	r1, #18
 80046dc:	4805      	ldr	r0, [pc, #20]	@ (80046f4 <global_stdio_init.part.0+0x38>)
 80046de:	f7ff ff8b 	bl	80045f8 <std>
 80046e2:	bd10      	pop	{r4, pc}
 80046e4:	200003c4 	.word	0x200003c4
 80046e8:	08004665 	.word	0x08004665
 80046ec:	2000028c 	.word	0x2000028c
 80046f0:	200002f4 	.word	0x200002f4
 80046f4:	2000035c 	.word	0x2000035c

080046f8 <__sfp_lock_acquire>:
 80046f8:	b510      	push	{r4, lr}
 80046fa:	4802      	ldr	r0, [pc, #8]	@ (8004704 <__sfp_lock_acquire+0xc>)
 80046fc:	f000 fa0d 	bl	8004b1a <__retarget_lock_acquire_recursive>
 8004700:	bd10      	pop	{r4, pc}
 8004702:	46c0      	nop			@ (mov r8, r8)
 8004704:	200003cd 	.word	0x200003cd

08004708 <__sfp_lock_release>:
 8004708:	b510      	push	{r4, lr}
 800470a:	4802      	ldr	r0, [pc, #8]	@ (8004714 <__sfp_lock_release+0xc>)
 800470c:	f000 fa06 	bl	8004b1c <__retarget_lock_release_recursive>
 8004710:	bd10      	pop	{r4, pc}
 8004712:	46c0      	nop			@ (mov r8, r8)
 8004714:	200003cd 	.word	0x200003cd

08004718 <__sinit>:
 8004718:	b510      	push	{r4, lr}
 800471a:	0004      	movs	r4, r0
 800471c:	f7ff ffec 	bl	80046f8 <__sfp_lock_acquire>
 8004720:	6a23      	ldr	r3, [r4, #32]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d002      	beq.n	800472c <__sinit+0x14>
 8004726:	f7ff ffef 	bl	8004708 <__sfp_lock_release>
 800472a:	bd10      	pop	{r4, pc}
 800472c:	4b04      	ldr	r3, [pc, #16]	@ (8004740 <__sinit+0x28>)
 800472e:	6223      	str	r3, [r4, #32]
 8004730:	4b04      	ldr	r3, [pc, #16]	@ (8004744 <__sinit+0x2c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1f6      	bne.n	8004726 <__sinit+0xe>
 8004738:	f7ff ffc0 	bl	80046bc <global_stdio_init.part.0>
 800473c:	e7f3      	b.n	8004726 <__sinit+0xe>
 800473e:	46c0      	nop			@ (mov r8, r8)
 8004740:	08004681 	.word	0x08004681
 8004744:	200003c4 	.word	0x200003c4

08004748 <_fwalk_sglue>:
 8004748:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800474a:	0014      	movs	r4, r2
 800474c:	2600      	movs	r6, #0
 800474e:	9000      	str	r0, [sp, #0]
 8004750:	9101      	str	r1, [sp, #4]
 8004752:	68a5      	ldr	r5, [r4, #8]
 8004754:	6867      	ldr	r7, [r4, #4]
 8004756:	3f01      	subs	r7, #1
 8004758:	d504      	bpl.n	8004764 <_fwalk_sglue+0x1c>
 800475a:	6824      	ldr	r4, [r4, #0]
 800475c:	2c00      	cmp	r4, #0
 800475e:	d1f8      	bne.n	8004752 <_fwalk_sglue+0xa>
 8004760:	0030      	movs	r0, r6
 8004762:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004764:	89ab      	ldrh	r3, [r5, #12]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d908      	bls.n	800477c <_fwalk_sglue+0x34>
 800476a:	220e      	movs	r2, #14
 800476c:	5eab      	ldrsh	r3, [r5, r2]
 800476e:	3301      	adds	r3, #1
 8004770:	d004      	beq.n	800477c <_fwalk_sglue+0x34>
 8004772:	0029      	movs	r1, r5
 8004774:	9800      	ldr	r0, [sp, #0]
 8004776:	9b01      	ldr	r3, [sp, #4]
 8004778:	4798      	blx	r3
 800477a:	4306      	orrs	r6, r0
 800477c:	3568      	adds	r5, #104	@ 0x68
 800477e:	e7ea      	b.n	8004756 <_fwalk_sglue+0xe>

08004780 <_puts_r>:
 8004780:	6a03      	ldr	r3, [r0, #32]
 8004782:	b570      	push	{r4, r5, r6, lr}
 8004784:	0005      	movs	r5, r0
 8004786:	000e      	movs	r6, r1
 8004788:	6884      	ldr	r4, [r0, #8]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <_puts_r+0x12>
 800478e:	f7ff ffc3 	bl	8004718 <__sinit>
 8004792:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004794:	07db      	lsls	r3, r3, #31
 8004796:	d405      	bmi.n	80047a4 <_puts_r+0x24>
 8004798:	89a3      	ldrh	r3, [r4, #12]
 800479a:	059b      	lsls	r3, r3, #22
 800479c:	d402      	bmi.n	80047a4 <_puts_r+0x24>
 800479e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80047a0:	f000 f9bb 	bl	8004b1a <__retarget_lock_acquire_recursive>
 80047a4:	89a3      	ldrh	r3, [r4, #12]
 80047a6:	071b      	lsls	r3, r3, #28
 80047a8:	d502      	bpl.n	80047b0 <_puts_r+0x30>
 80047aa:	6923      	ldr	r3, [r4, #16]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d11f      	bne.n	80047f0 <_puts_r+0x70>
 80047b0:	0021      	movs	r1, r4
 80047b2:	0028      	movs	r0, r5
 80047b4:	f000 f8d2 	bl	800495c <__swsetup_r>
 80047b8:	2800      	cmp	r0, #0
 80047ba:	d019      	beq.n	80047f0 <_puts_r+0x70>
 80047bc:	2501      	movs	r5, #1
 80047be:	426d      	negs	r5, r5
 80047c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80047c2:	07db      	lsls	r3, r3, #31
 80047c4:	d405      	bmi.n	80047d2 <_puts_r+0x52>
 80047c6:	89a3      	ldrh	r3, [r4, #12]
 80047c8:	059b      	lsls	r3, r3, #22
 80047ca:	d402      	bmi.n	80047d2 <_puts_r+0x52>
 80047cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80047ce:	f000 f9a5 	bl	8004b1c <__retarget_lock_release_recursive>
 80047d2:	0028      	movs	r0, r5
 80047d4:	bd70      	pop	{r4, r5, r6, pc}
 80047d6:	3601      	adds	r6, #1
 80047d8:	60a3      	str	r3, [r4, #8]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	da04      	bge.n	80047e8 <_puts_r+0x68>
 80047de:	69a2      	ldr	r2, [r4, #24]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	dc16      	bgt.n	8004812 <_puts_r+0x92>
 80047e4:	290a      	cmp	r1, #10
 80047e6:	d014      	beq.n	8004812 <_puts_r+0x92>
 80047e8:	6823      	ldr	r3, [r4, #0]
 80047ea:	1c5a      	adds	r2, r3, #1
 80047ec:	6022      	str	r2, [r4, #0]
 80047ee:	7019      	strb	r1, [r3, #0]
 80047f0:	68a3      	ldr	r3, [r4, #8]
 80047f2:	7831      	ldrb	r1, [r6, #0]
 80047f4:	3b01      	subs	r3, #1
 80047f6:	2900      	cmp	r1, #0
 80047f8:	d1ed      	bne.n	80047d6 <_puts_r+0x56>
 80047fa:	60a3      	str	r3, [r4, #8]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	da0f      	bge.n	8004820 <_puts_r+0xa0>
 8004800:	0022      	movs	r2, r4
 8004802:	0028      	movs	r0, r5
 8004804:	310a      	adds	r1, #10
 8004806:	f000 f867 	bl	80048d8 <__swbuf_r>
 800480a:	3001      	adds	r0, #1
 800480c:	d0d6      	beq.n	80047bc <_puts_r+0x3c>
 800480e:	250a      	movs	r5, #10
 8004810:	e7d6      	b.n	80047c0 <_puts_r+0x40>
 8004812:	0022      	movs	r2, r4
 8004814:	0028      	movs	r0, r5
 8004816:	f000 f85f 	bl	80048d8 <__swbuf_r>
 800481a:	3001      	adds	r0, #1
 800481c:	d1e8      	bne.n	80047f0 <_puts_r+0x70>
 800481e:	e7cd      	b.n	80047bc <_puts_r+0x3c>
 8004820:	6823      	ldr	r3, [r4, #0]
 8004822:	1c5a      	adds	r2, r3, #1
 8004824:	6022      	str	r2, [r4, #0]
 8004826:	220a      	movs	r2, #10
 8004828:	701a      	strb	r2, [r3, #0]
 800482a:	e7f0      	b.n	800480e <_puts_r+0x8e>

0800482c <puts>:
 800482c:	b510      	push	{r4, lr}
 800482e:	4b03      	ldr	r3, [pc, #12]	@ (800483c <puts+0x10>)
 8004830:	0001      	movs	r1, r0
 8004832:	6818      	ldr	r0, [r3, #0]
 8004834:	f7ff ffa4 	bl	8004780 <_puts_r>
 8004838:	bd10      	pop	{r4, pc}
 800483a:	46c0      	nop			@ (mov r8, r8)
 800483c:	2000002c 	.word	0x2000002c

08004840 <__sread>:
 8004840:	b570      	push	{r4, r5, r6, lr}
 8004842:	000c      	movs	r4, r1
 8004844:	250e      	movs	r5, #14
 8004846:	5f49      	ldrsh	r1, [r1, r5]
 8004848:	f000 f914 	bl	8004a74 <_read_r>
 800484c:	2800      	cmp	r0, #0
 800484e:	db03      	blt.n	8004858 <__sread+0x18>
 8004850:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004852:	181b      	adds	r3, r3, r0
 8004854:	6563      	str	r3, [r4, #84]	@ 0x54
 8004856:	bd70      	pop	{r4, r5, r6, pc}
 8004858:	89a3      	ldrh	r3, [r4, #12]
 800485a:	4a02      	ldr	r2, [pc, #8]	@ (8004864 <__sread+0x24>)
 800485c:	4013      	ands	r3, r2
 800485e:	81a3      	strh	r3, [r4, #12]
 8004860:	e7f9      	b.n	8004856 <__sread+0x16>
 8004862:	46c0      	nop			@ (mov r8, r8)
 8004864:	ffffefff 	.word	0xffffefff

08004868 <__swrite>:
 8004868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486a:	001f      	movs	r7, r3
 800486c:	898b      	ldrh	r3, [r1, #12]
 800486e:	0005      	movs	r5, r0
 8004870:	000c      	movs	r4, r1
 8004872:	0016      	movs	r6, r2
 8004874:	05db      	lsls	r3, r3, #23
 8004876:	d505      	bpl.n	8004884 <__swrite+0x1c>
 8004878:	230e      	movs	r3, #14
 800487a:	5ec9      	ldrsh	r1, [r1, r3]
 800487c:	2200      	movs	r2, #0
 800487e:	2302      	movs	r3, #2
 8004880:	f000 f8e4 	bl	8004a4c <_lseek_r>
 8004884:	89a3      	ldrh	r3, [r4, #12]
 8004886:	4a05      	ldr	r2, [pc, #20]	@ (800489c <__swrite+0x34>)
 8004888:	0028      	movs	r0, r5
 800488a:	4013      	ands	r3, r2
 800488c:	81a3      	strh	r3, [r4, #12]
 800488e:	0032      	movs	r2, r6
 8004890:	230e      	movs	r3, #14
 8004892:	5ee1      	ldrsh	r1, [r4, r3]
 8004894:	003b      	movs	r3, r7
 8004896:	f000 f901 	bl	8004a9c <_write_r>
 800489a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800489c:	ffffefff 	.word	0xffffefff

080048a0 <__sseek>:
 80048a0:	b570      	push	{r4, r5, r6, lr}
 80048a2:	000c      	movs	r4, r1
 80048a4:	250e      	movs	r5, #14
 80048a6:	5f49      	ldrsh	r1, [r1, r5]
 80048a8:	f000 f8d0 	bl	8004a4c <_lseek_r>
 80048ac:	89a3      	ldrh	r3, [r4, #12]
 80048ae:	1c42      	adds	r2, r0, #1
 80048b0:	d103      	bne.n	80048ba <__sseek+0x1a>
 80048b2:	4a05      	ldr	r2, [pc, #20]	@ (80048c8 <__sseek+0x28>)
 80048b4:	4013      	ands	r3, r2
 80048b6:	81a3      	strh	r3, [r4, #12]
 80048b8:	bd70      	pop	{r4, r5, r6, pc}
 80048ba:	2280      	movs	r2, #128	@ 0x80
 80048bc:	0152      	lsls	r2, r2, #5
 80048be:	4313      	orrs	r3, r2
 80048c0:	81a3      	strh	r3, [r4, #12]
 80048c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80048c4:	e7f8      	b.n	80048b8 <__sseek+0x18>
 80048c6:	46c0      	nop			@ (mov r8, r8)
 80048c8:	ffffefff 	.word	0xffffefff

080048cc <__sclose>:
 80048cc:	b510      	push	{r4, lr}
 80048ce:	230e      	movs	r3, #14
 80048d0:	5ec9      	ldrsh	r1, [r1, r3]
 80048d2:	f000 f8a9 	bl	8004a28 <_close_r>
 80048d6:	bd10      	pop	{r4, pc}

080048d8 <__swbuf_r>:
 80048d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048da:	0006      	movs	r6, r0
 80048dc:	000d      	movs	r5, r1
 80048de:	0014      	movs	r4, r2
 80048e0:	2800      	cmp	r0, #0
 80048e2:	d004      	beq.n	80048ee <__swbuf_r+0x16>
 80048e4:	6a03      	ldr	r3, [r0, #32]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <__swbuf_r+0x16>
 80048ea:	f7ff ff15 	bl	8004718 <__sinit>
 80048ee:	69a3      	ldr	r3, [r4, #24]
 80048f0:	60a3      	str	r3, [r4, #8]
 80048f2:	89a3      	ldrh	r3, [r4, #12]
 80048f4:	071b      	lsls	r3, r3, #28
 80048f6:	d502      	bpl.n	80048fe <__swbuf_r+0x26>
 80048f8:	6923      	ldr	r3, [r4, #16]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d109      	bne.n	8004912 <__swbuf_r+0x3a>
 80048fe:	0021      	movs	r1, r4
 8004900:	0030      	movs	r0, r6
 8004902:	f000 f82b 	bl	800495c <__swsetup_r>
 8004906:	2800      	cmp	r0, #0
 8004908:	d003      	beq.n	8004912 <__swbuf_r+0x3a>
 800490a:	2501      	movs	r5, #1
 800490c:	426d      	negs	r5, r5
 800490e:	0028      	movs	r0, r5
 8004910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004912:	6923      	ldr	r3, [r4, #16]
 8004914:	6820      	ldr	r0, [r4, #0]
 8004916:	b2ef      	uxtb	r7, r5
 8004918:	1ac0      	subs	r0, r0, r3
 800491a:	6963      	ldr	r3, [r4, #20]
 800491c:	b2ed      	uxtb	r5, r5
 800491e:	4283      	cmp	r3, r0
 8004920:	dc05      	bgt.n	800492e <__swbuf_r+0x56>
 8004922:	0021      	movs	r1, r4
 8004924:	0030      	movs	r0, r6
 8004926:	f000 fa7d 	bl	8004e24 <_fflush_r>
 800492a:	2800      	cmp	r0, #0
 800492c:	d1ed      	bne.n	800490a <__swbuf_r+0x32>
 800492e:	68a3      	ldr	r3, [r4, #8]
 8004930:	3001      	adds	r0, #1
 8004932:	3b01      	subs	r3, #1
 8004934:	60a3      	str	r3, [r4, #8]
 8004936:	6823      	ldr	r3, [r4, #0]
 8004938:	1c5a      	adds	r2, r3, #1
 800493a:	6022      	str	r2, [r4, #0]
 800493c:	701f      	strb	r7, [r3, #0]
 800493e:	6963      	ldr	r3, [r4, #20]
 8004940:	4283      	cmp	r3, r0
 8004942:	d004      	beq.n	800494e <__swbuf_r+0x76>
 8004944:	89a3      	ldrh	r3, [r4, #12]
 8004946:	07db      	lsls	r3, r3, #31
 8004948:	d5e1      	bpl.n	800490e <__swbuf_r+0x36>
 800494a:	2d0a      	cmp	r5, #10
 800494c:	d1df      	bne.n	800490e <__swbuf_r+0x36>
 800494e:	0021      	movs	r1, r4
 8004950:	0030      	movs	r0, r6
 8004952:	f000 fa67 	bl	8004e24 <_fflush_r>
 8004956:	2800      	cmp	r0, #0
 8004958:	d0d9      	beq.n	800490e <__swbuf_r+0x36>
 800495a:	e7d6      	b.n	800490a <__swbuf_r+0x32>

0800495c <__swsetup_r>:
 800495c:	4b2d      	ldr	r3, [pc, #180]	@ (8004a14 <__swsetup_r+0xb8>)
 800495e:	b570      	push	{r4, r5, r6, lr}
 8004960:	0005      	movs	r5, r0
 8004962:	6818      	ldr	r0, [r3, #0]
 8004964:	000c      	movs	r4, r1
 8004966:	2800      	cmp	r0, #0
 8004968:	d004      	beq.n	8004974 <__swsetup_r+0x18>
 800496a:	6a03      	ldr	r3, [r0, #32]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <__swsetup_r+0x18>
 8004970:	f7ff fed2 	bl	8004718 <__sinit>
 8004974:	230c      	movs	r3, #12
 8004976:	5ee2      	ldrsh	r2, [r4, r3]
 8004978:	0713      	lsls	r3, r2, #28
 800497a:	d423      	bmi.n	80049c4 <__swsetup_r+0x68>
 800497c:	06d3      	lsls	r3, r2, #27
 800497e:	d407      	bmi.n	8004990 <__swsetup_r+0x34>
 8004980:	2309      	movs	r3, #9
 8004982:	602b      	str	r3, [r5, #0]
 8004984:	2340      	movs	r3, #64	@ 0x40
 8004986:	2001      	movs	r0, #1
 8004988:	4313      	orrs	r3, r2
 800498a:	81a3      	strh	r3, [r4, #12]
 800498c:	4240      	negs	r0, r0
 800498e:	e03a      	b.n	8004a06 <__swsetup_r+0xaa>
 8004990:	0752      	lsls	r2, r2, #29
 8004992:	d513      	bpl.n	80049bc <__swsetup_r+0x60>
 8004994:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004996:	2900      	cmp	r1, #0
 8004998:	d008      	beq.n	80049ac <__swsetup_r+0x50>
 800499a:	0023      	movs	r3, r4
 800499c:	3344      	adds	r3, #68	@ 0x44
 800499e:	4299      	cmp	r1, r3
 80049a0:	d002      	beq.n	80049a8 <__swsetup_r+0x4c>
 80049a2:	0028      	movs	r0, r5
 80049a4:	f000 f8bc 	bl	8004b20 <_free_r>
 80049a8:	2300      	movs	r3, #0
 80049aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80049ac:	2224      	movs	r2, #36	@ 0x24
 80049ae:	89a3      	ldrh	r3, [r4, #12]
 80049b0:	4393      	bics	r3, r2
 80049b2:	81a3      	strh	r3, [r4, #12]
 80049b4:	2300      	movs	r3, #0
 80049b6:	6063      	str	r3, [r4, #4]
 80049b8:	6923      	ldr	r3, [r4, #16]
 80049ba:	6023      	str	r3, [r4, #0]
 80049bc:	2308      	movs	r3, #8
 80049be:	89a2      	ldrh	r2, [r4, #12]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	81a3      	strh	r3, [r4, #12]
 80049c4:	6923      	ldr	r3, [r4, #16]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10b      	bne.n	80049e2 <__swsetup_r+0x86>
 80049ca:	21a0      	movs	r1, #160	@ 0xa0
 80049cc:	2280      	movs	r2, #128	@ 0x80
 80049ce:	89a3      	ldrh	r3, [r4, #12]
 80049d0:	0089      	lsls	r1, r1, #2
 80049d2:	0092      	lsls	r2, r2, #2
 80049d4:	400b      	ands	r3, r1
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d003      	beq.n	80049e2 <__swsetup_r+0x86>
 80049da:	0021      	movs	r1, r4
 80049dc:	0028      	movs	r0, r5
 80049de:	f000 fa77 	bl	8004ed0 <__smakebuf_r>
 80049e2:	230c      	movs	r3, #12
 80049e4:	5ee2      	ldrsh	r2, [r4, r3]
 80049e6:	2101      	movs	r1, #1
 80049e8:	0013      	movs	r3, r2
 80049ea:	400b      	ands	r3, r1
 80049ec:	420a      	tst	r2, r1
 80049ee:	d00b      	beq.n	8004a08 <__swsetup_r+0xac>
 80049f0:	2300      	movs	r3, #0
 80049f2:	60a3      	str	r3, [r4, #8]
 80049f4:	6963      	ldr	r3, [r4, #20]
 80049f6:	425b      	negs	r3, r3
 80049f8:	61a3      	str	r3, [r4, #24]
 80049fa:	2000      	movs	r0, #0
 80049fc:	6923      	ldr	r3, [r4, #16]
 80049fe:	4283      	cmp	r3, r0
 8004a00:	d101      	bne.n	8004a06 <__swsetup_r+0xaa>
 8004a02:	0613      	lsls	r3, r2, #24
 8004a04:	d4be      	bmi.n	8004984 <__swsetup_r+0x28>
 8004a06:	bd70      	pop	{r4, r5, r6, pc}
 8004a08:	0791      	lsls	r1, r2, #30
 8004a0a:	d400      	bmi.n	8004a0e <__swsetup_r+0xb2>
 8004a0c:	6963      	ldr	r3, [r4, #20]
 8004a0e:	60a3      	str	r3, [r4, #8]
 8004a10:	e7f3      	b.n	80049fa <__swsetup_r+0x9e>
 8004a12:	46c0      	nop			@ (mov r8, r8)
 8004a14:	2000002c 	.word	0x2000002c

08004a18 <memset>:
 8004a18:	0003      	movs	r3, r0
 8004a1a:	1882      	adds	r2, r0, r2
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d100      	bne.n	8004a22 <memset+0xa>
 8004a20:	4770      	bx	lr
 8004a22:	7019      	strb	r1, [r3, #0]
 8004a24:	3301      	adds	r3, #1
 8004a26:	e7f9      	b.n	8004a1c <memset+0x4>

08004a28 <_close_r>:
 8004a28:	2300      	movs	r3, #0
 8004a2a:	b570      	push	{r4, r5, r6, lr}
 8004a2c:	4d06      	ldr	r5, [pc, #24]	@ (8004a48 <_close_r+0x20>)
 8004a2e:	0004      	movs	r4, r0
 8004a30:	0008      	movs	r0, r1
 8004a32:	602b      	str	r3, [r5, #0]
 8004a34:	f7fb fe73 	bl	800071e <_close>
 8004a38:	1c43      	adds	r3, r0, #1
 8004a3a:	d103      	bne.n	8004a44 <_close_r+0x1c>
 8004a3c:	682b      	ldr	r3, [r5, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d000      	beq.n	8004a44 <_close_r+0x1c>
 8004a42:	6023      	str	r3, [r4, #0]
 8004a44:	bd70      	pop	{r4, r5, r6, pc}
 8004a46:	46c0      	nop			@ (mov r8, r8)
 8004a48:	200003c8 	.word	0x200003c8

08004a4c <_lseek_r>:
 8004a4c:	b570      	push	{r4, r5, r6, lr}
 8004a4e:	0004      	movs	r4, r0
 8004a50:	0008      	movs	r0, r1
 8004a52:	0011      	movs	r1, r2
 8004a54:	001a      	movs	r2, r3
 8004a56:	2300      	movs	r3, #0
 8004a58:	4d05      	ldr	r5, [pc, #20]	@ (8004a70 <_lseek_r+0x24>)
 8004a5a:	602b      	str	r3, [r5, #0]
 8004a5c:	f7fb fe80 	bl	8000760 <_lseek>
 8004a60:	1c43      	adds	r3, r0, #1
 8004a62:	d103      	bne.n	8004a6c <_lseek_r+0x20>
 8004a64:	682b      	ldr	r3, [r5, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d000      	beq.n	8004a6c <_lseek_r+0x20>
 8004a6a:	6023      	str	r3, [r4, #0]
 8004a6c:	bd70      	pop	{r4, r5, r6, pc}
 8004a6e:	46c0      	nop			@ (mov r8, r8)
 8004a70:	200003c8 	.word	0x200003c8

08004a74 <_read_r>:
 8004a74:	b570      	push	{r4, r5, r6, lr}
 8004a76:	0004      	movs	r4, r0
 8004a78:	0008      	movs	r0, r1
 8004a7a:	0011      	movs	r1, r2
 8004a7c:	001a      	movs	r2, r3
 8004a7e:	2300      	movs	r3, #0
 8004a80:	4d05      	ldr	r5, [pc, #20]	@ (8004a98 <_read_r+0x24>)
 8004a82:	602b      	str	r3, [r5, #0]
 8004a84:	f7fb fe12 	bl	80006ac <_read>
 8004a88:	1c43      	adds	r3, r0, #1
 8004a8a:	d103      	bne.n	8004a94 <_read_r+0x20>
 8004a8c:	682b      	ldr	r3, [r5, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d000      	beq.n	8004a94 <_read_r+0x20>
 8004a92:	6023      	str	r3, [r4, #0]
 8004a94:	bd70      	pop	{r4, r5, r6, pc}
 8004a96:	46c0      	nop			@ (mov r8, r8)
 8004a98:	200003c8 	.word	0x200003c8

08004a9c <_write_r>:
 8004a9c:	b570      	push	{r4, r5, r6, lr}
 8004a9e:	0004      	movs	r4, r0
 8004aa0:	0008      	movs	r0, r1
 8004aa2:	0011      	movs	r1, r2
 8004aa4:	001a      	movs	r2, r3
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	4d05      	ldr	r5, [pc, #20]	@ (8004ac0 <_write_r+0x24>)
 8004aaa:	602b      	str	r3, [r5, #0]
 8004aac:	f7fb fe1b 	bl	80006e6 <_write>
 8004ab0:	1c43      	adds	r3, r0, #1
 8004ab2:	d103      	bne.n	8004abc <_write_r+0x20>
 8004ab4:	682b      	ldr	r3, [r5, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d000      	beq.n	8004abc <_write_r+0x20>
 8004aba:	6023      	str	r3, [r4, #0]
 8004abc:	bd70      	pop	{r4, r5, r6, pc}
 8004abe:	46c0      	nop			@ (mov r8, r8)
 8004ac0:	200003c8 	.word	0x200003c8

08004ac4 <__errno>:
 8004ac4:	4b01      	ldr	r3, [pc, #4]	@ (8004acc <__errno+0x8>)
 8004ac6:	6818      	ldr	r0, [r3, #0]
 8004ac8:	4770      	bx	lr
 8004aca:	46c0      	nop			@ (mov r8, r8)
 8004acc:	2000002c 	.word	0x2000002c

08004ad0 <__libc_init_array>:
 8004ad0:	b570      	push	{r4, r5, r6, lr}
 8004ad2:	2600      	movs	r6, #0
 8004ad4:	4c0c      	ldr	r4, [pc, #48]	@ (8004b08 <__libc_init_array+0x38>)
 8004ad6:	4d0d      	ldr	r5, [pc, #52]	@ (8004b0c <__libc_init_array+0x3c>)
 8004ad8:	1b64      	subs	r4, r4, r5
 8004ada:	10a4      	asrs	r4, r4, #2
 8004adc:	42a6      	cmp	r6, r4
 8004ade:	d109      	bne.n	8004af4 <__libc_init_array+0x24>
 8004ae0:	2600      	movs	r6, #0
 8004ae2:	f000 fa6d 	bl	8004fc0 <_init>
 8004ae6:	4c0a      	ldr	r4, [pc, #40]	@ (8004b10 <__libc_init_array+0x40>)
 8004ae8:	4d0a      	ldr	r5, [pc, #40]	@ (8004b14 <__libc_init_array+0x44>)
 8004aea:	1b64      	subs	r4, r4, r5
 8004aec:	10a4      	asrs	r4, r4, #2
 8004aee:	42a6      	cmp	r6, r4
 8004af0:	d105      	bne.n	8004afe <__libc_init_array+0x2e>
 8004af2:	bd70      	pop	{r4, r5, r6, pc}
 8004af4:	00b3      	lsls	r3, r6, #2
 8004af6:	58eb      	ldr	r3, [r5, r3]
 8004af8:	4798      	blx	r3
 8004afa:	3601      	adds	r6, #1
 8004afc:	e7ee      	b.n	8004adc <__libc_init_array+0xc>
 8004afe:	00b3      	lsls	r3, r6, #2
 8004b00:	58eb      	ldr	r3, [r5, r3]
 8004b02:	4798      	blx	r3
 8004b04:	3601      	adds	r6, #1
 8004b06:	e7f2      	b.n	8004aee <__libc_init_array+0x1e>
 8004b08:	08005060 	.word	0x08005060
 8004b0c:	08005060 	.word	0x08005060
 8004b10:	08005064 	.word	0x08005064
 8004b14:	08005060 	.word	0x08005060

08004b18 <__retarget_lock_init_recursive>:
 8004b18:	4770      	bx	lr

08004b1a <__retarget_lock_acquire_recursive>:
 8004b1a:	4770      	bx	lr

08004b1c <__retarget_lock_release_recursive>:
 8004b1c:	4770      	bx	lr
	...

08004b20 <_free_r>:
 8004b20:	b570      	push	{r4, r5, r6, lr}
 8004b22:	0005      	movs	r5, r0
 8004b24:	1e0c      	subs	r4, r1, #0
 8004b26:	d010      	beq.n	8004b4a <_free_r+0x2a>
 8004b28:	3c04      	subs	r4, #4
 8004b2a:	6823      	ldr	r3, [r4, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	da00      	bge.n	8004b32 <_free_r+0x12>
 8004b30:	18e4      	adds	r4, r4, r3
 8004b32:	0028      	movs	r0, r5
 8004b34:	f000 f8e0 	bl	8004cf8 <__malloc_lock>
 8004b38:	4a1d      	ldr	r2, [pc, #116]	@ (8004bb0 <_free_r+0x90>)
 8004b3a:	6813      	ldr	r3, [r2, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d105      	bne.n	8004b4c <_free_r+0x2c>
 8004b40:	6063      	str	r3, [r4, #4]
 8004b42:	6014      	str	r4, [r2, #0]
 8004b44:	0028      	movs	r0, r5
 8004b46:	f000 f8df 	bl	8004d08 <__malloc_unlock>
 8004b4a:	bd70      	pop	{r4, r5, r6, pc}
 8004b4c:	42a3      	cmp	r3, r4
 8004b4e:	d908      	bls.n	8004b62 <_free_r+0x42>
 8004b50:	6820      	ldr	r0, [r4, #0]
 8004b52:	1821      	adds	r1, r4, r0
 8004b54:	428b      	cmp	r3, r1
 8004b56:	d1f3      	bne.n	8004b40 <_free_r+0x20>
 8004b58:	6819      	ldr	r1, [r3, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	1809      	adds	r1, r1, r0
 8004b5e:	6021      	str	r1, [r4, #0]
 8004b60:	e7ee      	b.n	8004b40 <_free_r+0x20>
 8004b62:	001a      	movs	r2, r3
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <_free_r+0x4e>
 8004b6a:	42a3      	cmp	r3, r4
 8004b6c:	d9f9      	bls.n	8004b62 <_free_r+0x42>
 8004b6e:	6811      	ldr	r1, [r2, #0]
 8004b70:	1850      	adds	r0, r2, r1
 8004b72:	42a0      	cmp	r0, r4
 8004b74:	d10b      	bne.n	8004b8e <_free_r+0x6e>
 8004b76:	6820      	ldr	r0, [r4, #0]
 8004b78:	1809      	adds	r1, r1, r0
 8004b7a:	1850      	adds	r0, r2, r1
 8004b7c:	6011      	str	r1, [r2, #0]
 8004b7e:	4283      	cmp	r3, r0
 8004b80:	d1e0      	bne.n	8004b44 <_free_r+0x24>
 8004b82:	6818      	ldr	r0, [r3, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	1841      	adds	r1, r0, r1
 8004b88:	6011      	str	r1, [r2, #0]
 8004b8a:	6053      	str	r3, [r2, #4]
 8004b8c:	e7da      	b.n	8004b44 <_free_r+0x24>
 8004b8e:	42a0      	cmp	r0, r4
 8004b90:	d902      	bls.n	8004b98 <_free_r+0x78>
 8004b92:	230c      	movs	r3, #12
 8004b94:	602b      	str	r3, [r5, #0]
 8004b96:	e7d5      	b.n	8004b44 <_free_r+0x24>
 8004b98:	6820      	ldr	r0, [r4, #0]
 8004b9a:	1821      	adds	r1, r4, r0
 8004b9c:	428b      	cmp	r3, r1
 8004b9e:	d103      	bne.n	8004ba8 <_free_r+0x88>
 8004ba0:	6819      	ldr	r1, [r3, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	1809      	adds	r1, r1, r0
 8004ba6:	6021      	str	r1, [r4, #0]
 8004ba8:	6063      	str	r3, [r4, #4]
 8004baa:	6054      	str	r4, [r2, #4]
 8004bac:	e7ca      	b.n	8004b44 <_free_r+0x24>
 8004bae:	46c0      	nop			@ (mov r8, r8)
 8004bb0:	200003d4 	.word	0x200003d4

08004bb4 <sbrk_aligned>:
 8004bb4:	b570      	push	{r4, r5, r6, lr}
 8004bb6:	4e0f      	ldr	r6, [pc, #60]	@ (8004bf4 <sbrk_aligned+0x40>)
 8004bb8:	000d      	movs	r5, r1
 8004bba:	6831      	ldr	r1, [r6, #0]
 8004bbc:	0004      	movs	r4, r0
 8004bbe:	2900      	cmp	r1, #0
 8004bc0:	d102      	bne.n	8004bc8 <sbrk_aligned+0x14>
 8004bc2:	f000 f9eb 	bl	8004f9c <_sbrk_r>
 8004bc6:	6030      	str	r0, [r6, #0]
 8004bc8:	0029      	movs	r1, r5
 8004bca:	0020      	movs	r0, r4
 8004bcc:	f000 f9e6 	bl	8004f9c <_sbrk_r>
 8004bd0:	1c43      	adds	r3, r0, #1
 8004bd2:	d103      	bne.n	8004bdc <sbrk_aligned+0x28>
 8004bd4:	2501      	movs	r5, #1
 8004bd6:	426d      	negs	r5, r5
 8004bd8:	0028      	movs	r0, r5
 8004bda:	bd70      	pop	{r4, r5, r6, pc}
 8004bdc:	2303      	movs	r3, #3
 8004bde:	1cc5      	adds	r5, r0, #3
 8004be0:	439d      	bics	r5, r3
 8004be2:	42a8      	cmp	r0, r5
 8004be4:	d0f8      	beq.n	8004bd8 <sbrk_aligned+0x24>
 8004be6:	1a29      	subs	r1, r5, r0
 8004be8:	0020      	movs	r0, r4
 8004bea:	f000 f9d7 	bl	8004f9c <_sbrk_r>
 8004bee:	3001      	adds	r0, #1
 8004bf0:	d1f2      	bne.n	8004bd8 <sbrk_aligned+0x24>
 8004bf2:	e7ef      	b.n	8004bd4 <sbrk_aligned+0x20>
 8004bf4:	200003d0 	.word	0x200003d0

08004bf8 <_malloc_r>:
 8004bf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bfa:	2203      	movs	r2, #3
 8004bfc:	1ccb      	adds	r3, r1, #3
 8004bfe:	4393      	bics	r3, r2
 8004c00:	3308      	adds	r3, #8
 8004c02:	0005      	movs	r5, r0
 8004c04:	001f      	movs	r7, r3
 8004c06:	2b0c      	cmp	r3, #12
 8004c08:	d234      	bcs.n	8004c74 <_malloc_r+0x7c>
 8004c0a:	270c      	movs	r7, #12
 8004c0c:	42b9      	cmp	r1, r7
 8004c0e:	d833      	bhi.n	8004c78 <_malloc_r+0x80>
 8004c10:	0028      	movs	r0, r5
 8004c12:	f000 f871 	bl	8004cf8 <__malloc_lock>
 8004c16:	4e37      	ldr	r6, [pc, #220]	@ (8004cf4 <_malloc_r+0xfc>)
 8004c18:	6833      	ldr	r3, [r6, #0]
 8004c1a:	001c      	movs	r4, r3
 8004c1c:	2c00      	cmp	r4, #0
 8004c1e:	d12f      	bne.n	8004c80 <_malloc_r+0x88>
 8004c20:	0039      	movs	r1, r7
 8004c22:	0028      	movs	r0, r5
 8004c24:	f7ff ffc6 	bl	8004bb4 <sbrk_aligned>
 8004c28:	0004      	movs	r4, r0
 8004c2a:	1c43      	adds	r3, r0, #1
 8004c2c:	d15f      	bne.n	8004cee <_malloc_r+0xf6>
 8004c2e:	6834      	ldr	r4, [r6, #0]
 8004c30:	9400      	str	r4, [sp, #0]
 8004c32:	9b00      	ldr	r3, [sp, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d14a      	bne.n	8004cce <_malloc_r+0xd6>
 8004c38:	2c00      	cmp	r4, #0
 8004c3a:	d052      	beq.n	8004ce2 <_malloc_r+0xea>
 8004c3c:	6823      	ldr	r3, [r4, #0]
 8004c3e:	0028      	movs	r0, r5
 8004c40:	18e3      	adds	r3, r4, r3
 8004c42:	9900      	ldr	r1, [sp, #0]
 8004c44:	9301      	str	r3, [sp, #4]
 8004c46:	f000 f9a9 	bl	8004f9c <_sbrk_r>
 8004c4a:	9b01      	ldr	r3, [sp, #4]
 8004c4c:	4283      	cmp	r3, r0
 8004c4e:	d148      	bne.n	8004ce2 <_malloc_r+0xea>
 8004c50:	6823      	ldr	r3, [r4, #0]
 8004c52:	0028      	movs	r0, r5
 8004c54:	1aff      	subs	r7, r7, r3
 8004c56:	0039      	movs	r1, r7
 8004c58:	f7ff ffac 	bl	8004bb4 <sbrk_aligned>
 8004c5c:	3001      	adds	r0, #1
 8004c5e:	d040      	beq.n	8004ce2 <_malloc_r+0xea>
 8004c60:	6823      	ldr	r3, [r4, #0]
 8004c62:	19db      	adds	r3, r3, r7
 8004c64:	6023      	str	r3, [r4, #0]
 8004c66:	6833      	ldr	r3, [r6, #0]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	2a00      	cmp	r2, #0
 8004c6c:	d133      	bne.n	8004cd6 <_malloc_r+0xde>
 8004c6e:	9b00      	ldr	r3, [sp, #0]
 8004c70:	6033      	str	r3, [r6, #0]
 8004c72:	e019      	b.n	8004ca8 <_malloc_r+0xb0>
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	dac9      	bge.n	8004c0c <_malloc_r+0x14>
 8004c78:	230c      	movs	r3, #12
 8004c7a:	602b      	str	r3, [r5, #0]
 8004c7c:	2000      	movs	r0, #0
 8004c7e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004c80:	6821      	ldr	r1, [r4, #0]
 8004c82:	1bc9      	subs	r1, r1, r7
 8004c84:	d420      	bmi.n	8004cc8 <_malloc_r+0xd0>
 8004c86:	290b      	cmp	r1, #11
 8004c88:	d90a      	bls.n	8004ca0 <_malloc_r+0xa8>
 8004c8a:	19e2      	adds	r2, r4, r7
 8004c8c:	6027      	str	r7, [r4, #0]
 8004c8e:	42a3      	cmp	r3, r4
 8004c90:	d104      	bne.n	8004c9c <_malloc_r+0xa4>
 8004c92:	6032      	str	r2, [r6, #0]
 8004c94:	6863      	ldr	r3, [r4, #4]
 8004c96:	6011      	str	r1, [r2, #0]
 8004c98:	6053      	str	r3, [r2, #4]
 8004c9a:	e005      	b.n	8004ca8 <_malloc_r+0xb0>
 8004c9c:	605a      	str	r2, [r3, #4]
 8004c9e:	e7f9      	b.n	8004c94 <_malloc_r+0x9c>
 8004ca0:	6862      	ldr	r2, [r4, #4]
 8004ca2:	42a3      	cmp	r3, r4
 8004ca4:	d10e      	bne.n	8004cc4 <_malloc_r+0xcc>
 8004ca6:	6032      	str	r2, [r6, #0]
 8004ca8:	0028      	movs	r0, r5
 8004caa:	f000 f82d 	bl	8004d08 <__malloc_unlock>
 8004cae:	0020      	movs	r0, r4
 8004cb0:	2207      	movs	r2, #7
 8004cb2:	300b      	adds	r0, #11
 8004cb4:	1d23      	adds	r3, r4, #4
 8004cb6:	4390      	bics	r0, r2
 8004cb8:	1ac2      	subs	r2, r0, r3
 8004cba:	4298      	cmp	r0, r3
 8004cbc:	d0df      	beq.n	8004c7e <_malloc_r+0x86>
 8004cbe:	1a1b      	subs	r3, r3, r0
 8004cc0:	50a3      	str	r3, [r4, r2]
 8004cc2:	e7dc      	b.n	8004c7e <_malloc_r+0x86>
 8004cc4:	605a      	str	r2, [r3, #4]
 8004cc6:	e7ef      	b.n	8004ca8 <_malloc_r+0xb0>
 8004cc8:	0023      	movs	r3, r4
 8004cca:	6864      	ldr	r4, [r4, #4]
 8004ccc:	e7a6      	b.n	8004c1c <_malloc_r+0x24>
 8004cce:	9c00      	ldr	r4, [sp, #0]
 8004cd0:	6863      	ldr	r3, [r4, #4]
 8004cd2:	9300      	str	r3, [sp, #0]
 8004cd4:	e7ad      	b.n	8004c32 <_malloc_r+0x3a>
 8004cd6:	001a      	movs	r2, r3
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	42a3      	cmp	r3, r4
 8004cdc:	d1fb      	bne.n	8004cd6 <_malloc_r+0xde>
 8004cde:	2300      	movs	r3, #0
 8004ce0:	e7da      	b.n	8004c98 <_malloc_r+0xa0>
 8004ce2:	230c      	movs	r3, #12
 8004ce4:	0028      	movs	r0, r5
 8004ce6:	602b      	str	r3, [r5, #0]
 8004ce8:	f000 f80e 	bl	8004d08 <__malloc_unlock>
 8004cec:	e7c6      	b.n	8004c7c <_malloc_r+0x84>
 8004cee:	6007      	str	r7, [r0, #0]
 8004cf0:	e7da      	b.n	8004ca8 <_malloc_r+0xb0>
 8004cf2:	46c0      	nop			@ (mov r8, r8)
 8004cf4:	200003d4 	.word	0x200003d4

08004cf8 <__malloc_lock>:
 8004cf8:	b510      	push	{r4, lr}
 8004cfa:	4802      	ldr	r0, [pc, #8]	@ (8004d04 <__malloc_lock+0xc>)
 8004cfc:	f7ff ff0d 	bl	8004b1a <__retarget_lock_acquire_recursive>
 8004d00:	bd10      	pop	{r4, pc}
 8004d02:	46c0      	nop			@ (mov r8, r8)
 8004d04:	200003cc 	.word	0x200003cc

08004d08 <__malloc_unlock>:
 8004d08:	b510      	push	{r4, lr}
 8004d0a:	4802      	ldr	r0, [pc, #8]	@ (8004d14 <__malloc_unlock+0xc>)
 8004d0c:	f7ff ff06 	bl	8004b1c <__retarget_lock_release_recursive>
 8004d10:	bd10      	pop	{r4, pc}
 8004d12:	46c0      	nop			@ (mov r8, r8)
 8004d14:	200003cc 	.word	0x200003cc

08004d18 <__sflush_r>:
 8004d18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d1a:	220c      	movs	r2, #12
 8004d1c:	5e8b      	ldrsh	r3, [r1, r2]
 8004d1e:	0005      	movs	r5, r0
 8004d20:	000c      	movs	r4, r1
 8004d22:	071a      	lsls	r2, r3, #28
 8004d24:	d456      	bmi.n	8004dd4 <__sflush_r+0xbc>
 8004d26:	684a      	ldr	r2, [r1, #4]
 8004d28:	2a00      	cmp	r2, #0
 8004d2a:	dc02      	bgt.n	8004d32 <__sflush_r+0x1a>
 8004d2c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8004d2e:	2a00      	cmp	r2, #0
 8004d30:	dd4e      	ble.n	8004dd0 <__sflush_r+0xb8>
 8004d32:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004d34:	2f00      	cmp	r7, #0
 8004d36:	d04b      	beq.n	8004dd0 <__sflush_r+0xb8>
 8004d38:	2200      	movs	r2, #0
 8004d3a:	2080      	movs	r0, #128	@ 0x80
 8004d3c:	682e      	ldr	r6, [r5, #0]
 8004d3e:	602a      	str	r2, [r5, #0]
 8004d40:	001a      	movs	r2, r3
 8004d42:	0140      	lsls	r0, r0, #5
 8004d44:	6a21      	ldr	r1, [r4, #32]
 8004d46:	4002      	ands	r2, r0
 8004d48:	4203      	tst	r3, r0
 8004d4a:	d033      	beq.n	8004db4 <__sflush_r+0x9c>
 8004d4c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004d4e:	89a3      	ldrh	r3, [r4, #12]
 8004d50:	075b      	lsls	r3, r3, #29
 8004d52:	d506      	bpl.n	8004d62 <__sflush_r+0x4a>
 8004d54:	6863      	ldr	r3, [r4, #4]
 8004d56:	1ad2      	subs	r2, r2, r3
 8004d58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <__sflush_r+0x4a>
 8004d5e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004d60:	1ad2      	subs	r2, r2, r3
 8004d62:	2300      	movs	r3, #0
 8004d64:	0028      	movs	r0, r5
 8004d66:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004d68:	6a21      	ldr	r1, [r4, #32]
 8004d6a:	47b8      	blx	r7
 8004d6c:	89a2      	ldrh	r2, [r4, #12]
 8004d6e:	1c43      	adds	r3, r0, #1
 8004d70:	d106      	bne.n	8004d80 <__sflush_r+0x68>
 8004d72:	6829      	ldr	r1, [r5, #0]
 8004d74:	291d      	cmp	r1, #29
 8004d76:	d846      	bhi.n	8004e06 <__sflush_r+0xee>
 8004d78:	4b29      	ldr	r3, [pc, #164]	@ (8004e20 <__sflush_r+0x108>)
 8004d7a:	410b      	asrs	r3, r1
 8004d7c:	07db      	lsls	r3, r3, #31
 8004d7e:	d442      	bmi.n	8004e06 <__sflush_r+0xee>
 8004d80:	2300      	movs	r3, #0
 8004d82:	6063      	str	r3, [r4, #4]
 8004d84:	6923      	ldr	r3, [r4, #16]
 8004d86:	6023      	str	r3, [r4, #0]
 8004d88:	04d2      	lsls	r2, r2, #19
 8004d8a:	d505      	bpl.n	8004d98 <__sflush_r+0x80>
 8004d8c:	1c43      	adds	r3, r0, #1
 8004d8e:	d102      	bne.n	8004d96 <__sflush_r+0x7e>
 8004d90:	682b      	ldr	r3, [r5, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d100      	bne.n	8004d98 <__sflush_r+0x80>
 8004d96:	6560      	str	r0, [r4, #84]	@ 0x54
 8004d98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004d9a:	602e      	str	r6, [r5, #0]
 8004d9c:	2900      	cmp	r1, #0
 8004d9e:	d017      	beq.n	8004dd0 <__sflush_r+0xb8>
 8004da0:	0023      	movs	r3, r4
 8004da2:	3344      	adds	r3, #68	@ 0x44
 8004da4:	4299      	cmp	r1, r3
 8004da6:	d002      	beq.n	8004dae <__sflush_r+0x96>
 8004da8:	0028      	movs	r0, r5
 8004daa:	f7ff feb9 	bl	8004b20 <_free_r>
 8004dae:	2300      	movs	r3, #0
 8004db0:	6363      	str	r3, [r4, #52]	@ 0x34
 8004db2:	e00d      	b.n	8004dd0 <__sflush_r+0xb8>
 8004db4:	2301      	movs	r3, #1
 8004db6:	0028      	movs	r0, r5
 8004db8:	47b8      	blx	r7
 8004dba:	0002      	movs	r2, r0
 8004dbc:	1c43      	adds	r3, r0, #1
 8004dbe:	d1c6      	bne.n	8004d4e <__sflush_r+0x36>
 8004dc0:	682b      	ldr	r3, [r5, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d0c3      	beq.n	8004d4e <__sflush_r+0x36>
 8004dc6:	2b1d      	cmp	r3, #29
 8004dc8:	d001      	beq.n	8004dce <__sflush_r+0xb6>
 8004dca:	2b16      	cmp	r3, #22
 8004dcc:	d11a      	bne.n	8004e04 <__sflush_r+0xec>
 8004dce:	602e      	str	r6, [r5, #0]
 8004dd0:	2000      	movs	r0, #0
 8004dd2:	e01e      	b.n	8004e12 <__sflush_r+0xfa>
 8004dd4:	690e      	ldr	r6, [r1, #16]
 8004dd6:	2e00      	cmp	r6, #0
 8004dd8:	d0fa      	beq.n	8004dd0 <__sflush_r+0xb8>
 8004dda:	680f      	ldr	r7, [r1, #0]
 8004ddc:	600e      	str	r6, [r1, #0]
 8004dde:	1bba      	subs	r2, r7, r6
 8004de0:	9201      	str	r2, [sp, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	079b      	lsls	r3, r3, #30
 8004de6:	d100      	bne.n	8004dea <__sflush_r+0xd2>
 8004de8:	694a      	ldr	r2, [r1, #20]
 8004dea:	60a2      	str	r2, [r4, #8]
 8004dec:	9b01      	ldr	r3, [sp, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	ddee      	ble.n	8004dd0 <__sflush_r+0xb8>
 8004df2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004df4:	0032      	movs	r2, r6
 8004df6:	001f      	movs	r7, r3
 8004df8:	0028      	movs	r0, r5
 8004dfa:	9b01      	ldr	r3, [sp, #4]
 8004dfc:	6a21      	ldr	r1, [r4, #32]
 8004dfe:	47b8      	blx	r7
 8004e00:	2800      	cmp	r0, #0
 8004e02:	dc07      	bgt.n	8004e14 <__sflush_r+0xfc>
 8004e04:	89a2      	ldrh	r2, [r4, #12]
 8004e06:	2340      	movs	r3, #64	@ 0x40
 8004e08:	2001      	movs	r0, #1
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	b21b      	sxth	r3, r3
 8004e0e:	81a3      	strh	r3, [r4, #12]
 8004e10:	4240      	negs	r0, r0
 8004e12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004e14:	9b01      	ldr	r3, [sp, #4]
 8004e16:	1836      	adds	r6, r6, r0
 8004e18:	1a1b      	subs	r3, r3, r0
 8004e1a:	9301      	str	r3, [sp, #4]
 8004e1c:	e7e6      	b.n	8004dec <__sflush_r+0xd4>
 8004e1e:	46c0      	nop			@ (mov r8, r8)
 8004e20:	dfbffffe 	.word	0xdfbffffe

08004e24 <_fflush_r>:
 8004e24:	690b      	ldr	r3, [r1, #16]
 8004e26:	b570      	push	{r4, r5, r6, lr}
 8004e28:	0005      	movs	r5, r0
 8004e2a:	000c      	movs	r4, r1
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d102      	bne.n	8004e36 <_fflush_r+0x12>
 8004e30:	2500      	movs	r5, #0
 8004e32:	0028      	movs	r0, r5
 8004e34:	bd70      	pop	{r4, r5, r6, pc}
 8004e36:	2800      	cmp	r0, #0
 8004e38:	d004      	beq.n	8004e44 <_fflush_r+0x20>
 8004e3a:	6a03      	ldr	r3, [r0, #32]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d101      	bne.n	8004e44 <_fflush_r+0x20>
 8004e40:	f7ff fc6a 	bl	8004718 <__sinit>
 8004e44:	220c      	movs	r2, #12
 8004e46:	5ea3      	ldrsh	r3, [r4, r2]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d0f1      	beq.n	8004e30 <_fflush_r+0xc>
 8004e4c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004e4e:	07d2      	lsls	r2, r2, #31
 8004e50:	d404      	bmi.n	8004e5c <_fflush_r+0x38>
 8004e52:	059b      	lsls	r3, r3, #22
 8004e54:	d402      	bmi.n	8004e5c <_fflush_r+0x38>
 8004e56:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e58:	f7ff fe5f 	bl	8004b1a <__retarget_lock_acquire_recursive>
 8004e5c:	0028      	movs	r0, r5
 8004e5e:	0021      	movs	r1, r4
 8004e60:	f7ff ff5a 	bl	8004d18 <__sflush_r>
 8004e64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004e66:	0005      	movs	r5, r0
 8004e68:	07db      	lsls	r3, r3, #31
 8004e6a:	d4e2      	bmi.n	8004e32 <_fflush_r+0xe>
 8004e6c:	89a3      	ldrh	r3, [r4, #12]
 8004e6e:	059b      	lsls	r3, r3, #22
 8004e70:	d4df      	bmi.n	8004e32 <_fflush_r+0xe>
 8004e72:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e74:	f7ff fe52 	bl	8004b1c <__retarget_lock_release_recursive>
 8004e78:	e7db      	b.n	8004e32 <_fflush_r+0xe>
	...

08004e7c <__swhatbuf_r>:
 8004e7c:	b570      	push	{r4, r5, r6, lr}
 8004e7e:	000e      	movs	r6, r1
 8004e80:	001d      	movs	r5, r3
 8004e82:	230e      	movs	r3, #14
 8004e84:	5ec9      	ldrsh	r1, [r1, r3]
 8004e86:	0014      	movs	r4, r2
 8004e88:	b096      	sub	sp, #88	@ 0x58
 8004e8a:	2900      	cmp	r1, #0
 8004e8c:	da0c      	bge.n	8004ea8 <__swhatbuf_r+0x2c>
 8004e8e:	89b2      	ldrh	r2, [r6, #12]
 8004e90:	2380      	movs	r3, #128	@ 0x80
 8004e92:	0011      	movs	r1, r2
 8004e94:	4019      	ands	r1, r3
 8004e96:	421a      	tst	r2, r3
 8004e98:	d114      	bne.n	8004ec4 <__swhatbuf_r+0x48>
 8004e9a:	2380      	movs	r3, #128	@ 0x80
 8004e9c:	00db      	lsls	r3, r3, #3
 8004e9e:	2000      	movs	r0, #0
 8004ea0:	6029      	str	r1, [r5, #0]
 8004ea2:	6023      	str	r3, [r4, #0]
 8004ea4:	b016      	add	sp, #88	@ 0x58
 8004ea6:	bd70      	pop	{r4, r5, r6, pc}
 8004ea8:	466a      	mov	r2, sp
 8004eaa:	f000 f853 	bl	8004f54 <_fstat_r>
 8004eae:	2800      	cmp	r0, #0
 8004eb0:	dbed      	blt.n	8004e8e <__swhatbuf_r+0x12>
 8004eb2:	23f0      	movs	r3, #240	@ 0xf0
 8004eb4:	9901      	ldr	r1, [sp, #4]
 8004eb6:	021b      	lsls	r3, r3, #8
 8004eb8:	4019      	ands	r1, r3
 8004eba:	4b04      	ldr	r3, [pc, #16]	@ (8004ecc <__swhatbuf_r+0x50>)
 8004ebc:	18c9      	adds	r1, r1, r3
 8004ebe:	424b      	negs	r3, r1
 8004ec0:	4159      	adcs	r1, r3
 8004ec2:	e7ea      	b.n	8004e9a <__swhatbuf_r+0x1e>
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	2340      	movs	r3, #64	@ 0x40
 8004ec8:	e7e9      	b.n	8004e9e <__swhatbuf_r+0x22>
 8004eca:	46c0      	nop			@ (mov r8, r8)
 8004ecc:	ffffe000 	.word	0xffffe000

08004ed0 <__smakebuf_r>:
 8004ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ed2:	2602      	movs	r6, #2
 8004ed4:	898b      	ldrh	r3, [r1, #12]
 8004ed6:	0005      	movs	r5, r0
 8004ed8:	000c      	movs	r4, r1
 8004eda:	b085      	sub	sp, #20
 8004edc:	4233      	tst	r3, r6
 8004ede:	d007      	beq.n	8004ef0 <__smakebuf_r+0x20>
 8004ee0:	0023      	movs	r3, r4
 8004ee2:	3347      	adds	r3, #71	@ 0x47
 8004ee4:	6023      	str	r3, [r4, #0]
 8004ee6:	6123      	str	r3, [r4, #16]
 8004ee8:	2301      	movs	r3, #1
 8004eea:	6163      	str	r3, [r4, #20]
 8004eec:	b005      	add	sp, #20
 8004eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ef0:	ab03      	add	r3, sp, #12
 8004ef2:	aa02      	add	r2, sp, #8
 8004ef4:	f7ff ffc2 	bl	8004e7c <__swhatbuf_r>
 8004ef8:	9f02      	ldr	r7, [sp, #8]
 8004efa:	9001      	str	r0, [sp, #4]
 8004efc:	0039      	movs	r1, r7
 8004efe:	0028      	movs	r0, r5
 8004f00:	f7ff fe7a 	bl	8004bf8 <_malloc_r>
 8004f04:	2800      	cmp	r0, #0
 8004f06:	d108      	bne.n	8004f1a <__smakebuf_r+0x4a>
 8004f08:	220c      	movs	r2, #12
 8004f0a:	5ea3      	ldrsh	r3, [r4, r2]
 8004f0c:	059a      	lsls	r2, r3, #22
 8004f0e:	d4ed      	bmi.n	8004eec <__smakebuf_r+0x1c>
 8004f10:	2203      	movs	r2, #3
 8004f12:	4393      	bics	r3, r2
 8004f14:	431e      	orrs	r6, r3
 8004f16:	81a6      	strh	r6, [r4, #12]
 8004f18:	e7e2      	b.n	8004ee0 <__smakebuf_r+0x10>
 8004f1a:	2380      	movs	r3, #128	@ 0x80
 8004f1c:	89a2      	ldrh	r2, [r4, #12]
 8004f1e:	6020      	str	r0, [r4, #0]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	81a3      	strh	r3, [r4, #12]
 8004f24:	9b03      	ldr	r3, [sp, #12]
 8004f26:	6120      	str	r0, [r4, #16]
 8004f28:	6167      	str	r7, [r4, #20]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00c      	beq.n	8004f48 <__smakebuf_r+0x78>
 8004f2e:	0028      	movs	r0, r5
 8004f30:	230e      	movs	r3, #14
 8004f32:	5ee1      	ldrsh	r1, [r4, r3]
 8004f34:	f000 f820 	bl	8004f78 <_isatty_r>
 8004f38:	2800      	cmp	r0, #0
 8004f3a:	d005      	beq.n	8004f48 <__smakebuf_r+0x78>
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	89a2      	ldrh	r2, [r4, #12]
 8004f40:	439a      	bics	r2, r3
 8004f42:	3b02      	subs	r3, #2
 8004f44:	4313      	orrs	r3, r2
 8004f46:	81a3      	strh	r3, [r4, #12]
 8004f48:	89a3      	ldrh	r3, [r4, #12]
 8004f4a:	9a01      	ldr	r2, [sp, #4]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	81a3      	strh	r3, [r4, #12]
 8004f50:	e7cc      	b.n	8004eec <__smakebuf_r+0x1c>
	...

08004f54 <_fstat_r>:
 8004f54:	2300      	movs	r3, #0
 8004f56:	b570      	push	{r4, r5, r6, lr}
 8004f58:	4d06      	ldr	r5, [pc, #24]	@ (8004f74 <_fstat_r+0x20>)
 8004f5a:	0004      	movs	r4, r0
 8004f5c:	0008      	movs	r0, r1
 8004f5e:	0011      	movs	r1, r2
 8004f60:	602b      	str	r3, [r5, #0]
 8004f62:	f7fb fbe6 	bl	8000732 <_fstat>
 8004f66:	1c43      	adds	r3, r0, #1
 8004f68:	d103      	bne.n	8004f72 <_fstat_r+0x1e>
 8004f6a:	682b      	ldr	r3, [r5, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d000      	beq.n	8004f72 <_fstat_r+0x1e>
 8004f70:	6023      	str	r3, [r4, #0]
 8004f72:	bd70      	pop	{r4, r5, r6, pc}
 8004f74:	200003c8 	.word	0x200003c8

08004f78 <_isatty_r>:
 8004f78:	2300      	movs	r3, #0
 8004f7a:	b570      	push	{r4, r5, r6, lr}
 8004f7c:	4d06      	ldr	r5, [pc, #24]	@ (8004f98 <_isatty_r+0x20>)
 8004f7e:	0004      	movs	r4, r0
 8004f80:	0008      	movs	r0, r1
 8004f82:	602b      	str	r3, [r5, #0]
 8004f84:	f7fb fbe3 	bl	800074e <_isatty>
 8004f88:	1c43      	adds	r3, r0, #1
 8004f8a:	d103      	bne.n	8004f94 <_isatty_r+0x1c>
 8004f8c:	682b      	ldr	r3, [r5, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d000      	beq.n	8004f94 <_isatty_r+0x1c>
 8004f92:	6023      	str	r3, [r4, #0]
 8004f94:	bd70      	pop	{r4, r5, r6, pc}
 8004f96:	46c0      	nop			@ (mov r8, r8)
 8004f98:	200003c8 	.word	0x200003c8

08004f9c <_sbrk_r>:
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	b570      	push	{r4, r5, r6, lr}
 8004fa0:	4d06      	ldr	r5, [pc, #24]	@ (8004fbc <_sbrk_r+0x20>)
 8004fa2:	0004      	movs	r4, r0
 8004fa4:	0008      	movs	r0, r1
 8004fa6:	602b      	str	r3, [r5, #0]
 8004fa8:	f7fb fbe6 	bl	8000778 <_sbrk>
 8004fac:	1c43      	adds	r3, r0, #1
 8004fae:	d103      	bne.n	8004fb8 <_sbrk_r+0x1c>
 8004fb0:	682b      	ldr	r3, [r5, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d000      	beq.n	8004fb8 <_sbrk_r+0x1c>
 8004fb6:	6023      	str	r3, [r4, #0]
 8004fb8:	bd70      	pop	{r4, r5, r6, pc}
 8004fba:	46c0      	nop			@ (mov r8, r8)
 8004fbc:	200003c8 	.word	0x200003c8

08004fc0 <_init>:
 8004fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fc2:	46c0      	nop			@ (mov r8, r8)
 8004fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fc6:	bc08      	pop	{r3}
 8004fc8:	469e      	mov	lr, r3
 8004fca:	4770      	bx	lr

08004fcc <_fini>:
 8004fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fce:	46c0      	nop			@ (mov r8, r8)
 8004fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fd2:	bc08      	pop	{r3}
 8004fd4:	469e      	mov	lr, r3
 8004fd6:	4770      	bx	lr
