
STM32C031.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004184  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004244  08004244  00005244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042cc  080042cc  00006068  2**0
                  CONTENTS
  4 .ARM          00000000  080042cc  080042cc  00006068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042cc  080042cc  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042cc  080042cc  000052cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080042d0  080042d0  000052d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080042d4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000068  0800433c  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00001800  200002c0  0800433c  000062c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003202  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a57  00000000  00000000  00009292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  00009cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000907  00000000  00000000  0000a8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00009803  00000000  00000000  0000b1cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00001e75  00000000  00000000  000149d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00016847  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002f18  00000000  00000000  0001688c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000004b  00000000  00000000  000197a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800422c 	.word	0x0800422c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	0800422c 	.word	0x0800422c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b08b      	sub	sp, #44	@ 0x2c
 8000224:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000226:	2414      	movs	r4, #20
 8000228:	193b      	adds	r3, r7, r4
 800022a:	0018      	movs	r0, r3
 800022c:	2314      	movs	r3, #20
 800022e:	001a      	movs	r2, r3
 8000230:	2100      	movs	r1, #0
 8000232:	f003 fd27 	bl	8003c84 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000236:	4b27      	ldr	r3, [pc, #156]	@ (80002d4 <MX_GPIO_Init+0xb4>)
 8000238:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800023a:	4b26      	ldr	r3, [pc, #152]	@ (80002d4 <MX_GPIO_Init+0xb4>)
 800023c:	2104      	movs	r1, #4
 800023e:	430a      	orrs	r2, r1
 8000240:	635a      	str	r2, [r3, #52]	@ 0x34
 8000242:	4b24      	ldr	r3, [pc, #144]	@ (80002d4 <MX_GPIO_Init+0xb4>)
 8000244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000246:	2204      	movs	r2, #4
 8000248:	4013      	ands	r3, r2
 800024a:	613b      	str	r3, [r7, #16]
 800024c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800024e:	4b21      	ldr	r3, [pc, #132]	@ (80002d4 <MX_GPIO_Init+0xb4>)
 8000250:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000252:	4b20      	ldr	r3, [pc, #128]	@ (80002d4 <MX_GPIO_Init+0xb4>)
 8000254:	2120      	movs	r1, #32
 8000256:	430a      	orrs	r2, r1
 8000258:	635a      	str	r2, [r3, #52]	@ 0x34
 800025a:	4b1e      	ldr	r3, [pc, #120]	@ (80002d4 <MX_GPIO_Init+0xb4>)
 800025c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800025e:	2220      	movs	r2, #32
 8000260:	4013      	ands	r3, r2
 8000262:	60fb      	str	r3, [r7, #12]
 8000264:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000266:	4b1b      	ldr	r3, [pc, #108]	@ (80002d4 <MX_GPIO_Init+0xb4>)
 8000268:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800026a:	4b1a      	ldr	r3, [pc, #104]	@ (80002d4 <MX_GPIO_Init+0xb4>)
 800026c:	2101      	movs	r1, #1
 800026e:	430a      	orrs	r2, r1
 8000270:	635a      	str	r2, [r3, #52]	@ 0x34
 8000272:	4b18      	ldr	r3, [pc, #96]	@ (80002d4 <MX_GPIO_Init+0xb4>)
 8000274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000276:	2201      	movs	r2, #1
 8000278:	4013      	ands	r3, r2
 800027a:	60bb      	str	r3, [r7, #8]
 800027c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800027e:	4b15      	ldr	r3, [pc, #84]	@ (80002d4 <MX_GPIO_Init+0xb4>)
 8000280:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000282:	4b14      	ldr	r3, [pc, #80]	@ (80002d4 <MX_GPIO_Init+0xb4>)
 8000284:	2102      	movs	r1, #2
 8000286:	430a      	orrs	r2, r1
 8000288:	635a      	str	r2, [r3, #52]	@ 0x34
 800028a:	4b12      	ldr	r3, [pc, #72]	@ (80002d4 <MX_GPIO_Init+0xb4>)
 800028c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800028e:	2202      	movs	r2, #2
 8000290:	4013      	ands	r3, r2
 8000292:	607b      	str	r3, [r7, #4]
 8000294:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000296:	23a0      	movs	r3, #160	@ 0xa0
 8000298:	05db      	lsls	r3, r3, #23
 800029a:	2200      	movs	r2, #0
 800029c:	2120      	movs	r1, #32
 800029e:	0018      	movs	r0, r3
 80002a0:	f000 fedc 	bl	800105c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80002a4:	0021      	movs	r1, r4
 80002a6:	187b      	adds	r3, r7, r1
 80002a8:	2220      	movs	r2, #32
 80002aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ac:	187b      	adds	r3, r7, r1
 80002ae:	2201      	movs	r2, #1
 80002b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b2:	187b      	adds	r3, r7, r1
 80002b4:	2200      	movs	r2, #0
 80002b6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	2200      	movs	r2, #0
 80002bc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002be:	187a      	adds	r2, r7, r1
 80002c0:	23a0      	movs	r3, #160	@ 0xa0
 80002c2:	05db      	lsls	r3, r3, #23
 80002c4:	0011      	movs	r1, r2
 80002c6:	0018      	movs	r0, r3
 80002c8:	f000 fd56 	bl	8000d78 <HAL_GPIO_Init>

}
 80002cc:	46c0      	nop			@ (mov r8, r8)
 80002ce:	46bd      	mov	sp, r7
 80002d0:	b00b      	add	sp, #44	@ 0x2c
 80002d2:	bd90      	pop	{r4, r7, pc}
 80002d4:	40021000 	.word	0x40021000

080002d8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002dc:	4b1b      	ldr	r3, [pc, #108]	@ (800034c <MX_I2C1_Init+0x74>)
 80002de:	4a1c      	ldr	r2, [pc, #112]	@ (8000350 <MX_I2C1_Init+0x78>)
 80002e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2010091A;
 80002e2:	4b1a      	ldr	r3, [pc, #104]	@ (800034c <MX_I2C1_Init+0x74>)
 80002e4:	4a1b      	ldr	r2, [pc, #108]	@ (8000354 <MX_I2C1_Init+0x7c>)
 80002e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 10;
 80002e8:	4b18      	ldr	r3, [pc, #96]	@ (800034c <MX_I2C1_Init+0x74>)
 80002ea:	220a      	movs	r2, #10
 80002ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002ee:	4b17      	ldr	r3, [pc, #92]	@ (800034c <MX_I2C1_Init+0x74>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002f4:	4b15      	ldr	r3, [pc, #84]	@ (800034c <MX_I2C1_Init+0x74>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002fa:	4b14      	ldr	r3, [pc, #80]	@ (800034c <MX_I2C1_Init+0x74>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000300:	4b12      	ldr	r3, [pc, #72]	@ (800034c <MX_I2C1_Init+0x74>)
 8000302:	2200      	movs	r2, #0
 8000304:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000306:	4b11      	ldr	r3, [pc, #68]	@ (800034c <MX_I2C1_Init+0x74>)
 8000308:	2200      	movs	r2, #0
 800030a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800030c:	4b0f      	ldr	r3, [pc, #60]	@ (800034c <MX_I2C1_Init+0x74>)
 800030e:	2200      	movs	r2, #0
 8000310:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000312:	4b0e      	ldr	r3, [pc, #56]	@ (800034c <MX_I2C1_Init+0x74>)
 8000314:	0018      	movs	r0, r3
 8000316:	f000 fed9 	bl	80010cc <HAL_I2C_Init>
 800031a:	1e03      	subs	r3, r0, #0
 800031c:	d001      	beq.n	8000322 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800031e:	f000 f902 	bl	8000526 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000322:	4b0a      	ldr	r3, [pc, #40]	@ (800034c <MX_I2C1_Init+0x74>)
 8000324:	2100      	movs	r1, #0
 8000326:	0018      	movs	r0, r3
 8000328:	f001 fd82 	bl	8001e30 <HAL_I2CEx_ConfigAnalogFilter>
 800032c:	1e03      	subs	r3, r0, #0
 800032e:	d001      	beq.n	8000334 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000330:	f000 f8f9 	bl	8000526 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000334:	4b05      	ldr	r3, [pc, #20]	@ (800034c <MX_I2C1_Init+0x74>)
 8000336:	2100      	movs	r1, #0
 8000338:	0018      	movs	r0, r3
 800033a:	f001 fdc5 	bl	8001ec8 <HAL_I2CEx_ConfigDigitalFilter>
 800033e:	1e03      	subs	r3, r0, #0
 8000340:	d001      	beq.n	8000346 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000342:	f000 f8f0 	bl	8000526 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000346:	46c0      	nop			@ (mov r8, r8)
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}
 800034c:	20000084 	.word	0x20000084
 8000350:	40005400 	.word	0x40005400
 8000354:	2010091a 	.word	0x2010091a

08000358 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000358:	b590      	push	{r4, r7, lr}
 800035a:	b091      	sub	sp, #68	@ 0x44
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000360:	232c      	movs	r3, #44	@ 0x2c
 8000362:	18fb      	adds	r3, r7, r3
 8000364:	0018      	movs	r0, r3
 8000366:	2314      	movs	r3, #20
 8000368:	001a      	movs	r2, r3
 800036a:	2100      	movs	r1, #0
 800036c:	f003 fc8a 	bl	8003c84 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000370:	2410      	movs	r4, #16
 8000372:	193b      	adds	r3, r7, r4
 8000374:	0018      	movs	r0, r3
 8000376:	231c      	movs	r3, #28
 8000378:	001a      	movs	r2, r3
 800037a:	2100      	movs	r1, #0
 800037c:	f003 fc82 	bl	8003c84 <memset>
  if(i2cHandle->Instance==I2C1)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a26      	ldr	r2, [pc, #152]	@ (8000420 <HAL_I2C_MspInit+0xc8>)
 8000386:	4293      	cmp	r3, r2
 8000388:	d146      	bne.n	8000418 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800038a:	193b      	adds	r3, r7, r4
 800038c:	2240      	movs	r2, #64	@ 0x40
 800038e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000390:	193b      	adds	r3, r7, r4
 8000392:	2200      	movs	r2, #0
 8000394:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000396:	193b      	adds	r3, r7, r4
 8000398:	0018      	movs	r0, r3
 800039a:	f002 f931 	bl	8002600 <HAL_RCCEx_PeriphCLKConfig>
 800039e:	1e03      	subs	r3, r0, #0
 80003a0:	d001      	beq.n	80003a6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80003a2:	f000 f8c0 	bl	8000526 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000424 <HAL_I2C_MspInit+0xcc>)
 80003a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80003aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000424 <HAL_I2C_MspInit+0xcc>)
 80003ac:	2102      	movs	r1, #2
 80003ae:	430a      	orrs	r2, r1
 80003b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80003b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000424 <HAL_I2C_MspInit+0xcc>)
 80003b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80003b6:	2202      	movs	r2, #2
 80003b8:	4013      	ands	r3, r2
 80003ba:	60fb      	str	r3, [r7, #12]
 80003bc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80003be:	212c      	movs	r1, #44	@ 0x2c
 80003c0:	187b      	adds	r3, r7, r1
 80003c2:	22c0      	movs	r2, #192	@ 0xc0
 80003c4:	0092      	lsls	r2, r2, #2
 80003c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003c8:	187b      	adds	r3, r7, r1
 80003ca:	2212      	movs	r2, #18
 80003cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ce:	187b      	adds	r3, r7, r1
 80003d0:	2200      	movs	r2, #0
 80003d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d4:	187b      	adds	r3, r7, r1
 80003d6:	2200      	movs	r2, #0
 80003d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80003da:	187b      	adds	r3, r7, r1
 80003dc:	2206      	movs	r2, #6
 80003de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003e0:	187b      	adds	r3, r7, r1
 80003e2:	4a11      	ldr	r2, [pc, #68]	@ (8000428 <HAL_I2C_MspInit+0xd0>)
 80003e4:	0019      	movs	r1, r3
 80003e6:	0010      	movs	r0, r2
 80003e8:	f000 fcc6 	bl	8000d78 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80003ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000424 <HAL_I2C_MspInit+0xcc>)
 80003ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80003f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000424 <HAL_I2C_MspInit+0xcc>)
 80003f2:	2180      	movs	r1, #128	@ 0x80
 80003f4:	0389      	lsls	r1, r1, #14
 80003f6:	430a      	orrs	r2, r1
 80003f8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80003fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000424 <HAL_I2C_MspInit+0xcc>)
 80003fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80003fe:	2380      	movs	r3, #128	@ 0x80
 8000400:	039b      	lsls	r3, r3, #14
 8000402:	4013      	ands	r3, r2
 8000404:	60bb      	str	r3, [r7, #8]
 8000406:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000408:	2200      	movs	r2, #0
 800040a:	2100      	movs	r1, #0
 800040c:	2017      	movs	r0, #23
 800040e:	f000 fb99 	bl	8000b44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8000412:	2017      	movs	r0, #23
 8000414:	f000 fbab 	bl	8000b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000418:	46c0      	nop			@ (mov r8, r8)
 800041a:	46bd      	mov	sp, r7
 800041c:	b011      	add	sp, #68	@ 0x44
 800041e:	bd90      	pop	{r4, r7, pc}
 8000420:	40005400 	.word	0x40005400
 8000424:	40021000 	.word	0x40021000
 8000428:	50000400 	.word	0x50000400

0800042c <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000434:	4b05      	ldr	r3, [pc, #20]	@ (800044c <__io_putchar+0x20>)
 8000436:	1d39      	adds	r1, r7, #4
 8000438:	4805      	ldr	r0, [pc, #20]	@ (8000450 <__io_putchar+0x24>)
 800043a:	2201      	movs	r2, #1
 800043c:	f002 fa24 	bl	8002888 <HAL_UART_Transmit>

  return ch;
 8000440:	687b      	ldr	r3, [r7, #4]
}
 8000442:	0018      	movs	r0, r3
 8000444:	46bd      	mov	sp, r7
 8000446:	b002      	add	sp, #8
 8000448:	bd80      	pop	{r7, pc}
 800044a:	46c0      	nop			@ (mov r8, r8)
 800044c:	0000ffff 	.word	0x0000ffff
 8000450:	200000dc 	.word	0x200000dc

08000454 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800045a:	f000 fa26 	bl	80008aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800045e:	f000 f825 	bl	80004ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000462:	f7ff fedd 	bl	8000220 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000466:	f000 f96f 	bl	8000748 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800046a:	f7ff ff35 	bl	80002d8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uint32_t i = 0;
 800046e:	2300      	movs	r3, #0
 8000470:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    i++;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	3301      	adds	r3, #1
 8000476:	607b      	str	r3, [r7, #4]
    if (i > 5000)
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	4a0a      	ldr	r2, [pc, #40]	@ (80004a4 <main+0x50>)
 800047c:	4293      	cmp	r3, r2
 800047e:	d901      	bls.n	8000484 <main+0x30>
    {


     // HAL_UART_Transmit(&huart2, "ok\r\n", strlen("ok\r\n"), 0xFFFF);
      i = 0;
 8000480:	2300      	movs	r3, #0
 8000482:	607b      	str	r3, [r7, #4]
    }
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000484:	23a0      	movs	r3, #160	@ 0xa0
 8000486:	05db      	lsls	r3, r3, #23
 8000488:	2120      	movs	r1, #32
 800048a:	0018      	movs	r0, r3
 800048c:	f000 fe03 	bl	8001096 <HAL_GPIO_TogglePin>
printf("hello world! \n");
 8000490:	4b05      	ldr	r3, [pc, #20]	@ (80004a8 <main+0x54>)
 8000492:	0018      	movs	r0, r3
 8000494:	f003 fb00 	bl	8003a98 <puts>
    // HAL_Delay(200);
    //  HAL_UART_Transmit(&huart2, "ok\r\n", strlen("ok\r\n"), 0xFFFF);
     HAL_Delay(500);//中文显示
 8000498:	23fa      	movs	r3, #250	@ 0xfa
 800049a:	005b      	lsls	r3, r3, #1
 800049c:	0018      	movs	r0, r3
 800049e:	f000 fa81 	bl	80009a4 <HAL_Delay>
    i++;
 80004a2:	e7e6      	b.n	8000472 <main+0x1e>
 80004a4:	00001388 	.word	0x00001388
 80004a8:	08004244 	.word	0x08004244

080004ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ac:	b590      	push	{r4, r7, lr}
 80004ae:	b08d      	sub	sp, #52	@ 0x34
 80004b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004b2:	2414      	movs	r4, #20
 80004b4:	193b      	adds	r3, r7, r4
 80004b6:	0018      	movs	r0, r3
 80004b8:	231c      	movs	r3, #28
 80004ba:	001a      	movs	r2, r3
 80004bc:	2100      	movs	r1, #0
 80004be:	f003 fbe1 	bl	8003c84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c2:	003b      	movs	r3, r7
 80004c4:	0018      	movs	r0, r3
 80004c6:	2314      	movs	r3, #20
 80004c8:	001a      	movs	r2, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	f003 fbda 	bl	8003c84 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004d0:	193b      	adds	r3, r7, r4
 80004d2:	2201      	movs	r2, #1
 80004d4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004d6:	193b      	adds	r3, r7, r4
 80004d8:	2280      	movs	r2, #128	@ 0x80
 80004da:	0252      	lsls	r2, r2, #9
 80004dc:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004de:	193b      	adds	r3, r7, r4
 80004e0:	0018      	movs	r0, r3
 80004e2:	f001 fd3d 	bl	8001f60 <HAL_RCC_OscConfig>
 80004e6:	1e03      	subs	r3, r0, #0
 80004e8:	d001      	beq.n	80004ee <SystemClock_Config+0x42>
  {
    Error_Handler();
 80004ea:	f000 f81c 	bl	8000526 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ee:	003b      	movs	r3, r7
 80004f0:	2207      	movs	r2, #7
 80004f2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80004f4:	003b      	movs	r3, r7
 80004f6:	2201      	movs	r2, #1
 80004f8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004fa:	003b      	movs	r3, r7
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000500:	003b      	movs	r3, r7
 8000502:	2200      	movs	r2, #0
 8000504:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000506:	003b      	movs	r3, r7
 8000508:	2200      	movs	r2, #0
 800050a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800050c:	003b      	movs	r3, r7
 800050e:	2101      	movs	r1, #1
 8000510:	0018      	movs	r0, r3
 8000512:	f001 ff09 	bl	8002328 <HAL_RCC_ClockConfig>
 8000516:	1e03      	subs	r3, r0, #0
 8000518:	d001      	beq.n	800051e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800051a:	f000 f804 	bl	8000526 <Error_Handler>
  }
}
 800051e:	46c0      	nop			@ (mov r8, r8)
 8000520:	46bd      	mov	sp, r7
 8000522:	b00d      	add	sp, #52	@ 0x34
 8000524:	bd90      	pop	{r4, r7, pc}

08000526 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000526:	b580      	push	{r7, lr}
 8000528:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800052a:	b672      	cpsid	i
}
 800052c:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800052e:	46c0      	nop			@ (mov r8, r8)
 8000530:	e7fd      	b.n	800052e <Error_Handler+0x8>
	...

08000534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800053a:	4b0f      	ldr	r3, [pc, #60]	@ (8000578 <HAL_MspInit+0x44>)
 800053c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800053e:	4b0e      	ldr	r3, [pc, #56]	@ (8000578 <HAL_MspInit+0x44>)
 8000540:	2101      	movs	r1, #1
 8000542:	430a      	orrs	r2, r1
 8000544:	641a      	str	r2, [r3, #64]	@ 0x40
 8000546:	4b0c      	ldr	r3, [pc, #48]	@ (8000578 <HAL_MspInit+0x44>)
 8000548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800054a:	2201      	movs	r2, #1
 800054c:	4013      	ands	r3, r2
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000552:	4b09      	ldr	r3, [pc, #36]	@ (8000578 <HAL_MspInit+0x44>)
 8000554:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000556:	4b08      	ldr	r3, [pc, #32]	@ (8000578 <HAL_MspInit+0x44>)
 8000558:	2180      	movs	r1, #128	@ 0x80
 800055a:	0549      	lsls	r1, r1, #21
 800055c:	430a      	orrs	r2, r1
 800055e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000560:	4b05      	ldr	r3, [pc, #20]	@ (8000578 <HAL_MspInit+0x44>)
 8000562:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000564:	2380      	movs	r3, #128	@ 0x80
 8000566:	055b      	lsls	r3, r3, #21
 8000568:	4013      	ands	r3, r2
 800056a:	603b      	str	r3, [r7, #0]
 800056c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	46bd      	mov	sp, r7
 8000572:	b002      	add	sp, #8
 8000574:	bd80      	pop	{r7, pc}
 8000576:	46c0      	nop			@ (mov r8, r8)
 8000578:	40021000 	.word	0x40021000

0800057c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000580:	46c0      	nop			@ (mov r8, r8)
 8000582:	e7fd      	b.n	8000580 <NMI_Handler+0x4>

08000584 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000588:	46c0      	nop			@ (mov r8, r8)
 800058a:	e7fd      	b.n	8000588 <HardFault_Handler+0x4>

0800058c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000590:	46c0      	nop			@ (mov r8, r8)
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}

08000596 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000596:	b580      	push	{r7, lr}
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800059a:	46c0      	nop			@ (mov r8, r8)
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005a4:	f000 f9e2 	bl	800096c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005a8:	46c0      	nop			@ (mov r8, r8)
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
	...

080005b0 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 interrupt (combined with EXTI 23).
  */
void I2C1_IRQHandler(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80005b4:	4b09      	ldr	r3, [pc, #36]	@ (80005dc <I2C1_IRQHandler+0x2c>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	699a      	ldr	r2, [r3, #24]
 80005ba:	23e0      	movs	r3, #224	@ 0xe0
 80005bc:	00db      	lsls	r3, r3, #3
 80005be:	4013      	ands	r3, r2
 80005c0:	d004      	beq.n	80005cc <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80005c2:	4b06      	ldr	r3, [pc, #24]	@ (80005dc <I2C1_IRQHandler+0x2c>)
 80005c4:	0018      	movs	r0, r3
 80005c6:	f000 fe41 	bl	800124c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80005ca:	e003      	b.n	80005d4 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80005cc:	4b03      	ldr	r3, [pc, #12]	@ (80005dc <I2C1_IRQHandler+0x2c>)
 80005ce:	0018      	movs	r0, r3
 80005d0:	f000 fe22 	bl	8001218 <HAL_I2C_EV_IRQHandler>
}
 80005d4:	46c0      	nop			@ (mov r8, r8)
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	46c0      	nop			@ (mov r8, r8)
 80005dc:	20000084 	.word	0x20000084

080005e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 interrupt.
  */
void USART2_IRQHandler(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80005e4:	4b03      	ldr	r3, [pc, #12]	@ (80005f4 <USART2_IRQHandler+0x14>)
 80005e6:	0018      	movs	r0, r3
 80005e8:	f002 f9f2 	bl	80029d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80005ec:	46c0      	nop			@ (mov r8, r8)
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	46c0      	nop			@ (mov r8, r8)
 80005f4:	200000dc 	.word	0x200000dc

080005f8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	60b9      	str	r1, [r7, #8]
 8000602:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]
 8000608:	e00a      	b.n	8000620 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800060a:	e000      	b.n	800060e <_read+0x16>
 800060c:	bf00      	nop
 800060e:	0001      	movs	r1, r0
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	1c5a      	adds	r2, r3, #1
 8000614:	60ba      	str	r2, [r7, #8]
 8000616:	b2ca      	uxtb	r2, r1
 8000618:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	3301      	adds	r3, #1
 800061e:	617b      	str	r3, [r7, #20]
 8000620:	697a      	ldr	r2, [r7, #20]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	429a      	cmp	r2, r3
 8000626:	dbf0      	blt.n	800060a <_read+0x12>
  }

  return len;
 8000628:	687b      	ldr	r3, [r7, #4]
}
 800062a:	0018      	movs	r0, r3
 800062c:	46bd      	mov	sp, r7
 800062e:	b006      	add	sp, #24
 8000630:	bd80      	pop	{r7, pc}

08000632 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000632:	b580      	push	{r7, lr}
 8000634:	b086      	sub	sp, #24
 8000636:	af00      	add	r7, sp, #0
 8000638:	60f8      	str	r0, [r7, #12]
 800063a:	60b9      	str	r1, [r7, #8]
 800063c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800063e:	2300      	movs	r3, #0
 8000640:	617b      	str	r3, [r7, #20]
 8000642:	e009      	b.n	8000658 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	1c5a      	adds	r2, r3, #1
 8000648:	60ba      	str	r2, [r7, #8]
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	0018      	movs	r0, r3
 800064e:	f7ff feed 	bl	800042c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	3301      	adds	r3, #1
 8000656:	617b      	str	r3, [r7, #20]
 8000658:	697a      	ldr	r2, [r7, #20]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	429a      	cmp	r2, r3
 800065e:	dbf1      	blt.n	8000644 <_write+0x12>
  }
  return len;
 8000660:	687b      	ldr	r3, [r7, #4]
}
 8000662:	0018      	movs	r0, r3
 8000664:	46bd      	mov	sp, r7
 8000666:	b006      	add	sp, #24
 8000668:	bd80      	pop	{r7, pc}

0800066a <_close>:

int _close(int file)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	b082      	sub	sp, #8
 800066e:	af00      	add	r7, sp, #0
 8000670:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000672:	2301      	movs	r3, #1
 8000674:	425b      	negs	r3, r3
}
 8000676:	0018      	movs	r0, r3
 8000678:	46bd      	mov	sp, r7
 800067a:	b002      	add	sp, #8
 800067c:	bd80      	pop	{r7, pc}

0800067e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800067e:	b580      	push	{r7, lr}
 8000680:	b082      	sub	sp, #8
 8000682:	af00      	add	r7, sp, #0
 8000684:	6078      	str	r0, [r7, #4]
 8000686:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	2280      	movs	r2, #128	@ 0x80
 800068c:	0192      	lsls	r2, r2, #6
 800068e:	605a      	str	r2, [r3, #4]
  return 0;
 8000690:	2300      	movs	r3, #0
}
 8000692:	0018      	movs	r0, r3
 8000694:	46bd      	mov	sp, r7
 8000696:	b002      	add	sp, #8
 8000698:	bd80      	pop	{r7, pc}

0800069a <_isatty>:

int _isatty(int file)
{
 800069a:	b580      	push	{r7, lr}
 800069c:	b082      	sub	sp, #8
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80006a2:	2301      	movs	r3, #1
}
 80006a4:	0018      	movs	r0, r3
 80006a6:	46bd      	mov	sp, r7
 80006a8:	b002      	add	sp, #8
 80006aa:	bd80      	pop	{r7, pc}

080006ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006b8:	2300      	movs	r3, #0
}
 80006ba:	0018      	movs	r0, r3
 80006bc:	46bd      	mov	sp, r7
 80006be:	b004      	add	sp, #16
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006cc:	4a14      	ldr	r2, [pc, #80]	@ (8000720 <_sbrk+0x5c>)
 80006ce:	4b15      	ldr	r3, [pc, #84]	@ (8000724 <_sbrk+0x60>)
 80006d0:	1ad3      	subs	r3, r2, r3
 80006d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006d8:	4b13      	ldr	r3, [pc, #76]	@ (8000728 <_sbrk+0x64>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d102      	bne.n	80006e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006e0:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <_sbrk+0x64>)
 80006e2:	4a12      	ldr	r2, [pc, #72]	@ (800072c <_sbrk+0x68>)
 80006e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006e6:	4b10      	ldr	r3, [pc, #64]	@ (8000728 <_sbrk+0x64>)
 80006e8:	681a      	ldr	r2, [r3, #0]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	18d3      	adds	r3, r2, r3
 80006ee:	693a      	ldr	r2, [r7, #16]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	d207      	bcs.n	8000704 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006f4:	f003 fb1c 	bl	8003d30 <__errno>
 80006f8:	0003      	movs	r3, r0
 80006fa:	220c      	movs	r2, #12
 80006fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006fe:	2301      	movs	r3, #1
 8000700:	425b      	negs	r3, r3
 8000702:	e009      	b.n	8000718 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000704:	4b08      	ldr	r3, [pc, #32]	@ (8000728 <_sbrk+0x64>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800070a:	4b07      	ldr	r3, [pc, #28]	@ (8000728 <_sbrk+0x64>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	18d2      	adds	r2, r2, r3
 8000712:	4b05      	ldr	r3, [pc, #20]	@ (8000728 <_sbrk+0x64>)
 8000714:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000716:	68fb      	ldr	r3, [r7, #12]
}
 8000718:	0018      	movs	r0, r3
 800071a:	46bd      	mov	sp, r7
 800071c:	b006      	add	sp, #24
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20003000 	.word	0x20003000
 8000724:	00001000 	.word	0x00001000
 8000728:	200000d8 	.word	0x200000d8
 800072c:	200002c0 	.word	0x200002c0

08000730 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000734:	4b03      	ldr	r3, [pc, #12]	@ (8000744 <SystemInit+0x14>)
 8000736:	2280      	movs	r2, #128	@ 0x80
 8000738:	0512      	lsls	r2, r2, #20
 800073a:	609a      	str	r2, [r3, #8]
#endif
}
 800073c:	46c0      	nop			@ (mov r8, r8)
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	46c0      	nop			@ (mov r8, r8)
 8000744:	e000ed00 	.word	0xe000ed00

08000748 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800074c:	4b17      	ldr	r3, [pc, #92]	@ (80007ac <MX_USART2_UART_Init+0x64>)
 800074e:	4a18      	ldr	r2, [pc, #96]	@ (80007b0 <MX_USART2_UART_Init+0x68>)
 8000750:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000752:	4b16      	ldr	r3, [pc, #88]	@ (80007ac <MX_USART2_UART_Init+0x64>)
 8000754:	22e1      	movs	r2, #225	@ 0xe1
 8000756:	0252      	lsls	r2, r2, #9
 8000758:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800075a:	4b14      	ldr	r3, [pc, #80]	@ (80007ac <MX_USART2_UART_Init+0x64>)
 800075c:	2280      	movs	r2, #128	@ 0x80
 800075e:	0152      	lsls	r2, r2, #5
 8000760:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000762:	4b12      	ldr	r3, [pc, #72]	@ (80007ac <MX_USART2_UART_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000768:	4b10      	ldr	r3, [pc, #64]	@ (80007ac <MX_USART2_UART_Init+0x64>)
 800076a:	2280      	movs	r2, #128	@ 0x80
 800076c:	00d2      	lsls	r2, r2, #3
 800076e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000770:	4b0e      	ldr	r3, [pc, #56]	@ (80007ac <MX_USART2_UART_Init+0x64>)
 8000772:	220c      	movs	r2, #12
 8000774:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000776:	4b0d      	ldr	r3, [pc, #52]	@ (80007ac <MX_USART2_UART_Init+0x64>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800077c:	4b0b      	ldr	r3, [pc, #44]	@ (80007ac <MX_USART2_UART_Init+0x64>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000782:	4b0a      	ldr	r3, [pc, #40]	@ (80007ac <MX_USART2_UART_Init+0x64>)
 8000784:	2200      	movs	r2, #0
 8000786:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000788:	4b08      	ldr	r3, [pc, #32]	@ (80007ac <MX_USART2_UART_Init+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800078e:	4b07      	ldr	r3, [pc, #28]	@ (80007ac <MX_USART2_UART_Init+0x64>)
 8000790:	2200      	movs	r2, #0
 8000792:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000794:	4b05      	ldr	r3, [pc, #20]	@ (80007ac <MX_USART2_UART_Init+0x64>)
 8000796:	0018      	movs	r0, r3
 8000798:	f002 f820 	bl	80027dc <HAL_UART_Init>
 800079c:	1e03      	subs	r3, r0, #0
 800079e:	d001      	beq.n	80007a4 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 80007a0:	f7ff fec1 	bl	8000526 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007a4:	46c0      	nop			@ (mov r8, r8)
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	46c0      	nop			@ (mov r8, r8)
 80007ac:	200000dc 	.word	0x200000dc
 80007b0:	40004400 	.word	0x40004400

080007b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80007b4:	b590      	push	{r4, r7, lr}
 80007b6:	b08b      	sub	sp, #44	@ 0x2c
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007bc:	2414      	movs	r4, #20
 80007be:	193b      	adds	r3, r7, r4
 80007c0:	0018      	movs	r0, r3
 80007c2:	2314      	movs	r3, #20
 80007c4:	001a      	movs	r2, r3
 80007c6:	2100      	movs	r1, #0
 80007c8:	f003 fa5c 	bl	8003c84 <memset>
  if(uartHandle->Instance==USART2)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a1f      	ldr	r2, [pc, #124]	@ (8000850 <HAL_UART_MspInit+0x9c>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d138      	bne.n	8000848 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000854 <HAL_UART_MspInit+0xa0>)
 80007d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007da:	4b1e      	ldr	r3, [pc, #120]	@ (8000854 <HAL_UART_MspInit+0xa0>)
 80007dc:	2180      	movs	r1, #128	@ 0x80
 80007de:	0289      	lsls	r1, r1, #10
 80007e0:	430a      	orrs	r2, r1
 80007e2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80007e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000854 <HAL_UART_MspInit+0xa0>)
 80007e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007e8:	2380      	movs	r3, #128	@ 0x80
 80007ea:	029b      	lsls	r3, r3, #10
 80007ec:	4013      	ands	r3, r2
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	4b18      	ldr	r3, [pc, #96]	@ (8000854 <HAL_UART_MspInit+0xa0>)
 80007f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007f6:	4b17      	ldr	r3, [pc, #92]	@ (8000854 <HAL_UART_MspInit+0xa0>)
 80007f8:	2101      	movs	r1, #1
 80007fa:	430a      	orrs	r2, r1
 80007fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80007fe:	4b15      	ldr	r3, [pc, #84]	@ (8000854 <HAL_UART_MspInit+0xa0>)
 8000800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000802:	2201      	movs	r2, #1
 8000804:	4013      	ands	r3, r2
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800080a:	0021      	movs	r1, r4
 800080c:	187b      	adds	r3, r7, r1
 800080e:	220c      	movs	r2, #12
 8000810:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000812:	187b      	adds	r3, r7, r1
 8000814:	2202      	movs	r2, #2
 8000816:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	187b      	adds	r3, r7, r1
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	187b      	adds	r3, r7, r1
 8000820:	2200      	movs	r2, #0
 8000822:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000824:	187b      	adds	r3, r7, r1
 8000826:	2201      	movs	r2, #1
 8000828:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082a:	187a      	adds	r2, r7, r1
 800082c:	23a0      	movs	r3, #160	@ 0xa0
 800082e:	05db      	lsls	r3, r3, #23
 8000830:	0011      	movs	r1, r2
 8000832:	0018      	movs	r0, r3
 8000834:	f000 faa0 	bl	8000d78 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000838:	2200      	movs	r2, #0
 800083a:	2100      	movs	r1, #0
 800083c:	201c      	movs	r0, #28
 800083e:	f000 f981 	bl	8000b44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000842:	201c      	movs	r0, #28
 8000844:	f000 f993 	bl	8000b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000848:	46c0      	nop			@ (mov r8, r8)
 800084a:	46bd      	mov	sp, r7
 800084c:	b00b      	add	sp, #44	@ 0x2c
 800084e:	bd90      	pop	{r4, r7, pc}
 8000850:	40004400 	.word	0x40004400
 8000854:	40021000 	.word	0x40021000

08000858 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000858:	480d      	ldr	r0, [pc, #52]	@ (8000890 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800085a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800085c:	f7ff ff68 	bl	8000730 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000860:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000862:	e003      	b.n	800086c <LoopCopyDataInit>

08000864 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000864:	4b0b      	ldr	r3, [pc, #44]	@ (8000894 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000866:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000868:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800086a:	3104      	adds	r1, #4

0800086c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800086c:	480a      	ldr	r0, [pc, #40]	@ (8000898 <LoopForever+0xa>)
  ldr r3, =_edata
 800086e:	4b0b      	ldr	r3, [pc, #44]	@ (800089c <LoopForever+0xe>)
  adds r2, r0, r1
 8000870:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000872:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000874:	d3f6      	bcc.n	8000864 <CopyDataInit>
  ldr r2, =_sbss
 8000876:	4a0a      	ldr	r2, [pc, #40]	@ (80008a0 <LoopForever+0x12>)
  b LoopFillZerobss
 8000878:	e002      	b.n	8000880 <LoopFillZerobss>

0800087a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800087a:	2300      	movs	r3, #0
  str  r3, [r2]
 800087c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800087e:	3204      	adds	r2, #4

08000880 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000880:	4b08      	ldr	r3, [pc, #32]	@ (80008a4 <LoopForever+0x16>)
  cmp r2, r3
 8000882:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000884:	d3f9      	bcc.n	800087a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000886:	f003 fa59 	bl	8003d3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800088a:	f7ff fde3 	bl	8000454 <main>

0800088e <LoopForever>:

LoopForever:
    b LoopForever
 800088e:	e7fe      	b.n	800088e <LoopForever>
  ldr   r0, =_estack
 8000890:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000894:	080042d4 	.word	0x080042d4
  ldr r0, =_sdata
 8000898:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800089c:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 80008a0:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 80008a4:	200002c0 	.word	0x200002c0

080008a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008a8:	e7fe      	b.n	80008a8 <ADC1_IRQHandler>

080008aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b082      	sub	sp, #8
 80008ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008b0:	1dfb      	adds	r3, r7, #7
 80008b2:	2200      	movs	r2, #0
 80008b4:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008b6:	2003      	movs	r0, #3
 80008b8:	f000 f80e 	bl	80008d8 <HAL_InitTick>
 80008bc:	1e03      	subs	r3, r0, #0
 80008be:	d003      	beq.n	80008c8 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80008c0:	1dfb      	adds	r3, r7, #7
 80008c2:	2201      	movs	r2, #1
 80008c4:	701a      	strb	r2, [r3, #0]
 80008c6:	e001      	b.n	80008cc <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008c8:	f7ff fe34 	bl	8000534 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008cc:	1dfb      	adds	r3, r7, #7
 80008ce:	781b      	ldrb	r3, [r3, #0]
}
 80008d0:	0018      	movs	r0, r3
 80008d2:	46bd      	mov	sp, r7
 80008d4:	b002      	add	sp, #8
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d8:	b590      	push	{r4, r7, lr}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008e0:	230f      	movs	r3, #15
 80008e2:	18fb      	adds	r3, r7, r3
 80008e4:	2200      	movs	r2, #0
 80008e6:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 80008e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000960 <HAL_InitTick+0x88>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d02b      	beq.n	8000948 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 80008f0:	4b1c      	ldr	r3, [pc, #112]	@ (8000964 <HAL_InitTick+0x8c>)
 80008f2:	681c      	ldr	r4, [r3, #0]
 80008f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000960 <HAL_InitTick+0x88>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	0019      	movs	r1, r3
 80008fa:	23fa      	movs	r3, #250	@ 0xfa
 80008fc:	0098      	lsls	r0, r3, #2
 80008fe:	f7ff fc03 	bl	8000108 <__udivsi3>
 8000902:	0003      	movs	r3, r0
 8000904:	0019      	movs	r1, r3
 8000906:	0020      	movs	r0, r4
 8000908:	f7ff fbfe 	bl	8000108 <__udivsi3>
 800090c:	0003      	movs	r3, r0
 800090e:	0018      	movs	r0, r3
 8000910:	f000 f93d 	bl	8000b8e <HAL_SYSTICK_Config>
 8000914:	1e03      	subs	r3, r0, #0
 8000916:	d112      	bne.n	800093e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2b03      	cmp	r3, #3
 800091c:	d80a      	bhi.n	8000934 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800091e:	6879      	ldr	r1, [r7, #4]
 8000920:	2301      	movs	r3, #1
 8000922:	425b      	negs	r3, r3
 8000924:	2200      	movs	r2, #0
 8000926:	0018      	movs	r0, r3
 8000928:	f000 f90c 	bl	8000b44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800092c:	4b0e      	ldr	r3, [pc, #56]	@ (8000968 <HAL_InitTick+0x90>)
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	e00d      	b.n	8000950 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000934:	230f      	movs	r3, #15
 8000936:	18fb      	adds	r3, r7, r3
 8000938:	2201      	movs	r2, #1
 800093a:	701a      	strb	r2, [r3, #0]
 800093c:	e008      	b.n	8000950 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800093e:	230f      	movs	r3, #15
 8000940:	18fb      	adds	r3, r7, r3
 8000942:	2201      	movs	r2, #1
 8000944:	701a      	strb	r2, [r3, #0]
 8000946:	e003      	b.n	8000950 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000948:	230f      	movs	r3, #15
 800094a:	18fb      	adds	r3, r7, r3
 800094c:	2201      	movs	r2, #1
 800094e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000950:	230f      	movs	r3, #15
 8000952:	18fb      	adds	r3, r7, r3
 8000954:	781b      	ldrb	r3, [r3, #0]
}
 8000956:	0018      	movs	r0, r3
 8000958:	46bd      	mov	sp, r7
 800095a:	b005      	add	sp, #20
 800095c:	bd90      	pop	{r4, r7, pc}
 800095e:	46c0      	nop			@ (mov r8, r8)
 8000960:	20000008 	.word	0x20000008
 8000964:	20000000 	.word	0x20000000
 8000968:	20000004 	.word	0x20000004

0800096c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000970:	4b05      	ldr	r3, [pc, #20]	@ (8000988 <HAL_IncTick+0x1c>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	001a      	movs	r2, r3
 8000976:	4b05      	ldr	r3, [pc, #20]	@ (800098c <HAL_IncTick+0x20>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	18d2      	adds	r2, r2, r3
 800097c:	4b03      	ldr	r3, [pc, #12]	@ (800098c <HAL_IncTick+0x20>)
 800097e:	601a      	str	r2, [r3, #0]
}
 8000980:	46c0      	nop			@ (mov r8, r8)
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	46c0      	nop			@ (mov r8, r8)
 8000988:	20000008 	.word	0x20000008
 800098c:	20000170 	.word	0x20000170

08000990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  return uwTick;
 8000994:	4b02      	ldr	r3, [pc, #8]	@ (80009a0 <HAL_GetTick+0x10>)
 8000996:	681b      	ldr	r3, [r3, #0]
}
 8000998:	0018      	movs	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	46c0      	nop			@ (mov r8, r8)
 80009a0:	20000170 	.word	0x20000170

080009a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009ac:	f7ff fff0 	bl	8000990 <HAL_GetTick>
 80009b0:	0003      	movs	r3, r0
 80009b2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	3301      	adds	r3, #1
 80009bc:	d005      	beq.n	80009ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009be:	4b0a      	ldr	r3, [pc, #40]	@ (80009e8 <HAL_Delay+0x44>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	001a      	movs	r2, r3
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	189b      	adds	r3, r3, r2
 80009c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009ca:	46c0      	nop			@ (mov r8, r8)
 80009cc:	f7ff ffe0 	bl	8000990 <HAL_GetTick>
 80009d0:	0002      	movs	r2, r0
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	68fa      	ldr	r2, [r7, #12]
 80009d8:	429a      	cmp	r2, r3
 80009da:	d8f7      	bhi.n	80009cc <HAL_Delay+0x28>
  {
  }
}
 80009dc:	46c0      	nop			@ (mov r8, r8)
 80009de:	46c0      	nop			@ (mov r8, r8)
 80009e0:	46bd      	mov	sp, r7
 80009e2:	b004      	add	sp, #16
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	46c0      	nop			@ (mov r8, r8)
 80009e8:	20000008 	.word	0x20000008

080009ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	0002      	movs	r2, r0
 80009f4:	1dfb      	adds	r3, r7, #7
 80009f6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009f8:	1dfb      	adds	r3, r7, #7
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80009fe:	d809      	bhi.n	8000a14 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a00:	1dfb      	adds	r3, r7, #7
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	001a      	movs	r2, r3
 8000a06:	231f      	movs	r3, #31
 8000a08:	401a      	ands	r2, r3
 8000a0a:	4b04      	ldr	r3, [pc, #16]	@ (8000a1c <__NVIC_EnableIRQ+0x30>)
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	4091      	lsls	r1, r2
 8000a10:	000a      	movs	r2, r1
 8000a12:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000a14:	46c0      	nop			@ (mov r8, r8)
 8000a16:	46bd      	mov	sp, r7
 8000a18:	b002      	add	sp, #8
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	e000e100 	.word	0xe000e100

08000a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a20:	b590      	push	{r4, r7, lr}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	0002      	movs	r2, r0
 8000a28:	6039      	str	r1, [r7, #0]
 8000a2a:	1dfb      	adds	r3, r7, #7
 8000a2c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a2e:	1dfb      	adds	r3, r7, #7
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a34:	d828      	bhi.n	8000a88 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a36:	4a2f      	ldr	r2, [pc, #188]	@ (8000af4 <__NVIC_SetPriority+0xd4>)
 8000a38:	1dfb      	adds	r3, r7, #7
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	b25b      	sxtb	r3, r3
 8000a3e:	089b      	lsrs	r3, r3, #2
 8000a40:	33c0      	adds	r3, #192	@ 0xc0
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	589b      	ldr	r3, [r3, r2]
 8000a46:	1dfa      	adds	r2, r7, #7
 8000a48:	7812      	ldrb	r2, [r2, #0]
 8000a4a:	0011      	movs	r1, r2
 8000a4c:	2203      	movs	r2, #3
 8000a4e:	400a      	ands	r2, r1
 8000a50:	00d2      	lsls	r2, r2, #3
 8000a52:	21ff      	movs	r1, #255	@ 0xff
 8000a54:	4091      	lsls	r1, r2
 8000a56:	000a      	movs	r2, r1
 8000a58:	43d2      	mvns	r2, r2
 8000a5a:	401a      	ands	r2, r3
 8000a5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	019b      	lsls	r3, r3, #6
 8000a62:	22ff      	movs	r2, #255	@ 0xff
 8000a64:	401a      	ands	r2, r3
 8000a66:	1dfb      	adds	r3, r7, #7
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	4003      	ands	r3, r0
 8000a70:	00db      	lsls	r3, r3, #3
 8000a72:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a74:	481f      	ldr	r0, [pc, #124]	@ (8000af4 <__NVIC_SetPriority+0xd4>)
 8000a76:	1dfb      	adds	r3, r7, #7
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	b25b      	sxtb	r3, r3
 8000a7c:	089b      	lsrs	r3, r3, #2
 8000a7e:	430a      	orrs	r2, r1
 8000a80:	33c0      	adds	r3, #192	@ 0xc0
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a86:	e031      	b.n	8000aec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a88:	4a1b      	ldr	r2, [pc, #108]	@ (8000af8 <__NVIC_SetPriority+0xd8>)
 8000a8a:	1dfb      	adds	r3, r7, #7
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	0019      	movs	r1, r3
 8000a90:	230f      	movs	r3, #15
 8000a92:	400b      	ands	r3, r1
 8000a94:	3b08      	subs	r3, #8
 8000a96:	089b      	lsrs	r3, r3, #2
 8000a98:	3306      	adds	r3, #6
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	18d3      	adds	r3, r2, r3
 8000a9e:	3304      	adds	r3, #4
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	1dfa      	adds	r2, r7, #7
 8000aa4:	7812      	ldrb	r2, [r2, #0]
 8000aa6:	0011      	movs	r1, r2
 8000aa8:	2203      	movs	r2, #3
 8000aaa:	400a      	ands	r2, r1
 8000aac:	00d2      	lsls	r2, r2, #3
 8000aae:	21ff      	movs	r1, #255	@ 0xff
 8000ab0:	4091      	lsls	r1, r2
 8000ab2:	000a      	movs	r2, r1
 8000ab4:	43d2      	mvns	r2, r2
 8000ab6:	401a      	ands	r2, r3
 8000ab8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	019b      	lsls	r3, r3, #6
 8000abe:	22ff      	movs	r2, #255	@ 0xff
 8000ac0:	401a      	ands	r2, r3
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	2303      	movs	r3, #3
 8000aca:	4003      	ands	r3, r0
 8000acc:	00db      	lsls	r3, r3, #3
 8000ace:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ad0:	4809      	ldr	r0, [pc, #36]	@ (8000af8 <__NVIC_SetPriority+0xd8>)
 8000ad2:	1dfb      	adds	r3, r7, #7
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	001c      	movs	r4, r3
 8000ad8:	230f      	movs	r3, #15
 8000ada:	4023      	ands	r3, r4
 8000adc:	3b08      	subs	r3, #8
 8000ade:	089b      	lsrs	r3, r3, #2
 8000ae0:	430a      	orrs	r2, r1
 8000ae2:	3306      	adds	r3, #6
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	18c3      	adds	r3, r0, r3
 8000ae8:	3304      	adds	r3, #4
 8000aea:	601a      	str	r2, [r3, #0]
}
 8000aec:	46c0      	nop			@ (mov r8, r8)
 8000aee:	46bd      	mov	sp, r7
 8000af0:	b003      	add	sp, #12
 8000af2:	bd90      	pop	{r4, r7, pc}
 8000af4:	e000e100 	.word	0xe000e100
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	1e5a      	subs	r2, r3, #1
 8000b08:	2380      	movs	r3, #128	@ 0x80
 8000b0a:	045b      	lsls	r3, r3, #17
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d301      	bcc.n	8000b14 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b10:	2301      	movs	r3, #1
 8000b12:	e010      	b.n	8000b36 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b14:	4b0a      	ldr	r3, [pc, #40]	@ (8000b40 <SysTick_Config+0x44>)
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	3a01      	subs	r2, #1
 8000b1a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	425b      	negs	r3, r3
 8000b20:	2103      	movs	r1, #3
 8000b22:	0018      	movs	r0, r3
 8000b24:	f7ff ff7c 	bl	8000a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b28:	4b05      	ldr	r3, [pc, #20]	@ (8000b40 <SysTick_Config+0x44>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b2e:	4b04      	ldr	r3, [pc, #16]	@ (8000b40 <SysTick_Config+0x44>)
 8000b30:	2207      	movs	r2, #7
 8000b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	0018      	movs	r0, r3
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	b002      	add	sp, #8
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	46c0      	nop			@ (mov r8, r8)
 8000b40:	e000e010 	.word	0xe000e010

08000b44 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60b9      	str	r1, [r7, #8]
 8000b4c:	607a      	str	r2, [r7, #4]
 8000b4e:	210f      	movs	r1, #15
 8000b50:	187b      	adds	r3, r7, r1
 8000b52:	1c02      	adds	r2, r0, #0
 8000b54:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	187b      	adds	r3, r7, r1
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	b25b      	sxtb	r3, r3
 8000b5e:	0011      	movs	r1, r2
 8000b60:	0018      	movs	r0, r3
 8000b62:	f7ff ff5d 	bl	8000a20 <__NVIC_SetPriority>
}
 8000b66:	46c0      	nop			@ (mov r8, r8)
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	b004      	add	sp, #16
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b082      	sub	sp, #8
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	0002      	movs	r2, r0
 8000b76:	1dfb      	adds	r3, r7, #7
 8000b78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b7a:	1dfb      	adds	r3, r7, #7
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	b25b      	sxtb	r3, r3
 8000b80:	0018      	movs	r0, r3
 8000b82:	f7ff ff33 	bl	80009ec <__NVIC_EnableIRQ>
}
 8000b86:	46c0      	nop			@ (mov r8, r8)
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	b002      	add	sp, #8
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b082      	sub	sp, #8
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f7ff ffaf 	bl	8000afc <SysTick_Config>
 8000b9e:	0003      	movs	r3, r0
}
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	b002      	add	sp, #8
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d101      	bne.n	8000bba <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e050      	b.n	8000c5c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2225      	movs	r2, #37	@ 0x25
 8000bbe:	5c9b      	ldrb	r3, [r3, r2]
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	2b02      	cmp	r3, #2
 8000bc4:	d008      	beq.n	8000bd8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2204      	movs	r2, #4
 8000bca:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2224      	movs	r2, #36	@ 0x24
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	e041      	b.n	8000c5c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	210e      	movs	r1, #14
 8000be4:	438a      	bics	r2, r1
 8000be6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bf2:	491c      	ldr	r1, [pc, #112]	@ (8000c64 <HAL_DMA_Abort+0xbc>)
 8000bf4:	400a      	ands	r2, r1
 8000bf6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	2101      	movs	r1, #1
 8000c04:	438a      	bics	r2, r1
 8000c06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8000c08:	4b17      	ldr	r3, [pc, #92]	@ (8000c68 <HAL_DMA_Abort+0xc0>)
 8000c0a:	6859      	ldr	r1, [r3, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c10:	221c      	movs	r2, #28
 8000c12:	4013      	ands	r3, r2
 8000c14:	2201      	movs	r2, #1
 8000c16:	409a      	lsls	r2, r3
 8000c18:	4b13      	ldr	r3, [pc, #76]	@ (8000c68 <HAL_DMA_Abort+0xc0>)
 8000c1a:	430a      	orrs	r2, r1
 8000c1c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000c26:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d00c      	beq.n	8000c4a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000c3a:	490a      	ldr	r1, [pc, #40]	@ (8000c64 <HAL_DMA_Abort+0xbc>)
 8000c3c:	400a      	ands	r2, r1
 8000c3e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000c48:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2225      	movs	r2, #37	@ 0x25
 8000c4e:	2101      	movs	r1, #1
 8000c50:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2224      	movs	r2, #36	@ 0x24
 8000c56:	2100      	movs	r1, #0
 8000c58:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000c5a:	2300      	movs	r3, #0
}
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	b002      	add	sp, #8
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	fffffeff 	.word	0xfffffeff
 8000c68:	40020000 	.word	0x40020000

08000c6c <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c74:	230f      	movs	r3, #15
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	2200      	movs	r2, #0
 8000c7a:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2224      	movs	r2, #36	@ 0x24
 8000c80:	2100      	movs	r1, #0
 8000c82:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2224      	movs	r2, #36	@ 0x24
 8000c88:	5c9b      	ldrb	r3, [r3, r2]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d101      	bne.n	8000c92 <HAL_DMA_Abort_IT+0x26>
 8000c8e:	2302      	movs	r3, #2
 8000c90:	e05e      	b.n	8000d50 <HAL_DMA_Abort_IT+0xe4>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2224      	movs	r2, #36	@ 0x24
 8000c96:	2101      	movs	r1, #1
 8000c98:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2225      	movs	r2, #37	@ 0x25
 8000c9e:	5c9b      	ldrb	r3, [r3, r2]
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d007      	beq.n	8000cb6 <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2204      	movs	r2, #4
 8000caa:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000cac:	230f      	movs	r3, #15
 8000cae:	18fb      	adds	r3, r7, r3
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	701a      	strb	r2, [r3, #0]
 8000cb4:	e049      	b.n	8000d4a <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	210e      	movs	r1, #14
 8000cc2:	438a      	bics	r2, r1
 8000cc4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	438a      	bics	r2, r1
 8000cd4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ce0:	491d      	ldr	r1, [pc, #116]	@ (8000d58 <HAL_DMA_Abort_IT+0xec>)
 8000ce2:	400a      	ands	r2, r1
 8000ce4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8000ce6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d5c <HAL_DMA_Abort_IT+0xf0>)
 8000ce8:	6859      	ldr	r1, [r3, #4]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cee:	221c      	movs	r2, #28
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	409a      	lsls	r2, r3
 8000cf6:	4b19      	ldr	r3, [pc, #100]	@ (8000d5c <HAL_DMA_Abort_IT+0xf0>)
 8000cf8:	430a      	orrs	r2, r1
 8000cfa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000d04:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d00c      	beq.n	8000d28 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000d18:	490f      	ldr	r1, [pc, #60]	@ (8000d58 <HAL_DMA_Abort_IT+0xec>)
 8000d1a:	400a      	ands	r2, r1
 8000d1c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000d26:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2225      	movs	r2, #37	@ 0x25
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2224      	movs	r2, #36	@ 0x24
 8000d34:	2100      	movs	r1, #0
 8000d36:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d004      	beq.n	8000d4a <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	0010      	movs	r0, r2
 8000d48:	4798      	blx	r3
    }
  }
  return status;
 8000d4a:	230f      	movs	r3, #15
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	781b      	ldrb	r3, [r3, #0]
}
 8000d50:	0018      	movs	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	b004      	add	sp, #16
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	fffffeff 	.word	0xfffffeff
 8000d5c:	40020000 	.word	0x40020000

08000d60 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2225      	movs	r2, #37	@ 0x25
 8000d6c:	5c9b      	ldrb	r3, [r3, r2]
 8000d6e:	b2db      	uxtb	r3, r3
}
 8000d70:	0018      	movs	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	b002      	add	sp, #8
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000d86:	e153      	b.n	8001030 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	4091      	lsls	r1, r2
 8000d92:	000a      	movs	r2, r1
 8000d94:	4013      	ands	r3, r2
 8000d96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d100      	bne.n	8000da0 <HAL_GPIO_Init+0x28>
 8000d9e:	e144      	b.n	800102a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d003      	beq.n	8000db0 <HAL_GPIO_Init+0x38>
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	2b12      	cmp	r3, #18
 8000dae:	d125      	bne.n	8000dfc <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	08da      	lsrs	r2, r3, #3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3208      	adds	r2, #8
 8000db8:	0092      	lsls	r2, r2, #2
 8000dba:	58d3      	ldr	r3, [r2, r3]
 8000dbc:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	2207      	movs	r2, #7
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	220f      	movs	r2, #15
 8000dc8:	409a      	lsls	r2, r3
 8000dca:	0013      	movs	r3, r2
 8000dcc:	43da      	mvns	r2, r3
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	691b      	ldr	r3, [r3, #16]
 8000dd8:	220f      	movs	r2, #15
 8000dda:	401a      	ands	r2, r3
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	2107      	movs	r1, #7
 8000de0:	400b      	ands	r3, r1
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	409a      	lsls	r2, r3
 8000de6:	0013      	movs	r3, r2
 8000de8:	697a      	ldr	r2, [r7, #20]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	08da      	lsrs	r2, r3, #3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	3208      	adds	r2, #8
 8000df6:	0092      	lsls	r2, r2, #2
 8000df8:	6979      	ldr	r1, [r7, #20]
 8000dfa:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	2203      	movs	r2, #3
 8000e08:	409a      	lsls	r2, r3
 8000e0a:	0013      	movs	r3, r2
 8000e0c:	43da      	mvns	r2, r3
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	4013      	ands	r3, r2
 8000e12:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	2203      	movs	r2, #3
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	409a      	lsls	r2, r3
 8000e22:	0013      	movs	r3, r2
 8000e24:	697a      	ldr	r2, [r7, #20]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	697a      	ldr	r2, [r7, #20]
 8000e2e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d00b      	beq.n	8000e50 <HAL_GPIO_Init+0xd8>
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	d007      	beq.n	8000e50 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e44:	2b11      	cmp	r3, #17
 8000e46:	d003      	beq.n	8000e50 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	2b12      	cmp	r3, #18
 8000e4e:	d130      	bne.n	8000eb2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	409a      	lsls	r2, r3
 8000e5e:	0013      	movs	r3, r2
 8000e60:	43da      	mvns	r2, r3
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	4013      	ands	r3, r2
 8000e66:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	68da      	ldr	r2, [r3, #12]
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	409a      	lsls	r2, r3
 8000e72:	0013      	movs	r3, r2
 8000e74:	697a      	ldr	r2, [r7, #20]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	697a      	ldr	r2, [r7, #20]
 8000e7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e86:	2201      	movs	r2, #1
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	409a      	lsls	r2, r3
 8000e8c:	0013      	movs	r3, r2
 8000e8e:	43da      	mvns	r2, r3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	4013      	ands	r3, r2
 8000e94:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	091b      	lsrs	r3, r3, #4
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	409a      	lsls	r2, r3
 8000ea4:	0013      	movs	r3, r2
 8000ea6:	697a      	ldr	r2, [r7, #20]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	697a      	ldr	r2, [r7, #20]
 8000eb0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2b03      	cmp	r3, #3
 8000eb8:	d017      	beq.n	8000eea <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	409a      	lsls	r2, r3
 8000ec8:	0013      	movs	r3, r2
 8000eca:	43da      	mvns	r2, r3
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	689a      	ldr	r2, [r3, #8]
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	409a      	lsls	r2, r3
 8000edc:	0013      	movs	r3, r2
 8000ede:	697a      	ldr	r2, [r7, #20]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	697a      	ldr	r2, [r7, #20]
 8000ee8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685a      	ldr	r2, [r3, #4]
 8000eee:	2380      	movs	r3, #128	@ 0x80
 8000ef0:	055b      	lsls	r3, r3, #21
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	d100      	bne.n	8000ef8 <HAL_GPIO_Init+0x180>
 8000ef6:	e098      	b.n	800102a <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000ef8:	4a53      	ldr	r2, [pc, #332]	@ (8001048 <HAL_GPIO_Init+0x2d0>)
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	089b      	lsrs	r3, r3, #2
 8000efe:	3318      	adds	r3, #24
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	589b      	ldr	r3, [r3, r2]
 8000f04:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	2203      	movs	r2, #3
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	220f      	movs	r2, #15
 8000f10:	409a      	lsls	r2, r3
 8000f12:	0013      	movs	r3, r2
 8000f14:	43da      	mvns	r2, r3
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	23a0      	movs	r3, #160	@ 0xa0
 8000f20:	05db      	lsls	r3, r3, #23
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d019      	beq.n	8000f5a <HAL_GPIO_Init+0x1e2>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a48      	ldr	r2, [pc, #288]	@ (800104c <HAL_GPIO_Init+0x2d4>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d013      	beq.n	8000f56 <HAL_GPIO_Init+0x1de>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a47      	ldr	r2, [pc, #284]	@ (8001050 <HAL_GPIO_Init+0x2d8>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d00d      	beq.n	8000f52 <HAL_GPIO_Init+0x1da>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a46      	ldr	r2, [pc, #280]	@ (8001054 <HAL_GPIO_Init+0x2dc>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d007      	beq.n	8000f4e <HAL_GPIO_Init+0x1d6>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a45      	ldr	r2, [pc, #276]	@ (8001058 <HAL_GPIO_Init+0x2e0>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d101      	bne.n	8000f4a <HAL_GPIO_Init+0x1d2>
 8000f46:	2305      	movs	r3, #5
 8000f48:	e008      	b.n	8000f5c <HAL_GPIO_Init+0x1e4>
 8000f4a:	2306      	movs	r3, #6
 8000f4c:	e006      	b.n	8000f5c <HAL_GPIO_Init+0x1e4>
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e004      	b.n	8000f5c <HAL_GPIO_Init+0x1e4>
 8000f52:	2302      	movs	r3, #2
 8000f54:	e002      	b.n	8000f5c <HAL_GPIO_Init+0x1e4>
 8000f56:	2301      	movs	r3, #1
 8000f58:	e000      	b.n	8000f5c <HAL_GPIO_Init+0x1e4>
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	2103      	movs	r1, #3
 8000f60:	400a      	ands	r2, r1
 8000f62:	00d2      	lsls	r2, r2, #3
 8000f64:	4093      	lsls	r3, r2
 8000f66:	697a      	ldr	r2, [r7, #20]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000f6c:	4936      	ldr	r1, [pc, #216]	@ (8001048 <HAL_GPIO_Init+0x2d0>)
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	089b      	lsrs	r3, r3, #2
 8000f72:	3318      	adds	r3, #24
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8000f7a:	4a33      	ldr	r2, [pc, #204]	@ (8001048 <HAL_GPIO_Init+0x2d0>)
 8000f7c:	2380      	movs	r3, #128	@ 0x80
 8000f7e:	58d3      	ldr	r3, [r2, r3]
 8000f80:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	43da      	mvns	r2, r3
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685a      	ldr	r2, [r3, #4]
 8000f90:	2380      	movs	r3, #128	@ 0x80
 8000f92:	025b      	lsls	r3, r3, #9
 8000f94:	4013      	ands	r3, r2
 8000f96:	d003      	beq.n	8000fa0 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8000f98:	697a      	ldr	r2, [r7, #20]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8000fa0:	4929      	ldr	r1, [pc, #164]	@ (8001048 <HAL_GPIO_Init+0x2d0>)
 8000fa2:	2280      	movs	r2, #128	@ 0x80
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8000fa8:	4a27      	ldr	r2, [pc, #156]	@ (8001048 <HAL_GPIO_Init+0x2d0>)
 8000faa:	2384      	movs	r3, #132	@ 0x84
 8000fac:	58d3      	ldr	r3, [r2, r3]
 8000fae:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	43da      	mvns	r2, r3
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685a      	ldr	r2, [r3, #4]
 8000fbe:	2380      	movs	r3, #128	@ 0x80
 8000fc0:	029b      	lsls	r3, r3, #10
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8000fc6:	697a      	ldr	r2, [r7, #20]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8000fce:	491e      	ldr	r1, [pc, #120]	@ (8001048 <HAL_GPIO_Init+0x2d0>)
 8000fd0:	2284      	movs	r2, #132	@ 0x84
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000fd6:	4b1c      	ldr	r3, [pc, #112]	@ (8001048 <HAL_GPIO_Init+0x2d0>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	43da      	mvns	r2, r3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685a      	ldr	r2, [r3, #4]
 8000fea:	2380      	movs	r3, #128	@ 0x80
 8000fec:	035b      	lsls	r3, r3, #13
 8000fee:	4013      	ands	r3, r2
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8000ff2:	697a      	ldr	r2, [r7, #20]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000ffa:	4b13      	ldr	r3, [pc, #76]	@ (8001048 <HAL_GPIO_Init+0x2d0>)
 8000ffc:	697a      	ldr	r2, [r7, #20]
 8000ffe:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001000:	4b11      	ldr	r3, [pc, #68]	@ (8001048 <HAL_GPIO_Init+0x2d0>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	43da      	mvns	r2, r3
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	4013      	ands	r3, r2
 800100e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685a      	ldr	r2, [r3, #4]
 8001014:	2380      	movs	r3, #128	@ 0x80
 8001016:	039b      	lsls	r3, r3, #14
 8001018:	4013      	ands	r3, r2
 800101a:	d003      	beq.n	8001024 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 800101c:	697a      	ldr	r2, [r7, #20]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	4313      	orrs	r3, r2
 8001022:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001024:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <HAL_GPIO_Init+0x2d0>)
 8001026:	697a      	ldr	r2, [r7, #20]
 8001028:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	3301      	adds	r3, #1
 800102e:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	40da      	lsrs	r2, r3
 8001038:	1e13      	subs	r3, r2, #0
 800103a:	d000      	beq.n	800103e <HAL_GPIO_Init+0x2c6>
 800103c:	e6a4      	b.n	8000d88 <HAL_GPIO_Init+0x10>
  }
}
 800103e:	46c0      	nop			@ (mov r8, r8)
 8001040:	46c0      	nop			@ (mov r8, r8)
 8001042:	46bd      	mov	sp, r7
 8001044:	b006      	add	sp, #24
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40021800 	.word	0x40021800
 800104c:	50000400 	.word	0x50000400
 8001050:	50000800 	.word	0x50000800
 8001054:	50000c00 	.word	0x50000c00
 8001058:	50001400 	.word	0x50001400

0800105c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	0008      	movs	r0, r1
 8001066:	0011      	movs	r1, r2
 8001068:	1cbb      	adds	r3, r7, #2
 800106a:	1c02      	adds	r2, r0, #0
 800106c:	801a      	strh	r2, [r3, #0]
 800106e:	1c7b      	adds	r3, r7, #1
 8001070:	1c0a      	adds	r2, r1, #0
 8001072:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001074:	1c7b      	adds	r3, r7, #1
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d004      	beq.n	8001086 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800107c:	1cbb      	adds	r3, r7, #2
 800107e:	881a      	ldrh	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001084:	e003      	b.n	800108e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001086:	1cbb      	adds	r3, r7, #2
 8001088:	881a      	ldrh	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800108e:	46c0      	nop			@ (mov r8, r8)
 8001090:	46bd      	mov	sp, r7
 8001092:	b002      	add	sp, #8
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32C0 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b084      	sub	sp, #16
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
 800109e:	000a      	movs	r2, r1
 80010a0:	1cbb      	adds	r3, r7, #2
 80010a2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	695b      	ldr	r3, [r3, #20]
 80010a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010aa:	1cbb      	adds	r3, r7, #2
 80010ac:	881b      	ldrh	r3, [r3, #0]
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	4013      	ands	r3, r2
 80010b2:	041a      	lsls	r2, r3, #16
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	43db      	mvns	r3, r3
 80010b8:	1cb9      	adds	r1, r7, #2
 80010ba:	8809      	ldrh	r1, [r1, #0]
 80010bc:	400b      	ands	r3, r1
 80010be:	431a      	orrs	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	619a      	str	r2, [r3, #24]
}
 80010c4:	46c0      	nop			@ (mov r8, r8)
 80010c6:	46bd      	mov	sp, r7
 80010c8:	b004      	add	sp, #16
 80010ca:	bd80      	pop	{r7, pc}

080010cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e08f      	b.n	80011fe <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2241      	movs	r2, #65	@ 0x41
 80010e2:	5c9b      	ldrb	r3, [r3, r2]
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d107      	bne.n	80010fa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2240      	movs	r2, #64	@ 0x40
 80010ee:	2100      	movs	r1, #0
 80010f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	0018      	movs	r0, r3
 80010f6:	f7ff f92f 	bl	8000358 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2241      	movs	r2, #65	@ 0x41
 80010fe:	2124      	movs	r1, #36	@ 0x24
 8001100:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2101      	movs	r1, #1
 800110e:	438a      	bics	r2, r1
 8001110:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685a      	ldr	r2, [r3, #4]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	493b      	ldr	r1, [pc, #236]	@ (8001208 <HAL_I2C_Init+0x13c>)
 800111c:	400a      	ands	r2, r1
 800111e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	689a      	ldr	r2, [r3, #8]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4938      	ldr	r1, [pc, #224]	@ (800120c <HAL_I2C_Init+0x140>)
 800112c:	400a      	ands	r2, r1
 800112e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d108      	bne.n	800114a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2180      	movs	r1, #128	@ 0x80
 8001142:	0209      	lsls	r1, r1, #8
 8001144:	430a      	orrs	r2, r1
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	e007      	b.n	800115a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2184      	movs	r1, #132	@ 0x84
 8001154:	0209      	lsls	r1, r1, #8
 8001156:	430a      	orrs	r2, r1
 8001158:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	2b02      	cmp	r3, #2
 8001160:	d109      	bne.n	8001176 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2180      	movs	r1, #128	@ 0x80
 800116e:	0109      	lsls	r1, r1, #4
 8001170:	430a      	orrs	r2, r1
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	e007      	b.n	8001186 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	685a      	ldr	r2, [r3, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4923      	ldr	r1, [pc, #140]	@ (8001210 <HAL_I2C_Init+0x144>)
 8001182:	400a      	ands	r2, r1
 8001184:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4920      	ldr	r1, [pc, #128]	@ (8001214 <HAL_I2C_Init+0x148>)
 8001192:	430a      	orrs	r2, r1
 8001194:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	68da      	ldr	r2, [r3, #12]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	491a      	ldr	r1, [pc, #104]	@ (800120c <HAL_I2C_Init+0x140>)
 80011a2:	400a      	ands	r2, r1
 80011a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	691a      	ldr	r2, [r3, #16]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	431a      	orrs	r2, r3
 80011b0:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	430a      	orrs	r2, r1
 80011be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	69d9      	ldr	r1, [r3, #28]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6a1a      	ldr	r2, [r3, #32]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	430a      	orrs	r2, r1
 80011ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2101      	movs	r1, #1
 80011dc:	430a      	orrs	r2, r1
 80011de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2241      	movs	r2, #65	@ 0x41
 80011ea:	2120      	movs	r1, #32
 80011ec:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2242      	movs	r2, #66	@ 0x42
 80011f8:	2100      	movs	r1, #0
 80011fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	0018      	movs	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	b002      	add	sp, #8
 8001204:	bd80      	pop	{r7, pc}
 8001206:	46c0      	nop			@ (mov r8, r8)
 8001208:	f0ffffff 	.word	0xf0ffffff
 800120c:	ffff7fff 	.word	0xffff7fff
 8001210:	fffff7ff 	.word	0xfffff7ff
 8001214:	02008000 	.word	0x02008000

08001218 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001234:	2b00      	cmp	r3, #0
 8001236:	d005      	beq.n	8001244 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800123c:	68ba      	ldr	r2, [r7, #8]
 800123e:	68f9      	ldr	r1, [r7, #12]
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	4798      	blx	r3
  }
}
 8001244:	46c0      	nop			@ (mov r8, r8)
 8001246:	46bd      	mov	sp, r7
 8001248:	b004      	add	sp, #16
 800124a:	bd80      	pop	{r7, pc}

0800124c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001264:	697a      	ldr	r2, [r7, #20]
 8001266:	2380      	movs	r3, #128	@ 0x80
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	4013      	ands	r3, r2
 800126c:	d00e      	beq.n	800128c <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	2280      	movs	r2, #128	@ 0x80
 8001272:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001274:	d00a      	beq.n	800128c <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127a:	2201      	movs	r2, #1
 800127c:	431a      	orrs	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2280      	movs	r2, #128	@ 0x80
 8001288:	0052      	lsls	r2, r2, #1
 800128a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800128c:	697a      	ldr	r2, [r7, #20]
 800128e:	2380      	movs	r3, #128	@ 0x80
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	4013      	ands	r3, r2
 8001294:	d00e      	beq.n	80012b4 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	2280      	movs	r2, #128	@ 0x80
 800129a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800129c:	d00a      	beq.n	80012b4 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a2:	2208      	movs	r2, #8
 80012a4:	431a      	orrs	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2280      	movs	r2, #128	@ 0x80
 80012b0:	00d2      	lsls	r2, r2, #3
 80012b2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	2380      	movs	r3, #128	@ 0x80
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4013      	ands	r3, r2
 80012bc:	d00e      	beq.n	80012dc <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	2280      	movs	r2, #128	@ 0x80
 80012c2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80012c4:	d00a      	beq.n	80012dc <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ca:	2202      	movs	r2, #2
 80012cc:	431a      	orrs	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2280      	movs	r2, #128	@ 0x80
 80012d8:	0092      	lsls	r2, r2, #2
 80012da:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e0:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	220b      	movs	r2, #11
 80012e6:	4013      	ands	r3, r2
 80012e8:	d005      	beq.n	80012f6 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	0011      	movs	r1, r2
 80012f0:	0018      	movs	r0, r3
 80012f2:	f000 fbcd 	bl	8001a90 <I2C_ITError>
  }
}
 80012f6:	46c0      	nop			@ (mov r8, r8)
 80012f8:	46bd      	mov	sp, r7
 80012fa:	b006      	add	sp, #24
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001306:	46c0      	nop			@ (mov r8, r8)
 8001308:	46bd      	mov	sp, r7
 800130a:	b002      	add	sp, #8
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001316:	46c0      	nop			@ (mov r8, r8)
 8001318:	46bd      	mov	sp, r7
 800131a:	b002      	add	sp, #8
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	0008      	movs	r0, r1
 8001328:	0011      	movs	r1, r2
 800132a:	1cfb      	adds	r3, r7, #3
 800132c:	1c02      	adds	r2, r0, #0
 800132e:	701a      	strb	r2, [r3, #0]
 8001330:	003b      	movs	r3, r7
 8001332:	1c0a      	adds	r2, r1, #0
 8001334:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001336:	46c0      	nop			@ (mov r8, r8)
 8001338:	46bd      	mov	sp, r7
 800133a:	b002      	add	sp, #8
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001346:	46c0      	nop			@ (mov r8, r8)
 8001348:	46bd      	mov	sp, r7
 800134a:	b002      	add	sp, #8
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001356:	46c0      	nop			@ (mov r8, r8)
 8001358:	46bd      	mov	sp, r7
 800135a:	b002      	add	sp, #8
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001366:	46c0      	nop			@ (mov r8, r8)
 8001368:	46bd      	mov	sp, r7
 800136a:	b002      	add	sp, #8
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001380:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2240      	movs	r2, #64	@ 0x40
 800138a:	5c9b      	ldrb	r3, [r3, r2]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d101      	bne.n	8001394 <I2C_Slave_ISR_IT+0x24>
 8001390:	2302      	movs	r3, #2
 8001392:	e0e6      	b.n	8001562 <I2C_Slave_ISR_IT+0x1f2>
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2240      	movs	r2, #64	@ 0x40
 8001398:	2101      	movs	r1, #1
 800139a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	2220      	movs	r2, #32
 80013a0:	4013      	ands	r3, r2
 80013a2:	d009      	beq.n	80013b8 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2220      	movs	r2, #32
 80013a8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80013aa:	d005      	beq.n	80013b8 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	0011      	movs	r1, r2
 80013b2:	0018      	movs	r0, r3
 80013b4:	f000 f9e4 	bl	8001780 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	2210      	movs	r2, #16
 80013bc:	4013      	ands	r3, r2
 80013be:	d052      	beq.n	8001466 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2210      	movs	r2, #16
 80013c4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80013c6:	d04e      	beq.n	8001466 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d12d      	bne.n	800142e <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2241      	movs	r2, #65	@ 0x41
 80013d6:	5c9b      	ldrb	r3, [r3, r2]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b28      	cmp	r3, #40	@ 0x28
 80013dc:	d10b      	bne.n	80013f6 <I2C_Slave_ISR_IT+0x86>
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	2380      	movs	r3, #128	@ 0x80
 80013e2:	049b      	lsls	r3, r3, #18
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d106      	bne.n	80013f6 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	0011      	movs	r1, r2
 80013ee:	0018      	movs	r0, r3
 80013f0:	f000 faf6 	bl	80019e0 <I2C_ITListenCplt>
 80013f4:	e036      	b.n	8001464 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2241      	movs	r2, #65	@ 0x41
 80013fa:	5c9b      	ldrb	r3, [r3, r2]
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b29      	cmp	r3, #41	@ 0x29
 8001400:	d110      	bne.n	8001424 <I2C_Slave_ISR_IT+0xb4>
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	4a59      	ldr	r2, [pc, #356]	@ (800156c <I2C_Slave_ISR_IT+0x1fc>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d00c      	beq.n	8001424 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2210      	movs	r2, #16
 8001410:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	0018      	movs	r0, r3
 8001416:	f000 fc66 	bl	8001ce6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	0018      	movs	r0, r3
 800141e:	f000 f94b 	bl	80016b8 <I2C_ITSlaveSeqCplt>
 8001422:	e01f      	b.n	8001464 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2210      	movs	r2, #16
 800142a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800142c:	e091      	b.n	8001552 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2210      	movs	r2, #16
 8001434:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800143a:	2204      	movs	r2, #4
 800143c:	431a      	orrs	r2, r3
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d005      	beq.n	8001454 <I2C_Slave_ISR_IT+0xe4>
 8001448:	697a      	ldr	r2, [r7, #20]
 800144a:	2380      	movs	r3, #128	@ 0x80
 800144c:	045b      	lsls	r3, r3, #17
 800144e:	429a      	cmp	r2, r3
 8001450:	d000      	beq.n	8001454 <I2C_Slave_ISR_IT+0xe4>
 8001452:	e07e      	b.n	8001552 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	0011      	movs	r1, r2
 800145c:	0018      	movs	r0, r3
 800145e:	f000 fb17 	bl	8001a90 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001462:	e076      	b.n	8001552 <I2C_Slave_ISR_IT+0x1e2>
 8001464:	e075      	b.n	8001552 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	2204      	movs	r2, #4
 800146a:	4013      	ands	r3, r2
 800146c:	d02f      	beq.n	80014ce <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2204      	movs	r2, #4
 8001472:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001474:	d02b      	beq.n	80014ce <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800147a:	b29b      	uxth	r3, r3
 800147c:	2b00      	cmp	r3, #0
 800147e:	d018      	beq.n	80014b2 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001492:	1c5a      	adds	r2, r3, #1
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800149c:	3b01      	subs	r3, #1
 800149e:	b29a      	uxth	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	3b01      	subs	r3, #1
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d14c      	bne.n	8001556 <I2C_Slave_ISR_IT+0x1e6>
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	4a2b      	ldr	r2, [pc, #172]	@ (800156c <I2C_Slave_ISR_IT+0x1fc>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d048      	beq.n	8001556 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	0018      	movs	r0, r3
 80014c8:	f000 f8f6 	bl	80016b8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80014cc:	e043      	b.n	8001556 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	2208      	movs	r2, #8
 80014d2:	4013      	ands	r3, r2
 80014d4:	d00a      	beq.n	80014ec <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2208      	movs	r2, #8
 80014da:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80014dc:	d006      	beq.n	80014ec <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	0011      	movs	r1, r2
 80014e4:	0018      	movs	r0, r3
 80014e6:	f000 f843 	bl	8001570 <I2C_ITAddrCplt>
 80014ea:	e035      	b.n	8001558 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	2202      	movs	r2, #2
 80014f0:	4013      	ands	r3, r2
 80014f2:	d031      	beq.n	8001558 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2202      	movs	r2, #2
 80014f8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80014fa:	d02d      	beq.n	8001558 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001500:	b29b      	uxth	r3, r3
 8001502:	2b00      	cmp	r3, #0
 8001504:	d018      	beq.n	8001538 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800150a:	781a      	ldrb	r2, [r3, #0]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001516:	1c5a      	adds	r2, r3, #1
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001520:	b29b      	uxth	r3, r3
 8001522:	3b01      	subs	r3, #1
 8001524:	b29a      	uxth	r2, r3
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800152e:	3b01      	subs	r3, #1
 8001530:	b29a      	uxth	r2, r3
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001536:	e00f      	b.n	8001558 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001538:	697a      	ldr	r2, [r7, #20]
 800153a:	2380      	movs	r3, #128	@ 0x80
 800153c:	045b      	lsls	r3, r3, #17
 800153e:	429a      	cmp	r2, r3
 8001540:	d002      	beq.n	8001548 <I2C_Slave_ISR_IT+0x1d8>
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d107      	bne.n	8001558 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	0018      	movs	r0, r3
 800154c:	f000 f8b4 	bl	80016b8 <I2C_ITSlaveSeqCplt>
 8001550:	e002      	b.n	8001558 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8001552:	46c0      	nop			@ (mov r8, r8)
 8001554:	e000      	b.n	8001558 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8001556:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2240      	movs	r2, #64	@ 0x40
 800155c:	2100      	movs	r1, #0
 800155e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	0018      	movs	r0, r3
 8001564:	46bd      	mov	sp, r7
 8001566:	b006      	add	sp, #24
 8001568:	bd80      	pop	{r7, pc}
 800156a:	46c0      	nop			@ (mov r8, r8)
 800156c:	ffff0000 	.word	0xffff0000

08001570 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001570:	b5b0      	push	{r4, r5, r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2241      	movs	r2, #65	@ 0x41
 800157e:	5c9b      	ldrb	r3, [r3, r2]
 8001580:	b2db      	uxtb	r3, r3
 8001582:	001a      	movs	r2, r3
 8001584:	2328      	movs	r3, #40	@ 0x28
 8001586:	4013      	ands	r3, r2
 8001588:	2b28      	cmp	r3, #40	@ 0x28
 800158a:	d000      	beq.n	800158e <I2C_ITAddrCplt+0x1e>
 800158c:	e088      	b.n	80016a0 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	0c1b      	lsrs	r3, r3, #16
 8001596:	b2da      	uxtb	r2, r3
 8001598:	250f      	movs	r5, #15
 800159a:	197b      	adds	r3, r7, r5
 800159c:	2101      	movs	r1, #1
 800159e:	400a      	ands	r2, r1
 80015a0:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	0c1b      	lsrs	r3, r3, #16
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	200c      	movs	r0, #12
 80015ae:	183b      	adds	r3, r7, r0
 80015b0:	21fe      	movs	r1, #254	@ 0xfe
 80015b2:	400a      	ands	r2, r1
 80015b4:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	b29a      	uxth	r2, r3
 80015be:	240a      	movs	r4, #10
 80015c0:	193b      	adds	r3, r7, r4
 80015c2:	0592      	lsls	r2, r2, #22
 80015c4:	0d92      	lsrs	r2, r2, #22
 80015c6:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	2308      	movs	r3, #8
 80015d2:	18fb      	adds	r3, r7, r3
 80015d4:	21fe      	movs	r1, #254	@ 0xfe
 80015d6:	400a      	ands	r2, r1
 80015d8:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d148      	bne.n	8001674 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80015e2:	0021      	movs	r1, r4
 80015e4:	187b      	adds	r3, r7, r1
 80015e6:	881b      	ldrh	r3, [r3, #0]
 80015e8:	09db      	lsrs	r3, r3, #7
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	183b      	adds	r3, r7, r0
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	4053      	eors	r3, r2
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	001a      	movs	r2, r3
 80015f6:	2306      	movs	r3, #6
 80015f8:	4013      	ands	r3, r2
 80015fa:	d120      	bne.n	800163e <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80015fc:	183b      	adds	r3, r7, r0
 80015fe:	187a      	adds	r2, r7, r1
 8001600:	8812      	ldrh	r2, [r2, #0]
 8001602:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001608:	1c5a      	adds	r2, r3, #1
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001612:	2b02      	cmp	r3, #2
 8001614:	d14c      	bne.n	80016b0 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2208      	movs	r2, #8
 8001622:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2240      	movs	r2, #64	@ 0x40
 8001628:	2100      	movs	r1, #0
 800162a:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800162c:	183b      	adds	r3, r7, r0
 800162e:	881a      	ldrh	r2, [r3, #0]
 8001630:	197b      	adds	r3, r7, r5
 8001632:	7819      	ldrb	r1, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	0018      	movs	r0, r3
 8001638:	f7ff fe71 	bl	800131e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800163c:	e038      	b.n	80016b0 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800163e:	240c      	movs	r4, #12
 8001640:	193b      	adds	r3, r7, r4
 8001642:	2208      	movs	r2, #8
 8001644:	18ba      	adds	r2, r7, r2
 8001646:	8812      	ldrh	r2, [r2, #0]
 8001648:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800164a:	2380      	movs	r3, #128	@ 0x80
 800164c:	021a      	lsls	r2, r3, #8
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	0011      	movs	r1, r2
 8001652:	0018      	movs	r0, r3
 8001654:	f000 fb88 	bl	8001d68 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2240      	movs	r2, #64	@ 0x40
 800165c:	2100      	movs	r1, #0
 800165e:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001660:	193b      	adds	r3, r7, r4
 8001662:	881a      	ldrh	r2, [r3, #0]
 8001664:	230f      	movs	r3, #15
 8001666:	18fb      	adds	r3, r7, r3
 8001668:	7819      	ldrb	r1, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	0018      	movs	r0, r3
 800166e:	f7ff fe56 	bl	800131e <HAL_I2C_AddrCallback>
}
 8001672:	e01d      	b.n	80016b0 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001674:	2380      	movs	r3, #128	@ 0x80
 8001676:	021a      	lsls	r2, r3, #8
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	0011      	movs	r1, r2
 800167c:	0018      	movs	r0, r3
 800167e:	f000 fb73 	bl	8001d68 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2240      	movs	r2, #64	@ 0x40
 8001686:	2100      	movs	r1, #0
 8001688:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800168a:	230c      	movs	r3, #12
 800168c:	18fb      	adds	r3, r7, r3
 800168e:	881a      	ldrh	r2, [r3, #0]
 8001690:	230f      	movs	r3, #15
 8001692:	18fb      	adds	r3, r7, r3
 8001694:	7819      	ldrb	r1, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	0018      	movs	r0, r3
 800169a:	f7ff fe40 	bl	800131e <HAL_I2C_AddrCallback>
}
 800169e:	e007      	b.n	80016b0 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2208      	movs	r2, #8
 80016a6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2240      	movs	r2, #64	@ 0x40
 80016ac:	2100      	movs	r1, #0
 80016ae:	5499      	strb	r1, [r3, r2]
}
 80016b0:	46c0      	nop			@ (mov r8, r8)
 80016b2:	46bd      	mov	sp, r7
 80016b4:	b004      	add	sp, #16
 80016b6:	bdb0      	pop	{r4, r5, r7, pc}

080016b8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2242      	movs	r2, #66	@ 0x42
 80016cc:	2100      	movs	r1, #0
 80016ce:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80016d0:	68fa      	ldr	r2, [r7, #12]
 80016d2:	2380      	movs	r3, #128	@ 0x80
 80016d4:	01db      	lsls	r3, r3, #7
 80016d6:	4013      	ands	r3, r2
 80016d8:	d008      	beq.n	80016ec <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4924      	ldr	r1, [pc, #144]	@ (8001778 <I2C_ITSlaveSeqCplt+0xc0>)
 80016e6:	400a      	ands	r2, r1
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	e00c      	b.n	8001706 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80016ec:	68fa      	ldr	r2, [r7, #12]
 80016ee:	2380      	movs	r3, #128	@ 0x80
 80016f0:	021b      	lsls	r3, r3, #8
 80016f2:	4013      	ands	r3, r2
 80016f4:	d007      	beq.n	8001706 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	491e      	ldr	r1, [pc, #120]	@ (800177c <I2C_ITSlaveSeqCplt+0xc4>)
 8001702:	400a      	ands	r2, r1
 8001704:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2241      	movs	r2, #65	@ 0x41
 800170a:	5c9b      	ldrb	r3, [r3, r2]
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b29      	cmp	r3, #41	@ 0x29
 8001710:	d114      	bne.n	800173c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2241      	movs	r2, #65	@ 0x41
 8001716:	2128      	movs	r1, #40	@ 0x28
 8001718:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2221      	movs	r2, #33	@ 0x21
 800171e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2101      	movs	r1, #1
 8001724:	0018      	movs	r0, r3
 8001726:	f000 fb1f 	bl	8001d68 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2240      	movs	r2, #64	@ 0x40
 800172e:	2100      	movs	r1, #0
 8001730:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	0018      	movs	r0, r3
 8001736:	f7ff fde2 	bl	80012fe <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800173a:	e019      	b.n	8001770 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2241      	movs	r2, #65	@ 0x41
 8001740:	5c9b      	ldrb	r3, [r3, r2]
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2b2a      	cmp	r3, #42	@ 0x2a
 8001746:	d113      	bne.n	8001770 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2241      	movs	r2, #65	@ 0x41
 800174c:	2128      	movs	r1, #40	@ 0x28
 800174e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2222      	movs	r2, #34	@ 0x22
 8001754:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2102      	movs	r1, #2
 800175a:	0018      	movs	r0, r3
 800175c:	f000 fb04 	bl	8001d68 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2240      	movs	r2, #64	@ 0x40
 8001764:	2100      	movs	r1, #0
 8001766:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	0018      	movs	r0, r3
 800176c:	f7ff fdcf 	bl	800130e <HAL_I2C_SlaveRxCpltCallback>
}
 8001770:	46c0      	nop			@ (mov r8, r8)
 8001772:	46bd      	mov	sp, r7
 8001774:	b004      	add	sp, #16
 8001776:	bd80      	pop	{r7, pc}
 8001778:	ffffbfff 	.word	0xffffbfff
 800177c:	ffff7fff 	.word	0xffff7fff

08001780 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001796:	200f      	movs	r0, #15
 8001798:	183b      	adds	r3, r7, r0
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	2141      	movs	r1, #65	@ 0x41
 800179e:	5c52      	ldrb	r2, [r2, r1]
 80017a0:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2220      	movs	r2, #32
 80017a8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80017aa:	183b      	adds	r3, r7, r0
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b21      	cmp	r3, #33	@ 0x21
 80017b0:	d003      	beq.n	80017ba <I2C_ITSlaveCplt+0x3a>
 80017b2:	183b      	adds	r3, r7, r0
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b29      	cmp	r3, #41	@ 0x29
 80017b8:	d109      	bne.n	80017ce <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80017ba:	4a82      	ldr	r2, [pc, #520]	@ (80019c4 <I2C_ITSlaveCplt+0x244>)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	0011      	movs	r1, r2
 80017c0:	0018      	movs	r0, r3
 80017c2:	f000 fad1 	bl	8001d68 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2221      	movs	r2, #33	@ 0x21
 80017ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80017cc:	e020      	b.n	8001810 <I2C_ITSlaveCplt+0x90>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80017ce:	220f      	movs	r2, #15
 80017d0:	18bb      	adds	r3, r7, r2
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b22      	cmp	r3, #34	@ 0x22
 80017d6:	d003      	beq.n	80017e0 <I2C_ITSlaveCplt+0x60>
 80017d8:	18bb      	adds	r3, r7, r2
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80017de:	d109      	bne.n	80017f4 <I2C_ITSlaveCplt+0x74>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80017e0:	4a79      	ldr	r2, [pc, #484]	@ (80019c8 <I2C_ITSlaveCplt+0x248>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	0011      	movs	r1, r2
 80017e6:	0018      	movs	r0, r3
 80017e8:	f000 fabe 	bl	8001d68 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2222      	movs	r2, #34	@ 0x22
 80017f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80017f2:	e00d      	b.n	8001810 <I2C_ITSlaveCplt+0x90>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80017f4:	230f      	movs	r3, #15
 80017f6:	18fb      	adds	r3, r7, r3
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b28      	cmp	r3, #40	@ 0x28
 80017fc:	d108      	bne.n	8001810 <I2C_ITSlaveCplt+0x90>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80017fe:	4a73      	ldr	r2, [pc, #460]	@ (80019cc <I2C_ITSlaveCplt+0x24c>)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	0011      	movs	r1, r2
 8001804:	0018      	movs	r0, r3
 8001806:	f000 faaf 	bl	8001d68 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2180      	movs	r1, #128	@ 0x80
 800181c:	0209      	lsls	r1, r1, #8
 800181e:	430a      	orrs	r2, r1
 8001820:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4968      	ldr	r1, [pc, #416]	@ (80019d0 <I2C_ITSlaveCplt+0x250>)
 800182e:	400a      	ands	r2, r1
 8001830:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	0018      	movs	r0, r3
 8001836:	f000 fa56 	bl	8001ce6 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	2380      	movs	r3, #128	@ 0x80
 800183e:	01db      	lsls	r3, r3, #7
 8001840:	4013      	ands	r3, r2
 8001842:	d013      	beq.n	800186c <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4961      	ldr	r1, [pc, #388]	@ (80019d4 <I2C_ITSlaveCplt+0x254>)
 8001850:	400a      	ands	r2, r1
 8001852:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001858:	2b00      	cmp	r3, #0
 800185a:	d01f      	beq.n	800189c <I2C_ITSlaveCplt+0x11c>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	b29a      	uxth	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800186a:	e017      	b.n	800189c <I2C_ITSlaveCplt+0x11c>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	2380      	movs	r3, #128	@ 0x80
 8001870:	021b      	lsls	r3, r3, #8
 8001872:	4013      	ands	r3, r2
 8001874:	d012      	beq.n	800189c <I2C_ITSlaveCplt+0x11c>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4955      	ldr	r1, [pc, #340]	@ (80019d8 <I2C_ITSlaveCplt+0x258>)
 8001882:	400a      	ands	r2, r1
 8001884:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800188a:	2b00      	cmp	r3, #0
 800188c:	d006      	beq.n	800189c <I2C_ITSlaveCplt+0x11c>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	b29a      	uxth	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	2204      	movs	r2, #4
 80018a0:	4013      	ands	r3, r2
 80018a2:	d020      	beq.n	80018e6 <I2C_ITSlaveCplt+0x166>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	2204      	movs	r2, #4
 80018a8:	4393      	bics	r3, r2
 80018aa:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018be:	1c5a      	adds	r2, r3, #1
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d00c      	beq.n	80018e6 <I2C_ITSlaveCplt+0x166>
    {
      hi2c->XferSize--;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018d0:	3b01      	subs	r3, #1
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018dc:	b29b      	uxth	r3, r3
 80018de:	3b01      	subs	r3, #1
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d005      	beq.n	80018fc <I2C_ITSlaveCplt+0x17c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018f4:	2204      	movs	r2, #4
 80018f6:	431a      	orrs	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2242      	movs	r2, #66	@ 0x42
 8001900:	2100      	movs	r1, #0
 8001902:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190e:	2b00      	cmp	r3, #0
 8001910:	d013      	beq.n	800193a <I2C_ITSlaveCplt+0x1ba>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	0011      	movs	r1, r2
 800191a:	0018      	movs	r0, r3
 800191c:	f000 f8b8 	bl	8001a90 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2241      	movs	r2, #65	@ 0x41
 8001924:	5c9b      	ldrb	r3, [r3, r2]
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b28      	cmp	r3, #40	@ 0x28
 800192a:	d147      	bne.n	80019bc <I2C_ITSlaveCplt+0x23c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800192c:	697a      	ldr	r2, [r7, #20]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	0011      	movs	r1, r2
 8001932:	0018      	movs	r0, r3
 8001934:	f000 f854 	bl	80019e0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001938:	e040      	b.n	80019bc <I2C_ITSlaveCplt+0x23c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800193e:	4a27      	ldr	r2, [pc, #156]	@ (80019dc <I2C_ITSlaveCplt+0x25c>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d016      	beq.n	8001972 <I2C_ITSlaveCplt+0x1f2>
    I2C_ITSlaveSeqCplt(hi2c);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	0018      	movs	r0, r3
 8001948:	f7ff feb6 	bl	80016b8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a23      	ldr	r2, [pc, #140]	@ (80019dc <I2C_ITSlaveCplt+0x25c>)
 8001950:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2241      	movs	r2, #65	@ 0x41
 8001956:	2120      	movs	r1, #32
 8001958:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2240      	movs	r2, #64	@ 0x40
 8001964:	2100      	movs	r1, #0
 8001966:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	0018      	movs	r0, r3
 800196c:	f7ff fce7 	bl	800133e <HAL_I2C_ListenCpltCallback>
}
 8001970:	e024      	b.n	80019bc <I2C_ITSlaveCplt+0x23c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2241      	movs	r2, #65	@ 0x41
 8001976:	5c9b      	ldrb	r3, [r3, r2]
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b22      	cmp	r3, #34	@ 0x22
 800197c:	d10f      	bne.n	800199e <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2241      	movs	r2, #65	@ 0x41
 8001982:	2120      	movs	r1, #32
 8001984:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2240      	movs	r2, #64	@ 0x40
 8001990:	2100      	movs	r1, #0
 8001992:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	0018      	movs	r0, r3
 8001998:	f7ff fcb9 	bl	800130e <HAL_I2C_SlaveRxCpltCallback>
}
 800199c:	e00e      	b.n	80019bc <I2C_ITSlaveCplt+0x23c>
    hi2c->State = HAL_I2C_STATE_READY;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2241      	movs	r2, #65	@ 0x41
 80019a2:	2120      	movs	r1, #32
 80019a4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2240      	movs	r2, #64	@ 0x40
 80019b0:	2100      	movs	r1, #0
 80019b2:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	0018      	movs	r0, r3
 80019b8:	f7ff fca1 	bl	80012fe <HAL_I2C_SlaveTxCpltCallback>
}
 80019bc:	46c0      	nop			@ (mov r8, r8)
 80019be:	46bd      	mov	sp, r7
 80019c0:	b006      	add	sp, #24
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	00008001 	.word	0x00008001
 80019c8:	00008002 	.word	0x00008002
 80019cc:	00008003 	.word	0x00008003
 80019d0:	fe00e800 	.word	0xfe00e800
 80019d4:	ffffbfff 	.word	0xffffbfff
 80019d8:	ffff7fff 	.word	0xffff7fff
 80019dc:	ffff0000 	.word	0xffff0000

080019e0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a26      	ldr	r2, [pc, #152]	@ (8001a88 <I2C_ITListenCplt+0xa8>)
 80019ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2241      	movs	r2, #65	@ 0x41
 80019fa:	2120      	movs	r1, #32
 80019fc:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2242      	movs	r2, #66	@ 0x42
 8001a02:	2100      	movs	r1, #0
 8001a04:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	2204      	movs	r2, #4
 8001a10:	4013      	ands	r3, r2
 8001a12:	d022      	beq.n	8001a5a <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d012      	beq.n	8001a5a <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	3b01      	subs	r3, #1
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a52:	2204      	movs	r2, #4
 8001a54:	431a      	orrs	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001a5a:	4a0c      	ldr	r2, [pc, #48]	@ (8001a8c <I2C_ITListenCplt+0xac>)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	0011      	movs	r1, r2
 8001a60:	0018      	movs	r0, r3
 8001a62:	f000 f981 	bl	8001d68 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2210      	movs	r2, #16
 8001a6c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2240      	movs	r2, #64	@ 0x40
 8001a72:	2100      	movs	r1, #0
 8001a74:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	0018      	movs	r0, r3
 8001a7a:	f7ff fc60 	bl	800133e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8001a7e:	46c0      	nop			@ (mov r8, r8)
 8001a80:	46bd      	mov	sp, r7
 8001a82:	b002      	add	sp, #8
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	46c0      	nop			@ (mov r8, r8)
 8001a88:	ffff0000 	.word	0xffff0000
 8001a8c:	00008003 	.word	0x00008003

08001a90 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001a9a:	200f      	movs	r0, #15
 8001a9c:	183b      	adds	r3, r7, r0
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	2141      	movs	r1, #65	@ 0x41
 8001aa2:	5c52      	ldrb	r2, [r2, r1]
 8001aa4:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2242      	movs	r2, #66	@ 0x42
 8001aaa:	2100      	movs	r1, #0
 8001aac:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a72      	ldr	r2, [pc, #456]	@ (8001c7c <I2C_ITError+0x1ec>)
 8001ab2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001ac6:	183b      	adds	r3, r7, r0
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b28      	cmp	r3, #40	@ 0x28
 8001acc:	d007      	beq.n	8001ade <I2C_ITError+0x4e>
 8001ace:	183b      	adds	r3, r7, r0
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b29      	cmp	r3, #41	@ 0x29
 8001ad4:	d003      	beq.n	8001ade <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001ad6:	183b      	adds	r3, r7, r0
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b2a      	cmp	r3, #42	@ 0x2a
 8001adc:	d10c      	bne.n	8001af8 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2103      	movs	r1, #3
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	f000 f940 	bl	8001d68 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2241      	movs	r2, #65	@ 0x41
 8001aec:	2128      	movs	r1, #40	@ 0x28
 8001aee:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a63      	ldr	r2, [pc, #396]	@ (8001c80 <I2C_ITError+0x1f0>)
 8001af4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001af6:	e032      	b.n	8001b5e <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001af8:	4a62      	ldr	r2, [pc, #392]	@ (8001c84 <I2C_ITError+0x1f4>)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	0011      	movs	r1, r2
 8001afe:	0018      	movs	r0, r3
 8001b00:	f000 f932 	bl	8001d68 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	0018      	movs	r0, r3
 8001b08:	f000 f8ed 	bl	8001ce6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2241      	movs	r2, #65	@ 0x41
 8001b10:	5c9b      	ldrb	r3, [r3, r2]
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	2b60      	cmp	r3, #96	@ 0x60
 8001b16:	d01f      	beq.n	8001b58 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2241      	movs	r2, #65	@ 0x41
 8001b1c:	2120      	movs	r1, #32
 8001b1e:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	2220      	movs	r2, #32
 8001b28:	4013      	ands	r3, r2
 8001b2a:	2b20      	cmp	r3, #32
 8001b2c:	d114      	bne.n	8001b58 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	2210      	movs	r2, #16
 8001b36:	4013      	ands	r3, r2
 8001b38:	2b10      	cmp	r3, #16
 8001b3a:	d109      	bne.n	8001b50 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2210      	movs	r2, #16
 8001b42:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b48:	2204      	movs	r2, #4
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2220      	movs	r2, #32
 8001b56:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b62:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d03b      	beq.n	8001be4 <I2C_ITError+0x154>
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	2b11      	cmp	r3, #17
 8001b70:	d002      	beq.n	8001b78 <I2C_ITError+0xe8>
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	2b21      	cmp	r3, #33	@ 0x21
 8001b76:	d135      	bne.n	8001be4 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	2380      	movs	r3, #128	@ 0x80
 8001b80:	01db      	lsls	r3, r3, #7
 8001b82:	401a      	ands	r2, r3
 8001b84:	2380      	movs	r3, #128	@ 0x80
 8001b86:	01db      	lsls	r3, r3, #7
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d107      	bne.n	8001b9c <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	493c      	ldr	r1, [pc, #240]	@ (8001c88 <I2C_ITError+0x1f8>)
 8001b98:	400a      	ands	r2, r1
 8001b9a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	f7ff f8dd 	bl	8000d60 <HAL_DMA_GetState>
 8001ba6:	0003      	movs	r3, r0
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d016      	beq.n	8001bda <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bb0:	4a36      	ldr	r2, [pc, #216]	@ (8001c8c <I2C_ITError+0x1fc>)
 8001bb2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2240      	movs	r2, #64	@ 0x40
 8001bb8:	2100      	movs	r1, #0
 8001bba:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f7ff f853 	bl	8000c6c <HAL_DMA_Abort_IT>
 8001bc6:	1e03      	subs	r3, r0, #0
 8001bc8:	d051      	beq.n	8001c6e <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001bd8:	e049      	b.n	8001c6e <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	0018      	movs	r0, r3
 8001bde:	f000 f859 	bl	8001c94 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001be2:	e044      	b.n	8001c6e <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d03b      	beq.n	8001c64 <I2C_ITError+0x1d4>
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	2b12      	cmp	r3, #18
 8001bf0:	d002      	beq.n	8001bf8 <I2C_ITError+0x168>
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	2b22      	cmp	r3, #34	@ 0x22
 8001bf6:	d135      	bne.n	8001c64 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	2380      	movs	r3, #128	@ 0x80
 8001c00:	021b      	lsls	r3, r3, #8
 8001c02:	401a      	ands	r2, r3
 8001c04:	2380      	movs	r3, #128	@ 0x80
 8001c06:	021b      	lsls	r3, r3, #8
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d107      	bne.n	8001c1c <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	491e      	ldr	r1, [pc, #120]	@ (8001c90 <I2C_ITError+0x200>)
 8001c18:	400a      	ands	r2, r1
 8001c1a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c20:	0018      	movs	r0, r3
 8001c22:	f7ff f89d 	bl	8000d60 <HAL_DMA_GetState>
 8001c26:	0003      	movs	r3, r0
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d016      	beq.n	8001c5a <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c30:	4a16      	ldr	r2, [pc, #88]	@ (8001c8c <I2C_ITError+0x1fc>)
 8001c32:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2240      	movs	r2, #64	@ 0x40
 8001c38:	2100      	movs	r1, #0
 8001c3a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c40:	0018      	movs	r0, r3
 8001c42:	f7ff f813 	bl	8000c6c <HAL_DMA_Abort_IT>
 8001c46:	1e03      	subs	r3, r0, #0
 8001c48:	d013      	beq.n	8001c72 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c54:	0018      	movs	r0, r3
 8001c56:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001c58:	e00b      	b.n	8001c72 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	f000 f819 	bl	8001c94 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001c62:	e006      	b.n	8001c72 <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	0018      	movs	r0, r3
 8001c68:	f000 f814 	bl	8001c94 <I2C_TreatErrorCallback>
  }
}
 8001c6c:	e002      	b.n	8001c74 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001c6e:	46c0      	nop			@ (mov r8, r8)
 8001c70:	e000      	b.n	8001c74 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001c72:	46c0      	nop			@ (mov r8, r8)
}
 8001c74:	46c0      	nop			@ (mov r8, r8)
 8001c76:	46bd      	mov	sp, r7
 8001c78:	b004      	add	sp, #16
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	ffff0000 	.word	0xffff0000
 8001c80:	08001371 	.word	0x08001371
 8001c84:	00008003 	.word	0x00008003
 8001c88:	ffffbfff 	.word	0xffffbfff
 8001c8c:	08001d2b 	.word	0x08001d2b
 8001c90:	ffff7fff 	.word	0xffff7fff

08001c94 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2241      	movs	r2, #65	@ 0x41
 8001ca0:	5c9b      	ldrb	r3, [r3, r2]
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b60      	cmp	r3, #96	@ 0x60
 8001ca6:	d10f      	bne.n	8001cc8 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2241      	movs	r2, #65	@ 0x41
 8001cac:	2120      	movs	r1, #32
 8001cae:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2240      	movs	r2, #64	@ 0x40
 8001cba:	2100      	movs	r1, #0
 8001cbc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	f7ff fb4c 	bl	800135e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001cc6:	e00a      	b.n	8001cde <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2240      	movs	r2, #64	@ 0x40
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	0018      	movs	r0, r3
 8001cda:	f7ff fb38 	bl	800134e <HAL_I2C_ErrorCallback>
}
 8001cde:	46c0      	nop			@ (mov r8, r8)
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	b002      	add	sp, #8
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d103      	bne.n	8001d04 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2200      	movs	r2, #0
 8001d02:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d007      	beq.n	8001d22 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	699a      	ldr	r2, [r3, #24]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	619a      	str	r2, [r3, #24]
  }
}
 8001d22:	46c0      	nop			@ (mov r8, r8)
 8001d24:	46bd      	mov	sp, r7
 8001d26:	b002      	add	sp, #8
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b084      	sub	sp, #16
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d36:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d44:	2200      	movs	r2, #0
 8001d46:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d003      	beq.n	8001d58 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d54:	2200      	movs	r2, #0
 8001d56:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	f7ff ff9a 	bl	8001c94 <I2C_TreatErrorCallback>
}
 8001d60:	46c0      	nop			@ (mov r8, r8)
 8001d62:	46bd      	mov	sp, r7
 8001d64:	b004      	add	sp, #16
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	000a      	movs	r2, r1
 8001d72:	1cbb      	adds	r3, r7, #2
 8001d74:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8001d7a:	1cbb      	adds	r3, r7, #2
 8001d7c:	881b      	ldrh	r3, [r3, #0]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	4013      	ands	r3, r2
 8001d82:	d010      	beq.n	8001da6 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2242      	movs	r2, #66	@ 0x42
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2241      	movs	r2, #65	@ 0x41
 8001d90:	5c9b      	ldrb	r3, [r3, r2]
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	001a      	movs	r2, r3
 8001d96:	2328      	movs	r3, #40	@ 0x28
 8001d98:	4013      	ands	r3, r2
 8001d9a:	2b28      	cmp	r3, #40	@ 0x28
 8001d9c:	d003      	beq.n	8001da6 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	22b0      	movs	r2, #176	@ 0xb0
 8001da2:	4313      	orrs	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8001da6:	1cbb      	adds	r3, r7, #2
 8001da8:	881b      	ldrh	r3, [r3, #0]
 8001daa:	2202      	movs	r2, #2
 8001dac:	4013      	ands	r3, r2
 8001dae:	d010      	beq.n	8001dd2 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2244      	movs	r2, #68	@ 0x44
 8001db4:	4313      	orrs	r3, r2
 8001db6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2241      	movs	r2, #65	@ 0x41
 8001dbc:	5c9b      	ldrb	r3, [r3, r2]
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	001a      	movs	r2, r3
 8001dc2:	2328      	movs	r3, #40	@ 0x28
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	2b28      	cmp	r3, #40	@ 0x28
 8001dc8:	d003      	beq.n	8001dd2 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	22b0      	movs	r2, #176	@ 0xb0
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8001dd2:	1cbb      	adds	r3, r7, #2
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	5e9b      	ldrsh	r3, [r3, r2]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	da03      	bge.n	8001de4 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	22b8      	movs	r2, #184	@ 0xb8
 8001de0:	4313      	orrs	r3, r2
 8001de2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8001de4:	1cbb      	adds	r3, r7, #2
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	2b10      	cmp	r3, #16
 8001dea:	d103      	bne.n	8001df4 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2290      	movs	r2, #144	@ 0x90
 8001df0:	4313      	orrs	r3, r2
 8001df2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8001df4:	1cbb      	adds	r3, r7, #2
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	2b20      	cmp	r3, #32
 8001dfa:	d103      	bne.n	8001e04 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2220      	movs	r2, #32
 8001e00:	4313      	orrs	r3, r2
 8001e02:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8001e04:	1cbb      	adds	r3, r7, #2
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	2b40      	cmp	r3, #64	@ 0x40
 8001e0a:	d103      	bne.n	8001e14 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2240      	movs	r2, #64	@ 0x40
 8001e10:	4313      	orrs	r3, r2
 8001e12:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	43d9      	mvns	r1, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	400a      	ands	r2, r1
 8001e24:	601a      	str	r2, [r3, #0]
}
 8001e26:	46c0      	nop			@ (mov r8, r8)
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	b004      	add	sp, #16
 8001e2c:	bd80      	pop	{r7, pc}
	...

08001e30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2241      	movs	r2, #65	@ 0x41
 8001e3e:	5c9b      	ldrb	r3, [r3, r2]
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b20      	cmp	r3, #32
 8001e44:	d138      	bne.n	8001eb8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2240      	movs	r2, #64	@ 0x40
 8001e4a:	5c9b      	ldrb	r3, [r3, r2]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d101      	bne.n	8001e54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e50:	2302      	movs	r3, #2
 8001e52:	e032      	b.n	8001eba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2240      	movs	r2, #64	@ 0x40
 8001e58:	2101      	movs	r1, #1
 8001e5a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2241      	movs	r2, #65	@ 0x41
 8001e60:	2124      	movs	r1, #36	@ 0x24
 8001e62:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2101      	movs	r1, #1
 8001e70:	438a      	bics	r2, r1
 8001e72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4911      	ldr	r1, [pc, #68]	@ (8001ec4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001e80:	400a      	ands	r2, r1
 8001e82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6819      	ldr	r1, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2241      	movs	r2, #65	@ 0x41
 8001ea8:	2120      	movs	r1, #32
 8001eaa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2240      	movs	r2, #64	@ 0x40
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	e000      	b.n	8001eba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001eb8:	2302      	movs	r3, #2
  }
}
 8001eba:	0018      	movs	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	b002      	add	sp, #8
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	46c0      	nop			@ (mov r8, r8)
 8001ec4:	ffffefff 	.word	0xffffefff

08001ec8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2241      	movs	r2, #65	@ 0x41
 8001ed6:	5c9b      	ldrb	r3, [r3, r2]
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b20      	cmp	r3, #32
 8001edc:	d139      	bne.n	8001f52 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2240      	movs	r2, #64	@ 0x40
 8001ee2:	5c9b      	ldrb	r3, [r3, r2]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d101      	bne.n	8001eec <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ee8:	2302      	movs	r3, #2
 8001eea:	e033      	b.n	8001f54 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2240      	movs	r2, #64	@ 0x40
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2241      	movs	r2, #65	@ 0x41
 8001ef8:	2124      	movs	r1, #36	@ 0x24
 8001efa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2101      	movs	r1, #1
 8001f08:	438a      	bics	r2, r1
 8001f0a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4a11      	ldr	r2, [pc, #68]	@ (8001f5c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001f18:	4013      	ands	r3, r2
 8001f1a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	021b      	lsls	r3, r3, #8
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2101      	movs	r1, #1
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2241      	movs	r2, #65	@ 0x41
 8001f42:	2120      	movs	r1, #32
 8001f44:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2240      	movs	r2, #64	@ 0x40
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	e000      	b.n	8001f54 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f52:	2302      	movs	r3, #2
  }
}
 8001f54:	0018      	movs	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	b004      	add	sp, #16
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	fffff0ff 	.word	0xfffff0ff

08001f60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e1d0      	b.n	8002314 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2201      	movs	r2, #1
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d100      	bne.n	8001f7e <HAL_RCC_OscConfig+0x1e>
 8001f7c:	e069      	b.n	8002052 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f7e:	4bc8      	ldr	r3, [pc, #800]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	2238      	movs	r2, #56	@ 0x38
 8001f84:	4013      	ands	r3, r2
 8001f86:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	2b08      	cmp	r3, #8
 8001f8c:	d105      	bne.n	8001f9a <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d15d      	bne.n	8002052 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e1bc      	b.n	8002314 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	2380      	movs	r3, #128	@ 0x80
 8001fa0:	025b      	lsls	r3, r3, #9
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d107      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x56>
 8001fa6:	4bbe      	ldr	r3, [pc, #760]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	4bbd      	ldr	r3, [pc, #756]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 8001fac:	2180      	movs	r1, #128	@ 0x80
 8001fae:	0249      	lsls	r1, r1, #9
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	e020      	b.n	8001ff8 <HAL_RCC_OscConfig+0x98>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	23a0      	movs	r3, #160	@ 0xa0
 8001fbc:	02db      	lsls	r3, r3, #11
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d10e      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x80>
 8001fc2:	4bb7      	ldr	r3, [pc, #732]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	4bb6      	ldr	r3, [pc, #728]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 8001fc8:	2180      	movs	r1, #128	@ 0x80
 8001fca:	02c9      	lsls	r1, r1, #11
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	4bb3      	ldr	r3, [pc, #716]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	4bb2      	ldr	r3, [pc, #712]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 8001fd6:	2180      	movs	r1, #128	@ 0x80
 8001fd8:	0249      	lsls	r1, r1, #9
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	e00b      	b.n	8001ff8 <HAL_RCC_OscConfig+0x98>
 8001fe0:	4baf      	ldr	r3, [pc, #700]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	4bae      	ldr	r3, [pc, #696]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 8001fe6:	49af      	ldr	r1, [pc, #700]	@ (80022a4 <HAL_RCC_OscConfig+0x344>)
 8001fe8:	400a      	ands	r2, r1
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	4bac      	ldr	r3, [pc, #688]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4bab      	ldr	r3, [pc, #684]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 8001ff2:	49ad      	ldr	r1, [pc, #692]	@ (80022a8 <HAL_RCC_OscConfig+0x348>)
 8001ff4:	400a      	ands	r2, r1
 8001ff6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d014      	beq.n	800202a <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002000:	f7fe fcc6 	bl	8000990 <HAL_GetTick>
 8002004:	0003      	movs	r3, r0
 8002006:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002008:	e008      	b.n	800201c <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800200a:	f7fe fcc1 	bl	8000990 <HAL_GetTick>
 800200e:	0002      	movs	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b64      	cmp	r3, #100	@ 0x64
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e17b      	b.n	8002314 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800201c:	4ba0      	ldr	r3, [pc, #640]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	2380      	movs	r3, #128	@ 0x80
 8002022:	029b      	lsls	r3, r3, #10
 8002024:	4013      	ands	r3, r2
 8002026:	d0f0      	beq.n	800200a <HAL_RCC_OscConfig+0xaa>
 8002028:	e013      	b.n	8002052 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202a:	f7fe fcb1 	bl	8000990 <HAL_GetTick>
 800202e:	0003      	movs	r3, r0
 8002030:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002034:	f7fe fcac 	bl	8000990 <HAL_GetTick>
 8002038:	0002      	movs	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b64      	cmp	r3, #100	@ 0x64
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e166      	b.n	8002314 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002046:	4b96      	ldr	r3, [pc, #600]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	2380      	movs	r3, #128	@ 0x80
 800204c:	029b      	lsls	r3, r3, #10
 800204e:	4013      	ands	r3, r2
 8002050:	d1f0      	bne.n	8002034 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2202      	movs	r2, #2
 8002058:	4013      	ands	r3, r2
 800205a:	d100      	bne.n	800205e <HAL_RCC_OscConfig+0xfe>
 800205c:	e086      	b.n	800216c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800205e:	4b90      	ldr	r3, [pc, #576]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	2238      	movs	r2, #56	@ 0x38
 8002064:	4013      	ands	r3, r2
 8002066:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d12f      	bne.n	80020ce <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e14c      	b.n	8002314 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800207a:	4b89      	ldr	r3, [pc, #548]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	4a8b      	ldr	r2, [pc, #556]	@ (80022ac <HAL_RCC_OscConfig+0x34c>)
 8002080:	4013      	ands	r3, r2
 8002082:	0019      	movs	r1, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	021a      	lsls	r2, r3, #8
 800208a:	4b85      	ldr	r3, [pc, #532]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 800208c:	430a      	orrs	r2, r1
 800208e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d112      	bne.n	80020bc <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002096:	4b82      	ldr	r3, [pc, #520]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a85      	ldr	r2, [pc, #532]	@ (80022b0 <HAL_RCC_OscConfig+0x350>)
 800209c:	4013      	ands	r3, r2
 800209e:	0019      	movs	r1, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691a      	ldr	r2, [r3, #16]
 80020a4:	4b7e      	ldr	r3, [pc, #504]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 80020a6:	430a      	orrs	r2, r1
 80020a8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80020aa:	4b7d      	ldr	r3, [pc, #500]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	0adb      	lsrs	r3, r3, #11
 80020b0:	2207      	movs	r2, #7
 80020b2:	4013      	ands	r3, r2
 80020b4:	4a7f      	ldr	r2, [pc, #508]	@ (80022b4 <HAL_RCC_OscConfig+0x354>)
 80020b6:	40da      	lsrs	r2, r3
 80020b8:	4b7f      	ldr	r3, [pc, #508]	@ (80022b8 <HAL_RCC_OscConfig+0x358>)
 80020ba:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80020bc:	4b7f      	ldr	r3, [pc, #508]	@ (80022bc <HAL_RCC_OscConfig+0x35c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	0018      	movs	r0, r3
 80020c2:	f7fe fc09 	bl	80008d8 <HAL_InitTick>
 80020c6:	1e03      	subs	r3, r0, #0
 80020c8:	d050      	beq.n	800216c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e122      	b.n	8002314 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d030      	beq.n	8002138 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80020d6:	4b72      	ldr	r3, [pc, #456]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a75      	ldr	r2, [pc, #468]	@ (80022b0 <HAL_RCC_OscConfig+0x350>)
 80020dc:	4013      	ands	r3, r2
 80020de:	0019      	movs	r1, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	691a      	ldr	r2, [r3, #16]
 80020e4:	4b6e      	ldr	r3, [pc, #440]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 80020e6:	430a      	orrs	r2, r1
 80020e8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 80020ea:	4b6d      	ldr	r3, [pc, #436]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	4b6c      	ldr	r3, [pc, #432]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 80020f0:	2180      	movs	r1, #128	@ 0x80
 80020f2:	0049      	lsls	r1, r1, #1
 80020f4:	430a      	orrs	r2, r1
 80020f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f8:	f7fe fc4a 	bl	8000990 <HAL_GetTick>
 80020fc:	0003      	movs	r3, r0
 80020fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002102:	f7fe fc45 	bl	8000990 <HAL_GetTick>
 8002106:	0002      	movs	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e0ff      	b.n	8002314 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002114:	4b62      	ldr	r3, [pc, #392]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	2380      	movs	r3, #128	@ 0x80
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4013      	ands	r3, r2
 800211e:	d0f0      	beq.n	8002102 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002120:	4b5f      	ldr	r3, [pc, #380]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	4a61      	ldr	r2, [pc, #388]	@ (80022ac <HAL_RCC_OscConfig+0x34c>)
 8002126:	4013      	ands	r3, r2
 8002128:	0019      	movs	r1, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	021a      	lsls	r2, r3, #8
 8002130:	4b5b      	ldr	r3, [pc, #364]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 8002132:	430a      	orrs	r2, r1
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	e019      	b.n	800216c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8002138:	4b59      	ldr	r3, [pc, #356]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	4b58      	ldr	r3, [pc, #352]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 800213e:	4960      	ldr	r1, [pc, #384]	@ (80022c0 <HAL_RCC_OscConfig+0x360>)
 8002140:	400a      	ands	r2, r1
 8002142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002144:	f7fe fc24 	bl	8000990 <HAL_GetTick>
 8002148:	0003      	movs	r3, r0
 800214a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800214e:	f7fe fc1f 	bl	8000990 <HAL_GetTick>
 8002152:	0002      	movs	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e0d9      	b.n	8002314 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002160:	4b4f      	ldr	r3, [pc, #316]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	2380      	movs	r3, #128	@ 0x80
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	4013      	ands	r3, r2
 800216a:	d1f0      	bne.n	800214e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2208      	movs	r2, #8
 8002172:	4013      	ands	r3, r2
 8002174:	d042      	beq.n	80021fc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002176:	4b4a      	ldr	r3, [pc, #296]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2238      	movs	r2, #56	@ 0x38
 800217c:	4013      	ands	r3, r2
 800217e:	2b18      	cmp	r3, #24
 8002180:	d105      	bne.n	800218e <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d138      	bne.n	80021fc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e0c2      	b.n	8002314 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d019      	beq.n	80021ca <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002196:	4b42      	ldr	r3, [pc, #264]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 8002198:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800219a:	4b41      	ldr	r3, [pc, #260]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 800219c:	2101      	movs	r1, #1
 800219e:	430a      	orrs	r2, r1
 80021a0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a2:	f7fe fbf5 	bl	8000990 <HAL_GetTick>
 80021a6:	0003      	movs	r3, r0
 80021a8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80021ac:	f7fe fbf0 	bl	8000990 <HAL_GetTick>
 80021b0:	0002      	movs	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e0aa      	b.n	8002314 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80021be:	4b38      	ldr	r3, [pc, #224]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 80021c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021c2:	2202      	movs	r2, #2
 80021c4:	4013      	ands	r3, r2
 80021c6:	d0f1      	beq.n	80021ac <HAL_RCC_OscConfig+0x24c>
 80021c8:	e018      	b.n	80021fc <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80021ca:	4b35      	ldr	r3, [pc, #212]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 80021cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80021ce:	4b34      	ldr	r3, [pc, #208]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 80021d0:	2101      	movs	r1, #1
 80021d2:	438a      	bics	r2, r1
 80021d4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d6:	f7fe fbdb 	bl	8000990 <HAL_GetTick>
 80021da:	0003      	movs	r3, r0
 80021dc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80021e0:	f7fe fbd6 	bl	8000990 <HAL_GetTick>
 80021e4:	0002      	movs	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e090      	b.n	8002314 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80021f2:	4b2b      	ldr	r3, [pc, #172]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 80021f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021f6:	2202      	movs	r2, #2
 80021f8:	4013      	ands	r3, r2
 80021fa:	d1f1      	bne.n	80021e0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2204      	movs	r2, #4
 8002202:	4013      	ands	r3, r2
 8002204:	d100      	bne.n	8002208 <HAL_RCC_OscConfig+0x2a8>
 8002206:	e084      	b.n	8002312 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002208:	230f      	movs	r3, #15
 800220a:	18fb      	adds	r3, r7, r3
 800220c:	2200      	movs	r2, #0
 800220e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002210:	4b23      	ldr	r3, [pc, #140]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	2238      	movs	r2, #56	@ 0x38
 8002216:	4013      	ands	r3, r2
 8002218:	2b20      	cmp	r3, #32
 800221a:	d106      	bne.n	800222a <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d000      	beq.n	8002226 <HAL_RCC_OscConfig+0x2c6>
 8002224:	e075      	b.n	8002312 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e074      	b.n	8002314 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d106      	bne.n	8002240 <HAL_RCC_OscConfig+0x2e0>
 8002232:	4b1b      	ldr	r3, [pc, #108]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 8002234:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002236:	4b1a      	ldr	r3, [pc, #104]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 8002238:	2101      	movs	r1, #1
 800223a:	430a      	orrs	r2, r1
 800223c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800223e:	e01c      	b.n	800227a <HAL_RCC_OscConfig+0x31a>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	2b05      	cmp	r3, #5
 8002246:	d10c      	bne.n	8002262 <HAL_RCC_OscConfig+0x302>
 8002248:	4b15      	ldr	r3, [pc, #84]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 800224a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800224c:	4b14      	ldr	r3, [pc, #80]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 800224e:	2104      	movs	r1, #4
 8002250:	430a      	orrs	r2, r1
 8002252:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002254:	4b12      	ldr	r3, [pc, #72]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 8002256:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002258:	4b11      	ldr	r3, [pc, #68]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 800225a:	2101      	movs	r1, #1
 800225c:	430a      	orrs	r2, r1
 800225e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002260:	e00b      	b.n	800227a <HAL_RCC_OscConfig+0x31a>
 8002262:	4b0f      	ldr	r3, [pc, #60]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 8002264:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002266:	4b0e      	ldr	r3, [pc, #56]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 8002268:	2101      	movs	r1, #1
 800226a:	438a      	bics	r2, r1
 800226c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800226e:	4b0c      	ldr	r3, [pc, #48]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 8002270:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002272:	4b0b      	ldr	r3, [pc, #44]	@ (80022a0 <HAL_RCC_OscConfig+0x340>)
 8002274:	2104      	movs	r1, #4
 8002276:	438a      	bics	r2, r1
 8002278:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d028      	beq.n	80022d4 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002282:	f7fe fb85 	bl	8000990 <HAL_GetTick>
 8002286:	0003      	movs	r3, r0
 8002288:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800228a:	e01d      	b.n	80022c8 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800228c:	f7fe fb80 	bl	8000990 <HAL_GetTick>
 8002290:	0002      	movs	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	4a0b      	ldr	r2, [pc, #44]	@ (80022c4 <HAL_RCC_OscConfig+0x364>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d915      	bls.n	80022c8 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e039      	b.n	8002314 <HAL_RCC_OscConfig+0x3b4>
 80022a0:	40021000 	.word	0x40021000
 80022a4:	fffeffff 	.word	0xfffeffff
 80022a8:	fffbffff 	.word	0xfffbffff
 80022ac:	ffff80ff 	.word	0xffff80ff
 80022b0:	ffffc7ff 	.word	0xffffc7ff
 80022b4:	02dc6c00 	.word	0x02dc6c00
 80022b8:	20000000 	.word	0x20000000
 80022bc:	20000004 	.word	0x20000004
 80022c0:	fffffeff 	.word	0xfffffeff
 80022c4:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80022c8:	4b14      	ldr	r3, [pc, #80]	@ (800231c <HAL_RCC_OscConfig+0x3bc>)
 80022ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022cc:	2202      	movs	r2, #2
 80022ce:	4013      	ands	r3, r2
 80022d0:	d0dc      	beq.n	800228c <HAL_RCC_OscConfig+0x32c>
 80022d2:	e013      	b.n	80022fc <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d4:	f7fe fb5c 	bl	8000990 <HAL_GetTick>
 80022d8:	0003      	movs	r3, r0
 80022da:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80022dc:	e009      	b.n	80022f2 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022de:	f7fe fb57 	bl	8000990 <HAL_GetTick>
 80022e2:	0002      	movs	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002320 <HAL_RCC_OscConfig+0x3c0>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e010      	b.n	8002314 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80022f2:	4b0a      	ldr	r3, [pc, #40]	@ (800231c <HAL_RCC_OscConfig+0x3bc>)
 80022f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022f6:	2202      	movs	r2, #2
 80022f8:	4013      	ands	r3, r2
 80022fa:	d1f0      	bne.n	80022de <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80022fc:	230f      	movs	r3, #15
 80022fe:	18fb      	adds	r3, r7, r3
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d105      	bne.n	8002312 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002306:	4b05      	ldr	r3, [pc, #20]	@ (800231c <HAL_RCC_OscConfig+0x3bc>)
 8002308:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800230a:	4b04      	ldr	r3, [pc, #16]	@ (800231c <HAL_RCC_OscConfig+0x3bc>)
 800230c:	4905      	ldr	r1, [pc, #20]	@ (8002324 <HAL_RCC_OscConfig+0x3c4>)
 800230e:	400a      	ands	r2, r1
 8002310:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	0018      	movs	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	b006      	add	sp, #24
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40021000 	.word	0x40021000
 8002320:	00001388 	.word	0x00001388
 8002324:	efffffff 	.word	0xefffffff

08002328 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e0e9      	b.n	8002510 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800233c:	4b76      	ldr	r3, [pc, #472]	@ (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2207      	movs	r2, #7
 8002342:	4013      	ands	r3, r2
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d91e      	bls.n	8002388 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234a:	4b73      	ldr	r3, [pc, #460]	@ (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2207      	movs	r2, #7
 8002350:	4393      	bics	r3, r2
 8002352:	0019      	movs	r1, r3
 8002354:	4b70      	ldr	r3, [pc, #448]	@ (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	430a      	orrs	r2, r1
 800235a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800235c:	f7fe fb18 	bl	8000990 <HAL_GetTick>
 8002360:	0003      	movs	r3, r0
 8002362:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002364:	e009      	b.n	800237a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002366:	f7fe fb13 	bl	8000990 <HAL_GetTick>
 800236a:	0002      	movs	r2, r0
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	4a6a      	ldr	r2, [pc, #424]	@ (800251c <HAL_RCC_ClockConfig+0x1f4>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d901      	bls.n	800237a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e0ca      	b.n	8002510 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800237a:	4b67      	ldr	r3, [pc, #412]	@ (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2207      	movs	r2, #7
 8002380:	4013      	ands	r3, r2
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	429a      	cmp	r2, r3
 8002386:	d1ee      	bne.n	8002366 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2202      	movs	r2, #2
 800238e:	4013      	ands	r3, r2
 8002390:	d017      	beq.n	80023c2 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2204      	movs	r2, #4
 8002398:	4013      	ands	r3, r2
 800239a:	d008      	beq.n	80023ae <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800239c:	4b60      	ldr	r3, [pc, #384]	@ (8002520 <HAL_RCC_ClockConfig+0x1f8>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	4a60      	ldr	r2, [pc, #384]	@ (8002524 <HAL_RCC_ClockConfig+0x1fc>)
 80023a2:	401a      	ands	r2, r3
 80023a4:	4b5e      	ldr	r3, [pc, #376]	@ (8002520 <HAL_RCC_ClockConfig+0x1f8>)
 80023a6:	21b0      	movs	r1, #176	@ 0xb0
 80023a8:	0109      	lsls	r1, r1, #4
 80023aa:	430a      	orrs	r2, r1
 80023ac:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023ae:	4b5c      	ldr	r3, [pc, #368]	@ (8002520 <HAL_RCC_ClockConfig+0x1f8>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	4a5d      	ldr	r2, [pc, #372]	@ (8002528 <HAL_RCC_ClockConfig+0x200>)
 80023b4:	4013      	ands	r3, r2
 80023b6:	0019      	movs	r1, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68da      	ldr	r2, [r3, #12]
 80023bc:	4b58      	ldr	r3, [pc, #352]	@ (8002520 <HAL_RCC_ClockConfig+0x1f8>)
 80023be:	430a      	orrs	r2, r1
 80023c0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2201      	movs	r2, #1
 80023c8:	4013      	ands	r3, r2
 80023ca:	d055      	beq.n	8002478 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80023cc:	4b54      	ldr	r3, [pc, #336]	@ (8002520 <HAL_RCC_ClockConfig+0x1f8>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	221c      	movs	r2, #28
 80023d2:	4393      	bics	r3, r2
 80023d4:	0019      	movs	r1, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	4b51      	ldr	r3, [pc, #324]	@ (8002520 <HAL_RCC_ClockConfig+0x1f8>)
 80023dc:	430a      	orrs	r2, r1
 80023de:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d107      	bne.n	80023f8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023e8:	4b4d      	ldr	r3, [pc, #308]	@ (8002520 <HAL_RCC_ClockConfig+0x1f8>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	2380      	movs	r3, #128	@ 0x80
 80023ee:	029b      	lsls	r3, r3, #10
 80023f0:	4013      	ands	r3, r2
 80023f2:	d11f      	bne.n	8002434 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e08b      	b.n	8002510 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d107      	bne.n	8002410 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002400:	4b47      	ldr	r3, [pc, #284]	@ (8002520 <HAL_RCC_ClockConfig+0x1f8>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	2380      	movs	r3, #128	@ 0x80
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	4013      	ands	r3, r2
 800240a:	d113      	bne.n	8002434 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e07f      	b.n	8002510 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b03      	cmp	r3, #3
 8002416:	d106      	bne.n	8002426 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002418:	4b41      	ldr	r3, [pc, #260]	@ (8002520 <HAL_RCC_ClockConfig+0x1f8>)
 800241a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800241c:	2202      	movs	r2, #2
 800241e:	4013      	ands	r3, r2
 8002420:	d108      	bne.n	8002434 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e074      	b.n	8002510 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002426:	4b3e      	ldr	r3, [pc, #248]	@ (8002520 <HAL_RCC_ClockConfig+0x1f8>)
 8002428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800242a:	2202      	movs	r2, #2
 800242c:	4013      	ands	r3, r2
 800242e:	d101      	bne.n	8002434 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e06d      	b.n	8002510 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002434:	4b3a      	ldr	r3, [pc, #232]	@ (8002520 <HAL_RCC_ClockConfig+0x1f8>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	2207      	movs	r2, #7
 800243a:	4393      	bics	r3, r2
 800243c:	0019      	movs	r1, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	4b37      	ldr	r3, [pc, #220]	@ (8002520 <HAL_RCC_ClockConfig+0x1f8>)
 8002444:	430a      	orrs	r2, r1
 8002446:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002448:	f7fe faa2 	bl	8000990 <HAL_GetTick>
 800244c:	0003      	movs	r3, r0
 800244e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002450:	e009      	b.n	8002466 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002452:	f7fe fa9d 	bl	8000990 <HAL_GetTick>
 8002456:	0002      	movs	r2, r0
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	4a2f      	ldr	r2, [pc, #188]	@ (800251c <HAL_RCC_ClockConfig+0x1f4>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e054      	b.n	8002510 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002466:	4b2e      	ldr	r3, [pc, #184]	@ (8002520 <HAL_RCC_ClockConfig+0x1f8>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	2238      	movs	r2, #56	@ 0x38
 800246c:	401a      	ands	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	429a      	cmp	r2, r3
 8002476:	d1ec      	bne.n	8002452 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002478:	4b27      	ldr	r3, [pc, #156]	@ (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2207      	movs	r2, #7
 800247e:	4013      	ands	r3, r2
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	429a      	cmp	r2, r3
 8002484:	d21e      	bcs.n	80024c4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002486:	4b24      	ldr	r3, [pc, #144]	@ (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2207      	movs	r2, #7
 800248c:	4393      	bics	r3, r2
 800248e:	0019      	movs	r1, r3
 8002490:	4b21      	ldr	r3, [pc, #132]	@ (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002498:	f7fe fa7a 	bl	8000990 <HAL_GetTick>
 800249c:	0003      	movs	r3, r0
 800249e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024a0:	e009      	b.n	80024b6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80024a2:	f7fe fa75 	bl	8000990 <HAL_GetTick>
 80024a6:	0002      	movs	r2, r0
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	4a1b      	ldr	r2, [pc, #108]	@ (800251c <HAL_RCC_ClockConfig+0x1f4>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e02c      	b.n	8002510 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024b6:	4b18      	ldr	r3, [pc, #96]	@ (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2207      	movs	r2, #7
 80024bc:	4013      	ands	r3, r2
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d1ee      	bne.n	80024a2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2204      	movs	r2, #4
 80024ca:	4013      	ands	r3, r2
 80024cc:	d009      	beq.n	80024e2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80024ce:	4b14      	ldr	r3, [pc, #80]	@ (8002520 <HAL_RCC_ClockConfig+0x1f8>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	4a16      	ldr	r2, [pc, #88]	@ (800252c <HAL_RCC_ClockConfig+0x204>)
 80024d4:	4013      	ands	r3, r2
 80024d6:	0019      	movs	r1, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691a      	ldr	r2, [r3, #16]
 80024dc:	4b10      	ldr	r3, [pc, #64]	@ (8002520 <HAL_RCC_ClockConfig+0x1f8>)
 80024de:	430a      	orrs	r2, r1
 80024e0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80024e2:	f000 f82b 	bl	800253c <HAL_RCC_GetSysClockFreq>
 80024e6:	0001      	movs	r1, r0
 80024e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002520 <HAL_RCC_ClockConfig+0x1f8>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	0a1b      	lsrs	r3, r3, #8
 80024ee:	220f      	movs	r2, #15
 80024f0:	401a      	ands	r2, r3
 80024f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002530 <HAL_RCC_ClockConfig+0x208>)
 80024f4:	0092      	lsls	r2, r2, #2
 80024f6:	58d3      	ldr	r3, [r2, r3]
 80024f8:	221f      	movs	r2, #31
 80024fa:	4013      	ands	r3, r2
 80024fc:	000a      	movs	r2, r1
 80024fe:	40da      	lsrs	r2, r3
 8002500:	4b0c      	ldr	r3, [pc, #48]	@ (8002534 <HAL_RCC_ClockConfig+0x20c>)
 8002502:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002504:	4b0c      	ldr	r3, [pc, #48]	@ (8002538 <HAL_RCC_ClockConfig+0x210>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	0018      	movs	r0, r3
 800250a:	f7fe f9e5 	bl	80008d8 <HAL_InitTick>
 800250e:	0003      	movs	r3, r0
}
 8002510:	0018      	movs	r0, r3
 8002512:	46bd      	mov	sp, r7
 8002514:	b004      	add	sp, #16
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40022000 	.word	0x40022000
 800251c:	00001388 	.word	0x00001388
 8002520:	40021000 	.word	0x40021000
 8002524:	ffff84ff 	.word	0xffff84ff
 8002528:	fffff0ff 	.word	0xfffff0ff
 800252c:	ffff8fff 	.word	0xffff8fff
 8002530:	08004254 	.word	0x08004254
 8002534:	20000000 	.word	0x20000000
 8002538:	20000004 	.word	0x20000004

0800253c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002542:	4b1c      	ldr	r3, [pc, #112]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x78>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2238      	movs	r2, #56	@ 0x38
 8002548:	4013      	ands	r3, r2
 800254a:	d10f      	bne.n	800256c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800254c:	4b19      	ldr	r3, [pc, #100]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x78>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	0adb      	lsrs	r3, r3, #11
 8002552:	2207      	movs	r2, #7
 8002554:	4013      	ands	r3, r2
 8002556:	2201      	movs	r2, #1
 8002558:	409a      	lsls	r2, r3
 800255a:	0013      	movs	r3, r2
 800255c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800255e:	6839      	ldr	r1, [r7, #0]
 8002560:	4815      	ldr	r0, [pc, #84]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0x7c>)
 8002562:	f7fd fdd1 	bl	8000108 <__udivsi3>
 8002566:	0003      	movs	r3, r0
 8002568:	607b      	str	r3, [r7, #4]
 800256a:	e01e      	b.n	80025aa <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800256c:	4b11      	ldr	r3, [pc, #68]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x78>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	2238      	movs	r2, #56	@ 0x38
 8002572:	4013      	ands	r3, r2
 8002574:	2b08      	cmp	r3, #8
 8002576:	d102      	bne.n	800257e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002578:	4b0f      	ldr	r3, [pc, #60]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0x7c>)
 800257a:	607b      	str	r3, [r7, #4]
 800257c:	e015      	b.n	80025aa <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800257e:	4b0d      	ldr	r3, [pc, #52]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x78>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2238      	movs	r2, #56	@ 0x38
 8002584:	4013      	ands	r3, r2
 8002586:	2b20      	cmp	r3, #32
 8002588:	d103      	bne.n	8002592 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800258a:	2380      	movs	r3, #128	@ 0x80
 800258c:	021b      	lsls	r3, r3, #8
 800258e:	607b      	str	r3, [r7, #4]
 8002590:	e00b      	b.n	80025aa <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002592:	4b08      	ldr	r3, [pc, #32]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x78>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	2238      	movs	r2, #56	@ 0x38
 8002598:	4013      	ands	r3, r2
 800259a:	2b18      	cmp	r3, #24
 800259c:	d103      	bne.n	80025a6 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800259e:	23fa      	movs	r3, #250	@ 0xfa
 80025a0:	01db      	lsls	r3, r3, #7
 80025a2:	607b      	str	r3, [r7, #4]
 80025a4:	e001      	b.n	80025aa <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 80025aa:	687b      	ldr	r3, [r7, #4]
}
 80025ac:	0018      	movs	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	b002      	add	sp, #8
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40021000 	.word	0x40021000
 80025b8:	02dc6c00 	.word	0x02dc6c00

080025bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025c0:	4b02      	ldr	r3, [pc, #8]	@ (80025cc <HAL_RCC_GetHCLKFreq+0x10>)
 80025c2:	681b      	ldr	r3, [r3, #0]
}
 80025c4:	0018      	movs	r0, r3
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	46c0      	nop			@ (mov r8, r8)
 80025cc:	20000000 	.word	0x20000000

080025d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 80025d4:	f7ff fff2 	bl	80025bc <HAL_RCC_GetHCLKFreq>
 80025d8:	0001      	movs	r1, r0
 80025da:	4b07      	ldr	r3, [pc, #28]	@ (80025f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	0b1b      	lsrs	r3, r3, #12
 80025e0:	2207      	movs	r2, #7
 80025e2:	401a      	ands	r2, r3
 80025e4:	4b05      	ldr	r3, [pc, #20]	@ (80025fc <HAL_RCC_GetPCLK1Freq+0x2c>)
 80025e6:	0092      	lsls	r2, r2, #2
 80025e8:	58d3      	ldr	r3, [r2, r3]
 80025ea:	221f      	movs	r2, #31
 80025ec:	4013      	ands	r3, r2
 80025ee:	40d9      	lsrs	r1, r3
 80025f0:	000b      	movs	r3, r1
}
 80025f2:	0018      	movs	r0, r3
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40021000 	.word	0x40021000
 80025fc:	08004294 	.word	0x08004294

08002600 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002608:	2313      	movs	r3, #19
 800260a:	18fb      	adds	r3, r7, r3
 800260c:	2200      	movs	r2, #0
 800260e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002610:	2312      	movs	r3, #18
 8002612:	18fb      	adds	r3, r7, r3
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	2380      	movs	r3, #128	@ 0x80
 800261e:	029b      	lsls	r3, r3, #10
 8002620:	4013      	ands	r3, r2
 8002622:	d100      	bne.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002624:	e079      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002626:	2011      	movs	r0, #17
 8002628:	183b      	adds	r3, r7, r0
 800262a:	2200      	movs	r2, #0
 800262c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800262e:	4b64      	ldr	r3, [pc, #400]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002630:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002632:	2380      	movs	r3, #128	@ 0x80
 8002634:	055b      	lsls	r3, r3, #21
 8002636:	4013      	ands	r3, r2
 8002638:	d110      	bne.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800263a:	4b61      	ldr	r3, [pc, #388]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800263c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800263e:	4b60      	ldr	r3, [pc, #384]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002640:	2180      	movs	r1, #128	@ 0x80
 8002642:	0549      	lsls	r1, r1, #21
 8002644:	430a      	orrs	r2, r1
 8002646:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002648:	4b5d      	ldr	r3, [pc, #372]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800264a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800264c:	2380      	movs	r3, #128	@ 0x80
 800264e:	055b      	lsls	r3, r3, #21
 8002650:	4013      	ands	r3, r2
 8002652:	60bb      	str	r3, [r7, #8]
 8002654:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002656:	183b      	adds	r3, r7, r0
 8002658:	2201      	movs	r2, #1
 800265a:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 800265c:	4b58      	ldr	r3, [pc, #352]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800265e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002660:	23c0      	movs	r3, #192	@ 0xc0
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4013      	ands	r3, r2
 8002666:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d019      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	429a      	cmp	r2, r3
 8002676:	d014      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8002678:	4b51      	ldr	r3, [pc, #324]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800267a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800267c:	4a51      	ldr	r2, [pc, #324]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800267e:	4013      	ands	r3, r2
 8002680:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002682:	4b4f      	ldr	r3, [pc, #316]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002684:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002686:	4b4e      	ldr	r3, [pc, #312]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002688:	2180      	movs	r1, #128	@ 0x80
 800268a:	0249      	lsls	r1, r1, #9
 800268c:	430a      	orrs	r2, r1
 800268e:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002690:	4b4b      	ldr	r3, [pc, #300]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002692:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002694:	4b4a      	ldr	r3, [pc, #296]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002696:	494c      	ldr	r1, [pc, #304]	@ (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002698:	400a      	ands	r2, r1
 800269a:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 800269c:	4b48      	ldr	r3, [pc, #288]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	2201      	movs	r2, #1
 80026a6:	4013      	ands	r3, r2
 80026a8:	d016      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026aa:	f7fe f971 	bl	8000990 <HAL_GetTick>
 80026ae:	0003      	movs	r3, r0
 80026b0:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80026b2:	e00c      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b4:	f7fe f96c 	bl	8000990 <HAL_GetTick>
 80026b8:	0002      	movs	r2, r0
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	4a43      	ldr	r2, [pc, #268]	@ (80027cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d904      	bls.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 80026c4:	2313      	movs	r3, #19
 80026c6:	18fb      	adds	r3, r7, r3
 80026c8:	2203      	movs	r2, #3
 80026ca:	701a      	strb	r2, [r3, #0]
          break;
 80026cc:	e004      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80026ce:	4b3c      	ldr	r3, [pc, #240]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d2:	2202      	movs	r2, #2
 80026d4:	4013      	ands	r3, r2
 80026d6:	d0ed      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 80026d8:	2313      	movs	r3, #19
 80026da:	18fb      	adds	r3, r7, r3
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10a      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026e2:	4b37      	ldr	r3, [pc, #220]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e6:	4a37      	ldr	r2, [pc, #220]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80026e8:	4013      	ands	r3, r2
 80026ea:	0019      	movs	r1, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	699a      	ldr	r2, [r3, #24]
 80026f0:	4b33      	ldr	r3, [pc, #204]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026f2:	430a      	orrs	r2, r1
 80026f4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80026f6:	e005      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026f8:	2312      	movs	r3, #18
 80026fa:	18fb      	adds	r3, r7, r3
 80026fc:	2213      	movs	r2, #19
 80026fe:	18ba      	adds	r2, r7, r2
 8002700:	7812      	ldrb	r2, [r2, #0]
 8002702:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002704:	2311      	movs	r3, #17
 8002706:	18fb      	adds	r3, r7, r3
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d105      	bne.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800270e:	4b2c      	ldr	r3, [pc, #176]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002710:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002712:	4b2b      	ldr	r3, [pc, #172]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002714:	492e      	ldr	r1, [pc, #184]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002716:	400a      	ands	r2, r1
 8002718:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2201      	movs	r2, #1
 8002720:	4013      	ands	r3, r2
 8002722:	d009      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002724:	4b26      	ldr	r3, [pc, #152]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002728:	2203      	movs	r2, #3
 800272a:	4393      	bics	r3, r2
 800272c:	0019      	movs	r1, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	4b23      	ldr	r3, [pc, #140]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002734:	430a      	orrs	r2, r1
 8002736:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2240      	movs	r2, #64	@ 0x40
 800273e:	4013      	ands	r3, r2
 8002740:	d009      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002742:	4b1f      	ldr	r3, [pc, #124]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002746:	4a23      	ldr	r2, [pc, #140]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002748:	4013      	ands	r3, r2
 800274a:	0019      	movs	r1, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68da      	ldr	r2, [r3, #12]
 8002750:	4b1b      	ldr	r3, [pc, #108]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002752:	430a      	orrs	r2, r1
 8002754:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	2380      	movs	r3, #128	@ 0x80
 800275c:	01db      	lsls	r3, r3, #7
 800275e:	4013      	ands	r3, r2
 8002760:	d008      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002762:	4b17      	ldr	r3, [pc, #92]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	0899      	lsrs	r1, r3, #2
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	695a      	ldr	r2, [r3, #20]
 800276e:	4b14      	ldr	r3, [pc, #80]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002770:	430a      	orrs	r2, r1
 8002772:	655a      	str	r2, [r3, #84]	@ 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	2380      	movs	r3, #128	@ 0x80
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	4013      	ands	r3, r2
 800277e:	d009      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002780:	4b0f      	ldr	r3, [pc, #60]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002784:	4a14      	ldr	r2, [pc, #80]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002786:	4013      	ands	r3, r2
 8002788:	0019      	movs	r1, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691a      	ldr	r2, [r3, #16]
 800278e:	4b0c      	ldr	r3, [pc, #48]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002790:	430a      	orrs	r2, r1
 8002792:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	da09      	bge.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 800279c:	4b08      	ldr	r3, [pc, #32]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	22e0      	movs	r2, #224	@ 0xe0
 80027a2:	4393      	bics	r3, r2
 80027a4:	0019      	movs	r1, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	4b05      	ldr	r3, [pc, #20]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80027ac:	430a      	orrs	r2, r1
 80027ae:	601a      	str	r2, [r3, #0]
  }
  return status;
 80027b0:	2312      	movs	r3, #18
 80027b2:	18fb      	adds	r3, r7, r3
 80027b4:	781b      	ldrb	r3, [r3, #0]
}
 80027b6:	0018      	movs	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	b006      	add	sp, #24
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	46c0      	nop			@ (mov r8, r8)
 80027c0:	40021000 	.word	0x40021000
 80027c4:	fffffcff 	.word	0xfffffcff
 80027c8:	fffeffff 	.word	0xfffeffff
 80027cc:	00001388 	.word	0x00001388
 80027d0:	efffffff 	.word	0xefffffff
 80027d4:	ffffcfff 	.word	0xffffcfff
 80027d8:	ffff3fff 	.word	0xffff3fff

080027dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e046      	b.n	800287c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2288      	movs	r2, #136	@ 0x88
 80027f2:	589b      	ldr	r3, [r3, r2]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d107      	bne.n	8002808 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2284      	movs	r2, #132	@ 0x84
 80027fc:	2100      	movs	r1, #0
 80027fe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	0018      	movs	r0, r3
 8002804:	f7fd ffd6 	bl	80007b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2288      	movs	r2, #136	@ 0x88
 800280c:	2124      	movs	r1, #36	@ 0x24
 800280e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2101      	movs	r1, #1
 800281c:	438a      	bics	r2, r1
 800281e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002824:	2b00      	cmp	r3, #0
 8002826:	d003      	beq.n	8002830 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	0018      	movs	r0, r3
 800282c:	f000 fd90 	bl	8003350 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	0018      	movs	r0, r3
 8002834:	f000 fc0e 	bl	8003054 <UART_SetConfig>
 8002838:	0003      	movs	r3, r0
 800283a:	2b01      	cmp	r3, #1
 800283c:	d101      	bne.n	8002842 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e01c      	b.n	800287c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	490d      	ldr	r1, [pc, #52]	@ (8002884 <HAL_UART_Init+0xa8>)
 800284e:	400a      	ands	r2, r1
 8002850:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	212a      	movs	r1, #42	@ 0x2a
 800285e:	438a      	bics	r2, r1
 8002860:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2101      	movs	r1, #1
 800286e:	430a      	orrs	r2, r1
 8002870:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	0018      	movs	r0, r3
 8002876:	f000 fe1f 	bl	80034b8 <UART_CheckIdleState>
 800287a:	0003      	movs	r3, r0
}
 800287c:	0018      	movs	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	b002      	add	sp, #8
 8002882:	bd80      	pop	{r7, pc}
 8002884:	ffffb7ff 	.word	0xffffb7ff

08002888 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b08a      	sub	sp, #40	@ 0x28
 800288c:	af02      	add	r7, sp, #8
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	603b      	str	r3, [r7, #0]
 8002894:	1dbb      	adds	r3, r7, #6
 8002896:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2288      	movs	r2, #136	@ 0x88
 800289c:	589b      	ldr	r3, [r3, r2]
 800289e:	2b20      	cmp	r3, #32
 80028a0:	d000      	beq.n	80028a4 <HAL_UART_Transmit+0x1c>
 80028a2:	e090      	b.n	80029c6 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_UART_Transmit+0x2a>
 80028aa:	1dbb      	adds	r3, r7, #6
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e088      	b.n	80029c8 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	2380      	movs	r3, #128	@ 0x80
 80028bc:	015b      	lsls	r3, r3, #5
 80028be:	429a      	cmp	r2, r3
 80028c0:	d109      	bne.n	80028d6 <HAL_UART_Transmit+0x4e>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d105      	bne.n	80028d6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	2201      	movs	r2, #1
 80028ce:	4013      	ands	r3, r2
 80028d0:	d001      	beq.n	80028d6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e078      	b.n	80029c8 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2290      	movs	r2, #144	@ 0x90
 80028da:	2100      	movs	r1, #0
 80028dc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2288      	movs	r2, #136	@ 0x88
 80028e2:	2121      	movs	r1, #33	@ 0x21
 80028e4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028e6:	f7fe f853 	bl	8000990 <HAL_GetTick>
 80028ea:	0003      	movs	r3, r0
 80028ec:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	1dba      	adds	r2, r7, #6
 80028f2:	2154      	movs	r1, #84	@ 0x54
 80028f4:	8812      	ldrh	r2, [r2, #0]
 80028f6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	1dba      	adds	r2, r7, #6
 80028fc:	2156      	movs	r1, #86	@ 0x56
 80028fe:	8812      	ldrh	r2, [r2, #0]
 8002900:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	2380      	movs	r3, #128	@ 0x80
 8002908:	015b      	lsls	r3, r3, #5
 800290a:	429a      	cmp	r2, r3
 800290c:	d108      	bne.n	8002920 <HAL_UART_Transmit+0x98>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d104      	bne.n	8002920 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	61bb      	str	r3, [r7, #24]
 800291e:	e003      	b.n	8002928 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002924:	2300      	movs	r3, #0
 8002926:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002928:	e030      	b.n	800298c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	0013      	movs	r3, r2
 8002934:	2200      	movs	r2, #0
 8002936:	2180      	movs	r1, #128	@ 0x80
 8002938:	f000 fe68 	bl	800360c <UART_WaitOnFlagUntilTimeout>
 800293c:	1e03      	subs	r3, r0, #0
 800293e:	d005      	beq.n	800294c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2288      	movs	r2, #136	@ 0x88
 8002944:	2120      	movs	r1, #32
 8002946:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e03d      	b.n	80029c8 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10b      	bne.n	800296a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	001a      	movs	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	05d2      	lsls	r2, r2, #23
 800295e:	0dd2      	lsrs	r2, r2, #23
 8002960:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	3302      	adds	r3, #2
 8002966:	61bb      	str	r3, [r7, #24]
 8002968:	e007      	b.n	800297a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	781a      	ldrb	r2, [r3, #0]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	3301      	adds	r3, #1
 8002978:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2256      	movs	r2, #86	@ 0x56
 800297e:	5a9b      	ldrh	r3, [r3, r2]
 8002980:	b29b      	uxth	r3, r3
 8002982:	3b01      	subs	r3, #1
 8002984:	b299      	uxth	r1, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2256      	movs	r2, #86	@ 0x56
 800298a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2256      	movs	r2, #86	@ 0x56
 8002990:	5a9b      	ldrh	r3, [r3, r2]
 8002992:	b29b      	uxth	r3, r3
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1c8      	bne.n	800292a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	0013      	movs	r3, r2
 80029a2:	2200      	movs	r2, #0
 80029a4:	2140      	movs	r1, #64	@ 0x40
 80029a6:	f000 fe31 	bl	800360c <UART_WaitOnFlagUntilTimeout>
 80029aa:	1e03      	subs	r3, r0, #0
 80029ac:	d005      	beq.n	80029ba <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2288      	movs	r2, #136	@ 0x88
 80029b2:	2120      	movs	r1, #32
 80029b4:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e006      	b.n	80029c8 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2288      	movs	r2, #136	@ 0x88
 80029be:	2120      	movs	r1, #32
 80029c0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80029c2:	2300      	movs	r3, #0
 80029c4:	e000      	b.n	80029c8 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80029c6:	2302      	movs	r3, #2
  }
}
 80029c8:	0018      	movs	r0, r3
 80029ca:	46bd      	mov	sp, r7
 80029cc:	b008      	add	sp, #32
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029d0:	b5b0      	push	{r4, r5, r7, lr}
 80029d2:	b0aa      	sub	sp, #168	@ 0xa8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	22a4      	movs	r2, #164	@ 0xa4
 80029e0:	18b9      	adds	r1, r7, r2
 80029e2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	20a0      	movs	r0, #160	@ 0xa0
 80029ec:	1839      	adds	r1, r7, r0
 80029ee:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	249c      	movs	r4, #156	@ 0x9c
 80029f8:	1939      	adds	r1, r7, r4
 80029fa:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80029fc:	0011      	movs	r1, r2
 80029fe:	18bb      	adds	r3, r7, r2
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4aa2      	ldr	r2, [pc, #648]	@ (8002c8c <HAL_UART_IRQHandler+0x2bc>)
 8002a04:	4013      	ands	r3, r2
 8002a06:	2298      	movs	r2, #152	@ 0x98
 8002a08:	18bd      	adds	r5, r7, r2
 8002a0a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002a0c:	18bb      	adds	r3, r7, r2
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d11a      	bne.n	8002a4a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a14:	187b      	adds	r3, r7, r1
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2220      	movs	r2, #32
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	d015      	beq.n	8002a4a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a1e:	183b      	adds	r3, r7, r0
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2220      	movs	r2, #32
 8002a24:	4013      	ands	r3, r2
 8002a26:	d105      	bne.n	8002a34 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002a28:	193b      	adds	r3, r7, r4
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	2380      	movs	r3, #128	@ 0x80
 8002a2e:	055b      	lsls	r3, r3, #21
 8002a30:	4013      	ands	r3, r2
 8002a32:	d00a      	beq.n	8002a4a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d100      	bne.n	8002a3e <HAL_UART_IRQHandler+0x6e>
 8002a3c:	e2dc      	b.n	8002ff8 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	0010      	movs	r0, r2
 8002a46:	4798      	blx	r3
      }
      return;
 8002a48:	e2d6      	b.n	8002ff8 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002a4a:	2398      	movs	r3, #152	@ 0x98
 8002a4c:	18fb      	adds	r3, r7, r3
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d100      	bne.n	8002a56 <HAL_UART_IRQHandler+0x86>
 8002a54:	e122      	b.n	8002c9c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002a56:	239c      	movs	r3, #156	@ 0x9c
 8002a58:	18fb      	adds	r3, r7, r3
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a8c      	ldr	r2, [pc, #560]	@ (8002c90 <HAL_UART_IRQHandler+0x2c0>)
 8002a5e:	4013      	ands	r3, r2
 8002a60:	d106      	bne.n	8002a70 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002a62:	23a0      	movs	r3, #160	@ 0xa0
 8002a64:	18fb      	adds	r3, r7, r3
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a8a      	ldr	r2, [pc, #552]	@ (8002c94 <HAL_UART_IRQHandler+0x2c4>)
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	d100      	bne.n	8002a70 <HAL_UART_IRQHandler+0xa0>
 8002a6e:	e115      	b.n	8002c9c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002a70:	23a4      	movs	r3, #164	@ 0xa4
 8002a72:	18fb      	adds	r3, r7, r3
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2201      	movs	r2, #1
 8002a78:	4013      	ands	r3, r2
 8002a7a:	d012      	beq.n	8002aa2 <HAL_UART_IRQHandler+0xd2>
 8002a7c:	23a0      	movs	r3, #160	@ 0xa0
 8002a7e:	18fb      	adds	r3, r7, r3
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	2380      	movs	r3, #128	@ 0x80
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	4013      	ands	r3, r2
 8002a88:	d00b      	beq.n	8002aa2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2290      	movs	r2, #144	@ 0x90
 8002a96:	589b      	ldr	r3, [r3, r2]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2190      	movs	r1, #144	@ 0x90
 8002aa0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002aa2:	23a4      	movs	r3, #164	@ 0xa4
 8002aa4:	18fb      	adds	r3, r7, r3
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d011      	beq.n	8002ad2 <HAL_UART_IRQHandler+0x102>
 8002aae:	239c      	movs	r3, #156	@ 0x9c
 8002ab0:	18fb      	adds	r3, r7, r3
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	d00b      	beq.n	8002ad2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2202      	movs	r2, #2
 8002ac0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2290      	movs	r2, #144	@ 0x90
 8002ac6:	589b      	ldr	r3, [r3, r2]
 8002ac8:	2204      	movs	r2, #4
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2190      	movs	r1, #144	@ 0x90
 8002ad0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ad2:	23a4      	movs	r3, #164	@ 0xa4
 8002ad4:	18fb      	adds	r3, r7, r3
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2204      	movs	r2, #4
 8002ada:	4013      	ands	r3, r2
 8002adc:	d011      	beq.n	8002b02 <HAL_UART_IRQHandler+0x132>
 8002ade:	239c      	movs	r3, #156	@ 0x9c
 8002ae0:	18fb      	adds	r3, r7, r3
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	d00b      	beq.n	8002b02 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2204      	movs	r2, #4
 8002af0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2290      	movs	r2, #144	@ 0x90
 8002af6:	589b      	ldr	r3, [r3, r2]
 8002af8:	2202      	movs	r2, #2
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2190      	movs	r1, #144	@ 0x90
 8002b00:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002b02:	23a4      	movs	r3, #164	@ 0xa4
 8002b04:	18fb      	adds	r3, r7, r3
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2208      	movs	r2, #8
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	d017      	beq.n	8002b3e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002b0e:	23a0      	movs	r3, #160	@ 0xa0
 8002b10:	18fb      	adds	r3, r7, r3
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2220      	movs	r2, #32
 8002b16:	4013      	ands	r3, r2
 8002b18:	d105      	bne.n	8002b26 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002b1a:	239c      	movs	r3, #156	@ 0x9c
 8002b1c:	18fb      	adds	r3, r7, r3
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a5b      	ldr	r2, [pc, #364]	@ (8002c90 <HAL_UART_IRQHandler+0x2c0>)
 8002b22:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002b24:	d00b      	beq.n	8002b3e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2208      	movs	r2, #8
 8002b2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2290      	movs	r2, #144	@ 0x90
 8002b32:	589b      	ldr	r3, [r3, r2]
 8002b34:	2208      	movs	r2, #8
 8002b36:	431a      	orrs	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2190      	movs	r1, #144	@ 0x90
 8002b3c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002b3e:	23a4      	movs	r3, #164	@ 0xa4
 8002b40:	18fb      	adds	r3, r7, r3
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	2380      	movs	r3, #128	@ 0x80
 8002b46:	011b      	lsls	r3, r3, #4
 8002b48:	4013      	ands	r3, r2
 8002b4a:	d013      	beq.n	8002b74 <HAL_UART_IRQHandler+0x1a4>
 8002b4c:	23a0      	movs	r3, #160	@ 0xa0
 8002b4e:	18fb      	adds	r3, r7, r3
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	2380      	movs	r3, #128	@ 0x80
 8002b54:	04db      	lsls	r3, r3, #19
 8002b56:	4013      	ands	r3, r2
 8002b58:	d00c      	beq.n	8002b74 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2280      	movs	r2, #128	@ 0x80
 8002b60:	0112      	lsls	r2, r2, #4
 8002b62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2290      	movs	r2, #144	@ 0x90
 8002b68:	589b      	ldr	r3, [r3, r2]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2190      	movs	r1, #144	@ 0x90
 8002b72:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2290      	movs	r2, #144	@ 0x90
 8002b78:	589b      	ldr	r3, [r3, r2]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d100      	bne.n	8002b80 <HAL_UART_IRQHandler+0x1b0>
 8002b7e:	e23d      	b.n	8002ffc <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002b80:	23a4      	movs	r3, #164	@ 0xa4
 8002b82:	18fb      	adds	r3, r7, r3
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2220      	movs	r2, #32
 8002b88:	4013      	ands	r3, r2
 8002b8a:	d015      	beq.n	8002bb8 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002b8c:	23a0      	movs	r3, #160	@ 0xa0
 8002b8e:	18fb      	adds	r3, r7, r3
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2220      	movs	r2, #32
 8002b94:	4013      	ands	r3, r2
 8002b96:	d106      	bne.n	8002ba6 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002b98:	239c      	movs	r3, #156	@ 0x9c
 8002b9a:	18fb      	adds	r3, r7, r3
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	055b      	lsls	r3, r3, #21
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	d008      	beq.n	8002bb8 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d004      	beq.n	8002bb8 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	0010      	movs	r0, r2
 8002bb6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2290      	movs	r2, #144	@ 0x90
 8002bbc:	589b      	ldr	r3, [r3, r2]
 8002bbe:	2194      	movs	r1, #148	@ 0x94
 8002bc0:	187a      	adds	r2, r7, r1
 8002bc2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	2240      	movs	r2, #64	@ 0x40
 8002bcc:	4013      	ands	r3, r2
 8002bce:	2b40      	cmp	r3, #64	@ 0x40
 8002bd0:	d004      	beq.n	8002bdc <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002bd2:	187b      	adds	r3, r7, r1
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2228      	movs	r2, #40	@ 0x28
 8002bd8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002bda:	d04c      	beq.n	8002c76 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	0018      	movs	r0, r3
 8002be0:	f000 fd7e 	bl	80036e0 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	2240      	movs	r2, #64	@ 0x40
 8002bec:	4013      	ands	r3, r2
 8002bee:	2b40      	cmp	r3, #64	@ 0x40
 8002bf0:	d13c      	bne.n	8002c6c <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002bf2:	f3ef 8310 	mrs	r3, PRIMASK
 8002bf6:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8002bf8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bfa:	2090      	movs	r0, #144	@ 0x90
 8002bfc:	183a      	adds	r2, r7, r0
 8002bfe:	6013      	str	r3, [r2, #0]
 8002c00:	2301      	movs	r3, #1
 8002c02:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c06:	f383 8810 	msr	PRIMASK, r3
}
 8002c0a:	46c0      	nop			@ (mov r8, r8)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2140      	movs	r1, #64	@ 0x40
 8002c18:	438a      	bics	r2, r1
 8002c1a:	609a      	str	r2, [r3, #8]
 8002c1c:	183b      	adds	r3, r7, r0
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c24:	f383 8810 	msr	PRIMASK, r3
}
 8002c28:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2280      	movs	r2, #128	@ 0x80
 8002c2e:	589b      	ldr	r3, [r3, r2]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d016      	beq.n	8002c62 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2280      	movs	r2, #128	@ 0x80
 8002c38:	589b      	ldr	r3, [r3, r2]
 8002c3a:	4a17      	ldr	r2, [pc, #92]	@ (8002c98 <HAL_UART_IRQHandler+0x2c8>)
 8002c3c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2280      	movs	r2, #128	@ 0x80
 8002c42:	589b      	ldr	r3, [r3, r2]
 8002c44:	0018      	movs	r0, r3
 8002c46:	f7fe f811 	bl	8000c6c <HAL_DMA_Abort_IT>
 8002c4a:	1e03      	subs	r3, r0, #0
 8002c4c:	d01c      	beq.n	8002c88 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2280      	movs	r2, #128	@ 0x80
 8002c52:	589b      	ldr	r3, [r3, r2]
 8002c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	2180      	movs	r1, #128	@ 0x80
 8002c5a:	5852      	ldr	r2, [r2, r1]
 8002c5c:	0010      	movs	r0, r2
 8002c5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c60:	e012      	b.n	8002c88 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	0018      	movs	r0, r3
 8002c66:	f000 f9e1 	bl	800302c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c6a:	e00d      	b.n	8002c88 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	0018      	movs	r0, r3
 8002c70:	f000 f9dc 	bl	800302c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c74:	e008      	b.n	8002c88 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	0018      	movs	r0, r3
 8002c7a:	f000 f9d7 	bl	800302c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2290      	movs	r2, #144	@ 0x90
 8002c82:	2100      	movs	r1, #0
 8002c84:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002c86:	e1b9      	b.n	8002ffc <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c88:	46c0      	nop			@ (mov r8, r8)
    return;
 8002c8a:	e1b7      	b.n	8002ffc <HAL_UART_IRQHandler+0x62c>
 8002c8c:	0000080f 	.word	0x0000080f
 8002c90:	10000001 	.word	0x10000001
 8002c94:	04000120 	.word	0x04000120
 8002c98:	080037ad 	.word	0x080037ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d000      	beq.n	8002ca6 <HAL_UART_IRQHandler+0x2d6>
 8002ca4:	e13e      	b.n	8002f24 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002ca6:	23a4      	movs	r3, #164	@ 0xa4
 8002ca8:	18fb      	adds	r3, r7, r3
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2210      	movs	r2, #16
 8002cae:	4013      	ands	r3, r2
 8002cb0:	d100      	bne.n	8002cb4 <HAL_UART_IRQHandler+0x2e4>
 8002cb2:	e137      	b.n	8002f24 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002cb4:	23a0      	movs	r3, #160	@ 0xa0
 8002cb6:	18fb      	adds	r3, r7, r3
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2210      	movs	r2, #16
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	d100      	bne.n	8002cc2 <HAL_UART_IRQHandler+0x2f2>
 8002cc0:	e130      	b.n	8002f24 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2210      	movs	r2, #16
 8002cc8:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	2240      	movs	r2, #64	@ 0x40
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	2b40      	cmp	r3, #64	@ 0x40
 8002cd6:	d000      	beq.n	8002cda <HAL_UART_IRQHandler+0x30a>
 8002cd8:	e0a4      	b.n	8002e24 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2280      	movs	r2, #128	@ 0x80
 8002cde:	589b      	ldr	r3, [r3, r2]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	217e      	movs	r1, #126	@ 0x7e
 8002ce6:	187b      	adds	r3, r7, r1
 8002ce8:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002cea:	187b      	adds	r3, r7, r1
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d100      	bne.n	8002cf4 <HAL_UART_IRQHandler+0x324>
 8002cf2:	e185      	b.n	8003000 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	225c      	movs	r2, #92	@ 0x5c
 8002cf8:	5a9b      	ldrh	r3, [r3, r2]
 8002cfa:	187a      	adds	r2, r7, r1
 8002cfc:	8812      	ldrh	r2, [r2, #0]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d300      	bcc.n	8002d04 <HAL_UART_IRQHandler+0x334>
 8002d02:	e17d      	b.n	8003000 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	187a      	adds	r2, r7, r1
 8002d08:	215e      	movs	r1, #94	@ 0x5e
 8002d0a:	8812      	ldrh	r2, [r2, #0]
 8002d0c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2280      	movs	r2, #128	@ 0x80
 8002d12:	589b      	ldr	r3, [r3, r2]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2220      	movs	r2, #32
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d170      	bne.n	8002e00 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002d1e:	f3ef 8310 	mrs	r3, PRIMASK
 8002d22:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d26:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d28:	2301      	movs	r3, #1
 8002d2a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d2e:	f383 8810 	msr	PRIMASK, r3
}
 8002d32:	46c0      	nop			@ (mov r8, r8)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	49b4      	ldr	r1, [pc, #720]	@ (8003010 <HAL_UART_IRQHandler+0x640>)
 8002d40:	400a      	ands	r2, r1
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d46:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d4a:	f383 8810 	msr	PRIMASK, r3
}
 8002d4e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002d50:	f3ef 8310 	mrs	r3, PRIMASK
 8002d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8002d56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d58:	677b      	str	r3, [r7, #116]	@ 0x74
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d60:	f383 8810 	msr	PRIMASK, r3
}
 8002d64:	46c0      	nop			@ (mov r8, r8)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2101      	movs	r1, #1
 8002d72:	438a      	bics	r2, r1
 8002d74:	609a      	str	r2, [r3, #8]
 8002d76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d78:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d7c:	f383 8810 	msr	PRIMASK, r3
}
 8002d80:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002d82:	f3ef 8310 	mrs	r3, PRIMASK
 8002d86:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002d88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d8a:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d92:	f383 8810 	msr	PRIMASK, r3
}
 8002d96:	46c0      	nop			@ (mov r8, r8)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689a      	ldr	r2, [r3, #8]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2140      	movs	r1, #64	@ 0x40
 8002da4:	438a      	bics	r2, r1
 8002da6:	609a      	str	r2, [r3, #8]
 8002da8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002daa:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002dae:	f383 8810 	msr	PRIMASK, r3
}
 8002db2:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	228c      	movs	r2, #140	@ 0x8c
 8002db8:	2120      	movs	r1, #32
 8002dba:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002dc2:	f3ef 8310 	mrs	r3, PRIMASK
 8002dc6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8002dc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002dcc:	2301      	movs	r3, #1
 8002dce:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dd0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002dd2:	f383 8810 	msr	PRIMASK, r3
}
 8002dd6:	46c0      	nop			@ (mov r8, r8)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2110      	movs	r1, #16
 8002de4:	438a      	bics	r2, r1
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dea:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002dee:	f383 8810 	msr	PRIMASK, r3
}
 8002df2:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2280      	movs	r2, #128	@ 0x80
 8002df8:	589b      	ldr	r3, [r3, r2]
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f7fd fed4 	bl	8000ba8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2202      	movs	r2, #2
 8002e04:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	225c      	movs	r2, #92	@ 0x5c
 8002e0a:	5a9a      	ldrh	r2, [r3, r2]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	215e      	movs	r1, #94	@ 0x5e
 8002e10:	5a5b      	ldrh	r3, [r3, r1]
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	0011      	movs	r1, r2
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	f000 f90d 	bl	800303c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e22:	e0ed      	b.n	8003000 <HAL_UART_IRQHandler+0x630>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	225c      	movs	r2, #92	@ 0x5c
 8002e28:	5a99      	ldrh	r1, [r3, r2]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	225e      	movs	r2, #94	@ 0x5e
 8002e2e:	5a9b      	ldrh	r3, [r3, r2]
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	208e      	movs	r0, #142	@ 0x8e
 8002e34:	183b      	adds	r3, r7, r0
 8002e36:	1a8a      	subs	r2, r1, r2
 8002e38:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	225e      	movs	r2, #94	@ 0x5e
 8002e3e:	5a9b      	ldrh	r3, [r3, r2]
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d100      	bne.n	8002e48 <HAL_UART_IRQHandler+0x478>
 8002e46:	e0dd      	b.n	8003004 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8002e48:	183b      	adds	r3, r7, r0
 8002e4a:	881b      	ldrh	r3, [r3, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d100      	bne.n	8002e52 <HAL_UART_IRQHandler+0x482>
 8002e50:	e0d8      	b.n	8003004 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002e52:	f3ef 8310 	mrs	r3, PRIMASK
 8002e56:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e58:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002e5a:	2488      	movs	r4, #136	@ 0x88
 8002e5c:	193a      	adds	r2, r7, r4
 8002e5e:	6013      	str	r3, [r2, #0]
 8002e60:	2301      	movs	r3, #1
 8002e62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	f383 8810 	msr	PRIMASK, r3
}
 8002e6a:	46c0      	nop			@ (mov r8, r8)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4967      	ldr	r1, [pc, #412]	@ (8003014 <HAL_UART_IRQHandler+0x644>)
 8002e78:	400a      	ands	r2, r1
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	193b      	adds	r3, r7, r4
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f383 8810 	msr	PRIMASK, r3
}
 8002e88:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002e8a:	f3ef 8310 	mrs	r3, PRIMASK
 8002e8e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e90:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002e92:	2484      	movs	r4, #132	@ 0x84
 8002e94:	193a      	adds	r2, r7, r4
 8002e96:	6013      	str	r3, [r2, #0]
 8002e98:	2301      	movs	r3, #1
 8002e9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	f383 8810 	msr	PRIMASK, r3
}
 8002ea2:	46c0      	nop			@ (mov r8, r8)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689a      	ldr	r2, [r3, #8]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	495a      	ldr	r1, [pc, #360]	@ (8003018 <HAL_UART_IRQHandler+0x648>)
 8002eb0:	400a      	ands	r2, r1
 8002eb2:	609a      	str	r2, [r3, #8]
 8002eb4:	193b      	adds	r3, r7, r4
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eba:	6a3b      	ldr	r3, [r7, #32]
 8002ebc:	f383 8810 	msr	PRIMASK, r3
}
 8002ec0:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	228c      	movs	r2, #140	@ 0x8c
 8002ec6:	2120      	movs	r1, #32
 8002ec8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002ed6:	f3ef 8310 	mrs	r3, PRIMASK
 8002eda:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ede:	2480      	movs	r4, #128	@ 0x80
 8002ee0:	193a      	adds	r2, r7, r4
 8002ee2:	6013      	str	r3, [r2, #0]
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eea:	f383 8810 	msr	PRIMASK, r3
}
 8002eee:	46c0      	nop			@ (mov r8, r8)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2110      	movs	r1, #16
 8002efc:	438a      	bics	r2, r1
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	193b      	adds	r3, r7, r4
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f08:	f383 8810 	msr	PRIMASK, r3
}
 8002f0c:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2202      	movs	r2, #2
 8002f12:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f14:	183b      	adds	r3, r7, r0
 8002f16:	881a      	ldrh	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	0011      	movs	r1, r2
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	f000 f88d 	bl	800303c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f22:	e06f      	b.n	8003004 <HAL_UART_IRQHandler+0x634>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002f24:	23a4      	movs	r3, #164	@ 0xa4
 8002f26:	18fb      	adds	r3, r7, r3
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	2380      	movs	r3, #128	@ 0x80
 8002f2c:	035b      	lsls	r3, r3, #13
 8002f2e:	4013      	ands	r3, r2
 8002f30:	d010      	beq.n	8002f54 <HAL_UART_IRQHandler+0x584>
 8002f32:	239c      	movs	r3, #156	@ 0x9c
 8002f34:	18fb      	adds	r3, r7, r3
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	2380      	movs	r3, #128	@ 0x80
 8002f3a:	03db      	lsls	r3, r3, #15
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	d009      	beq.n	8002f54 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2280      	movs	r2, #128	@ 0x80
 8002f46:	0352      	lsls	r2, r2, #13
 8002f48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	f000 fc70 	bl	8003832 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f52:	e05a      	b.n	800300a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002f54:	23a4      	movs	r3, #164	@ 0xa4
 8002f56:	18fb      	adds	r3, r7, r3
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2280      	movs	r2, #128	@ 0x80
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	d016      	beq.n	8002f8e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002f60:	23a0      	movs	r3, #160	@ 0xa0
 8002f62:	18fb      	adds	r3, r7, r3
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2280      	movs	r2, #128	@ 0x80
 8002f68:	4013      	ands	r3, r2
 8002f6a:	d106      	bne.n	8002f7a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002f6c:	239c      	movs	r3, #156	@ 0x9c
 8002f6e:	18fb      	adds	r3, r7, r3
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	2380      	movs	r3, #128	@ 0x80
 8002f74:	041b      	lsls	r3, r3, #16
 8002f76:	4013      	ands	r3, r2
 8002f78:	d009      	beq.n	8002f8e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d042      	beq.n	8003008 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	0010      	movs	r0, r2
 8002f8a:	4798      	blx	r3
    }
    return;
 8002f8c:	e03c      	b.n	8003008 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002f8e:	23a4      	movs	r3, #164	@ 0xa4
 8002f90:	18fb      	adds	r3, r7, r3
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2240      	movs	r2, #64	@ 0x40
 8002f96:	4013      	ands	r3, r2
 8002f98:	d00a      	beq.n	8002fb0 <HAL_UART_IRQHandler+0x5e0>
 8002f9a:	23a0      	movs	r3, #160	@ 0xa0
 8002f9c:	18fb      	adds	r3, r7, r3
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2240      	movs	r2, #64	@ 0x40
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	d004      	beq.n	8002fb0 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f000 fc16 	bl	80037da <UART_EndTransmit_IT>
    return;
 8002fae:	e02c      	b.n	800300a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002fb0:	23a4      	movs	r3, #164	@ 0xa4
 8002fb2:	18fb      	adds	r3, r7, r3
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	2380      	movs	r3, #128	@ 0x80
 8002fb8:	041b      	lsls	r3, r3, #16
 8002fba:	4013      	ands	r3, r2
 8002fbc:	d00b      	beq.n	8002fd6 <HAL_UART_IRQHandler+0x606>
 8002fbe:	23a0      	movs	r3, #160	@ 0xa0
 8002fc0:	18fb      	adds	r3, r7, r3
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	2380      	movs	r3, #128	@ 0x80
 8002fc6:	05db      	lsls	r3, r3, #23
 8002fc8:	4013      	ands	r3, r2
 8002fca:	d004      	beq.n	8002fd6 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	0018      	movs	r0, r3
 8002fd0:	f000 fc3f 	bl	8003852 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002fd4:	e019      	b.n	800300a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002fd6:	23a4      	movs	r3, #164	@ 0xa4
 8002fd8:	18fb      	adds	r3, r7, r3
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	2380      	movs	r3, #128	@ 0x80
 8002fde:	045b      	lsls	r3, r3, #17
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	d012      	beq.n	800300a <HAL_UART_IRQHandler+0x63a>
 8002fe4:	23a0      	movs	r3, #160	@ 0xa0
 8002fe6:	18fb      	adds	r3, r7, r3
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	da0d      	bge.n	800300a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f000 fc26 	bl	8003842 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002ff6:	e008      	b.n	800300a <HAL_UART_IRQHandler+0x63a>
      return;
 8002ff8:	46c0      	nop			@ (mov r8, r8)
 8002ffa:	e006      	b.n	800300a <HAL_UART_IRQHandler+0x63a>
    return;
 8002ffc:	46c0      	nop			@ (mov r8, r8)
 8002ffe:	e004      	b.n	800300a <HAL_UART_IRQHandler+0x63a>
      return;
 8003000:	46c0      	nop			@ (mov r8, r8)
 8003002:	e002      	b.n	800300a <HAL_UART_IRQHandler+0x63a>
      return;
 8003004:	46c0      	nop			@ (mov r8, r8)
 8003006:	e000      	b.n	800300a <HAL_UART_IRQHandler+0x63a>
    return;
 8003008:	46c0      	nop			@ (mov r8, r8)
  }
}
 800300a:	46bd      	mov	sp, r7
 800300c:	b02a      	add	sp, #168	@ 0xa8
 800300e:	bdb0      	pop	{r4, r5, r7, pc}
 8003010:	fffffeff 	.word	0xfffffeff
 8003014:	fffffedf 	.word	0xfffffedf
 8003018:	effffffe 	.word	0xeffffffe

0800301c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003024:	46c0      	nop			@ (mov r8, r8)
 8003026:	46bd      	mov	sp, r7
 8003028:	b002      	add	sp, #8
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003034:	46c0      	nop			@ (mov r8, r8)
 8003036:	46bd      	mov	sp, r7
 8003038:	b002      	add	sp, #8
 800303a:	bd80      	pop	{r7, pc}

0800303c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	000a      	movs	r2, r1
 8003046:	1cbb      	adds	r3, r7, #2
 8003048:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800304a:	46c0      	nop			@ (mov r8, r8)
 800304c:	46bd      	mov	sp, r7
 800304e:	b002      	add	sp, #8
 8003050:	bd80      	pop	{r7, pc}
	...

08003054 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b088      	sub	sp, #32
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800305c:	231e      	movs	r3, #30
 800305e:	18fb      	adds	r3, r7, r3
 8003060:	2200      	movs	r2, #0
 8003062:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	431a      	orrs	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	69db      	ldr	r3, [r3, #28]
 8003078:	4313      	orrs	r3, r2
 800307a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4aab      	ldr	r2, [pc, #684]	@ (8003330 <UART_SetConfig+0x2dc>)
 8003084:	4013      	ands	r3, r2
 8003086:	0019      	movs	r1, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	430a      	orrs	r2, r1
 8003090:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	4aa6      	ldr	r2, [pc, #664]	@ (8003334 <UART_SetConfig+0x2e0>)
 800309a:	4013      	ands	r3, r2
 800309c:	0019      	movs	r1, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68da      	ldr	r2, [r3, #12]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	4a9d      	ldr	r2, [pc, #628]	@ (8003338 <UART_SetConfig+0x2e4>)
 80030c2:	4013      	ands	r3, r2
 80030c4:	0019      	movs	r1, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d6:	220f      	movs	r2, #15
 80030d8:	4393      	bics	r3, r2
 80030da:	0019      	movs	r1, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a93      	ldr	r2, [pc, #588]	@ (800333c <UART_SetConfig+0x2e8>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d127      	bne.n	8003142 <UART_SetConfig+0xee>
 80030f2:	4b93      	ldr	r3, [pc, #588]	@ (8003340 <UART_SetConfig+0x2ec>)
 80030f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030f6:	2203      	movs	r2, #3
 80030f8:	4013      	ands	r3, r2
 80030fa:	2b03      	cmp	r3, #3
 80030fc:	d017      	beq.n	800312e <UART_SetConfig+0xda>
 80030fe:	d81b      	bhi.n	8003138 <UART_SetConfig+0xe4>
 8003100:	2b02      	cmp	r3, #2
 8003102:	d00a      	beq.n	800311a <UART_SetConfig+0xc6>
 8003104:	d818      	bhi.n	8003138 <UART_SetConfig+0xe4>
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <UART_SetConfig+0xbc>
 800310a:	2b01      	cmp	r3, #1
 800310c:	d00a      	beq.n	8003124 <UART_SetConfig+0xd0>
 800310e:	e013      	b.n	8003138 <UART_SetConfig+0xe4>
 8003110:	231f      	movs	r3, #31
 8003112:	18fb      	adds	r3, r7, r3
 8003114:	2200      	movs	r2, #0
 8003116:	701a      	strb	r2, [r3, #0]
 8003118:	e021      	b.n	800315e <UART_SetConfig+0x10a>
 800311a:	231f      	movs	r3, #31
 800311c:	18fb      	adds	r3, r7, r3
 800311e:	2202      	movs	r2, #2
 8003120:	701a      	strb	r2, [r3, #0]
 8003122:	e01c      	b.n	800315e <UART_SetConfig+0x10a>
 8003124:	231f      	movs	r3, #31
 8003126:	18fb      	adds	r3, r7, r3
 8003128:	2204      	movs	r2, #4
 800312a:	701a      	strb	r2, [r3, #0]
 800312c:	e017      	b.n	800315e <UART_SetConfig+0x10a>
 800312e:	231f      	movs	r3, #31
 8003130:	18fb      	adds	r3, r7, r3
 8003132:	2208      	movs	r2, #8
 8003134:	701a      	strb	r2, [r3, #0]
 8003136:	e012      	b.n	800315e <UART_SetConfig+0x10a>
 8003138:	231f      	movs	r3, #31
 800313a:	18fb      	adds	r3, r7, r3
 800313c:	2210      	movs	r2, #16
 800313e:	701a      	strb	r2, [r3, #0]
 8003140:	e00d      	b.n	800315e <UART_SetConfig+0x10a>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a7f      	ldr	r2, [pc, #508]	@ (8003344 <UART_SetConfig+0x2f0>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d104      	bne.n	8003156 <UART_SetConfig+0x102>
 800314c:	231f      	movs	r3, #31
 800314e:	18fb      	adds	r3, r7, r3
 8003150:	2200      	movs	r2, #0
 8003152:	701a      	strb	r2, [r3, #0]
 8003154:	e003      	b.n	800315e <UART_SetConfig+0x10a>
 8003156:	231f      	movs	r3, #31
 8003158:	18fb      	adds	r3, r7, r3
 800315a:	2210      	movs	r2, #16
 800315c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	69da      	ldr	r2, [r3, #28]
 8003162:	2380      	movs	r3, #128	@ 0x80
 8003164:	021b      	lsls	r3, r3, #8
 8003166:	429a      	cmp	r2, r3
 8003168:	d000      	beq.n	800316c <UART_SetConfig+0x118>
 800316a:	e06f      	b.n	800324c <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 800316c:	231f      	movs	r3, #31
 800316e:	18fb      	adds	r3, r7, r3
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b08      	cmp	r3, #8
 8003174:	d01f      	beq.n	80031b6 <UART_SetConfig+0x162>
 8003176:	dc22      	bgt.n	80031be <UART_SetConfig+0x16a>
 8003178:	2b04      	cmp	r3, #4
 800317a:	d017      	beq.n	80031ac <UART_SetConfig+0x158>
 800317c:	dc1f      	bgt.n	80031be <UART_SetConfig+0x16a>
 800317e:	2b00      	cmp	r3, #0
 8003180:	d002      	beq.n	8003188 <UART_SetConfig+0x134>
 8003182:	2b02      	cmp	r3, #2
 8003184:	d005      	beq.n	8003192 <UART_SetConfig+0x13e>
 8003186:	e01a      	b.n	80031be <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003188:	f7ff fa22 	bl	80025d0 <HAL_RCC_GetPCLK1Freq>
 800318c:	0003      	movs	r3, r0
 800318e:	61bb      	str	r3, [r7, #24]
        break;
 8003190:	e01c      	b.n	80031cc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8003192:	4b6b      	ldr	r3, [pc, #428]	@ (8003340 <UART_SetConfig+0x2ec>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	095b      	lsrs	r3, r3, #5
 8003198:	2207      	movs	r2, #7
 800319a:	4013      	ands	r3, r2
 800319c:	3301      	adds	r3, #1
 800319e:	0019      	movs	r1, r3
 80031a0:	4869      	ldr	r0, [pc, #420]	@ (8003348 <UART_SetConfig+0x2f4>)
 80031a2:	f7fc ffb1 	bl	8000108 <__udivsi3>
 80031a6:	0003      	movs	r3, r0
 80031a8:	61bb      	str	r3, [r7, #24]
        break;
 80031aa:	e00f      	b.n	80031cc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ac:	f7ff f9c6 	bl	800253c <HAL_RCC_GetSysClockFreq>
 80031b0:	0003      	movs	r3, r0
 80031b2:	61bb      	str	r3, [r7, #24]
        break;
 80031b4:	e00a      	b.n	80031cc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031b6:	2380      	movs	r3, #128	@ 0x80
 80031b8:	021b      	lsls	r3, r3, #8
 80031ba:	61bb      	str	r3, [r7, #24]
        break;
 80031bc:	e006      	b.n	80031cc <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 80031be:	2300      	movs	r3, #0
 80031c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031c2:	231e      	movs	r3, #30
 80031c4:	18fb      	adds	r3, r7, r3
 80031c6:	2201      	movs	r2, #1
 80031c8:	701a      	strb	r2, [r3, #0]
        break;
 80031ca:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d100      	bne.n	80031d4 <UART_SetConfig+0x180>
 80031d2:	e097      	b.n	8003304 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031d8:	4b5c      	ldr	r3, [pc, #368]	@ (800334c <UART_SetConfig+0x2f8>)
 80031da:	0052      	lsls	r2, r2, #1
 80031dc:	5ad3      	ldrh	r3, [r2, r3]
 80031de:	0019      	movs	r1, r3
 80031e0:	69b8      	ldr	r0, [r7, #24]
 80031e2:	f7fc ff91 	bl	8000108 <__udivsi3>
 80031e6:	0003      	movs	r3, r0
 80031e8:	005a      	lsls	r2, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	085b      	lsrs	r3, r3, #1
 80031f0:	18d2      	adds	r2, r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	0019      	movs	r1, r3
 80031f8:	0010      	movs	r0, r2
 80031fa:	f7fc ff85 	bl	8000108 <__udivsi3>
 80031fe:	0003      	movs	r3, r0
 8003200:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	2b0f      	cmp	r3, #15
 8003206:	d91c      	bls.n	8003242 <UART_SetConfig+0x1ee>
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	2380      	movs	r3, #128	@ 0x80
 800320c:	025b      	lsls	r3, r3, #9
 800320e:	429a      	cmp	r2, r3
 8003210:	d217      	bcs.n	8003242 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	b29a      	uxth	r2, r3
 8003216:	200e      	movs	r0, #14
 8003218:	183b      	adds	r3, r7, r0
 800321a:	210f      	movs	r1, #15
 800321c:	438a      	bics	r2, r1
 800321e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	085b      	lsrs	r3, r3, #1
 8003224:	b29b      	uxth	r3, r3
 8003226:	2207      	movs	r2, #7
 8003228:	4013      	ands	r3, r2
 800322a:	b299      	uxth	r1, r3
 800322c:	183b      	adds	r3, r7, r0
 800322e:	183a      	adds	r2, r7, r0
 8003230:	8812      	ldrh	r2, [r2, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	183a      	adds	r2, r7, r0
 800323c:	8812      	ldrh	r2, [r2, #0]
 800323e:	60da      	str	r2, [r3, #12]
 8003240:	e060      	b.n	8003304 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8003242:	231e      	movs	r3, #30
 8003244:	18fb      	adds	r3, r7, r3
 8003246:	2201      	movs	r2, #1
 8003248:	701a      	strb	r2, [r3, #0]
 800324a:	e05b      	b.n	8003304 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800324c:	231f      	movs	r3, #31
 800324e:	18fb      	adds	r3, r7, r3
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b08      	cmp	r3, #8
 8003254:	d01f      	beq.n	8003296 <UART_SetConfig+0x242>
 8003256:	dc22      	bgt.n	800329e <UART_SetConfig+0x24a>
 8003258:	2b04      	cmp	r3, #4
 800325a:	d017      	beq.n	800328c <UART_SetConfig+0x238>
 800325c:	dc1f      	bgt.n	800329e <UART_SetConfig+0x24a>
 800325e:	2b00      	cmp	r3, #0
 8003260:	d002      	beq.n	8003268 <UART_SetConfig+0x214>
 8003262:	2b02      	cmp	r3, #2
 8003264:	d005      	beq.n	8003272 <UART_SetConfig+0x21e>
 8003266:	e01a      	b.n	800329e <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003268:	f7ff f9b2 	bl	80025d0 <HAL_RCC_GetPCLK1Freq>
 800326c:	0003      	movs	r3, r0
 800326e:	61bb      	str	r3, [r7, #24]
        break;
 8003270:	e01c      	b.n	80032ac <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8003272:	4b33      	ldr	r3, [pc, #204]	@ (8003340 <UART_SetConfig+0x2ec>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	095b      	lsrs	r3, r3, #5
 8003278:	2207      	movs	r2, #7
 800327a:	4013      	ands	r3, r2
 800327c:	3301      	adds	r3, #1
 800327e:	0019      	movs	r1, r3
 8003280:	4831      	ldr	r0, [pc, #196]	@ (8003348 <UART_SetConfig+0x2f4>)
 8003282:	f7fc ff41 	bl	8000108 <__udivsi3>
 8003286:	0003      	movs	r3, r0
 8003288:	61bb      	str	r3, [r7, #24]
        break;
 800328a:	e00f      	b.n	80032ac <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800328c:	f7ff f956 	bl	800253c <HAL_RCC_GetSysClockFreq>
 8003290:	0003      	movs	r3, r0
 8003292:	61bb      	str	r3, [r7, #24]
        break;
 8003294:	e00a      	b.n	80032ac <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003296:	2380      	movs	r3, #128	@ 0x80
 8003298:	021b      	lsls	r3, r3, #8
 800329a:	61bb      	str	r3, [r7, #24]
        break;
 800329c:	e006      	b.n	80032ac <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 800329e:	2300      	movs	r3, #0
 80032a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032a2:	231e      	movs	r3, #30
 80032a4:	18fb      	adds	r3, r7, r3
 80032a6:	2201      	movs	r2, #1
 80032a8:	701a      	strb	r2, [r3, #0]
        break;
 80032aa:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d028      	beq.n	8003304 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032b6:	4b25      	ldr	r3, [pc, #148]	@ (800334c <UART_SetConfig+0x2f8>)
 80032b8:	0052      	lsls	r2, r2, #1
 80032ba:	5ad3      	ldrh	r3, [r2, r3]
 80032bc:	0019      	movs	r1, r3
 80032be:	69b8      	ldr	r0, [r7, #24]
 80032c0:	f7fc ff22 	bl	8000108 <__udivsi3>
 80032c4:	0003      	movs	r3, r0
 80032c6:	001a      	movs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	085b      	lsrs	r3, r3, #1
 80032ce:	18d2      	adds	r2, r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	0019      	movs	r1, r3
 80032d6:	0010      	movs	r0, r2
 80032d8:	f7fc ff16 	bl	8000108 <__udivsi3>
 80032dc:	0003      	movs	r3, r0
 80032de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	2b0f      	cmp	r3, #15
 80032e4:	d90a      	bls.n	80032fc <UART_SetConfig+0x2a8>
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	2380      	movs	r3, #128	@ 0x80
 80032ea:	025b      	lsls	r3, r3, #9
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d205      	bcs.n	80032fc <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	60da      	str	r2, [r3, #12]
 80032fa:	e003      	b.n	8003304 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80032fc:	231e      	movs	r3, #30
 80032fe:	18fb      	adds	r3, r7, r3
 8003300:	2201      	movs	r2, #1
 8003302:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	226a      	movs	r2, #106	@ 0x6a
 8003308:	2101      	movs	r1, #1
 800330a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2268      	movs	r2, #104	@ 0x68
 8003310:	2101      	movs	r1, #1
 8003312:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003320:	231e      	movs	r3, #30
 8003322:	18fb      	adds	r3, r7, r3
 8003324:	781b      	ldrb	r3, [r3, #0]
}
 8003326:	0018      	movs	r0, r3
 8003328:	46bd      	mov	sp, r7
 800332a:	b008      	add	sp, #32
 800332c:	bd80      	pop	{r7, pc}
 800332e:	46c0      	nop			@ (mov r8, r8)
 8003330:	cfff69f3 	.word	0xcfff69f3
 8003334:	ffffcfff 	.word	0xffffcfff
 8003338:	11fff4ff 	.word	0x11fff4ff
 800333c:	40013800 	.word	0x40013800
 8003340:	40021000 	.word	0x40021000
 8003344:	40004400 	.word	0x40004400
 8003348:	02dc6c00 	.word	0x02dc6c00
 800334c:	080042b4 	.word	0x080042b4

08003350 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800335c:	2208      	movs	r2, #8
 800335e:	4013      	ands	r3, r2
 8003360:	d00b      	beq.n	800337a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	4a4a      	ldr	r2, [pc, #296]	@ (8003494 <UART_AdvFeatureConfig+0x144>)
 800336a:	4013      	ands	r3, r2
 800336c:	0019      	movs	r1, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800337e:	2201      	movs	r2, #1
 8003380:	4013      	ands	r3, r2
 8003382:	d00b      	beq.n	800339c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	4a43      	ldr	r2, [pc, #268]	@ (8003498 <UART_AdvFeatureConfig+0x148>)
 800338c:	4013      	ands	r3, r2
 800338e:	0019      	movs	r1, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a0:	2202      	movs	r2, #2
 80033a2:	4013      	ands	r3, r2
 80033a4:	d00b      	beq.n	80033be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	4a3b      	ldr	r2, [pc, #236]	@ (800349c <UART_AdvFeatureConfig+0x14c>)
 80033ae:	4013      	ands	r3, r2
 80033b0:	0019      	movs	r1, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c2:	2204      	movs	r2, #4
 80033c4:	4013      	ands	r3, r2
 80033c6:	d00b      	beq.n	80033e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	4a34      	ldr	r2, [pc, #208]	@ (80034a0 <UART_AdvFeatureConfig+0x150>)
 80033d0:	4013      	ands	r3, r2
 80033d2:	0019      	movs	r1, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e4:	2210      	movs	r2, #16
 80033e6:	4013      	ands	r3, r2
 80033e8:	d00b      	beq.n	8003402 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	4a2c      	ldr	r2, [pc, #176]	@ (80034a4 <UART_AdvFeatureConfig+0x154>)
 80033f2:	4013      	ands	r3, r2
 80033f4:	0019      	movs	r1, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003406:	2220      	movs	r2, #32
 8003408:	4013      	ands	r3, r2
 800340a:	d00b      	beq.n	8003424 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	4a25      	ldr	r2, [pc, #148]	@ (80034a8 <UART_AdvFeatureConfig+0x158>)
 8003414:	4013      	ands	r3, r2
 8003416:	0019      	movs	r1, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	430a      	orrs	r2, r1
 8003422:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003428:	2240      	movs	r2, #64	@ 0x40
 800342a:	4013      	ands	r3, r2
 800342c:	d01d      	beq.n	800346a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	4a1d      	ldr	r2, [pc, #116]	@ (80034ac <UART_AdvFeatureConfig+0x15c>)
 8003436:	4013      	ands	r3, r2
 8003438:	0019      	movs	r1, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800344a:	2380      	movs	r3, #128	@ 0x80
 800344c:	035b      	lsls	r3, r3, #13
 800344e:	429a      	cmp	r2, r3
 8003450:	d10b      	bne.n	800346a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	4a15      	ldr	r2, [pc, #84]	@ (80034b0 <UART_AdvFeatureConfig+0x160>)
 800345a:	4013      	ands	r3, r2
 800345c:	0019      	movs	r1, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800346e:	2280      	movs	r2, #128	@ 0x80
 8003470:	4013      	ands	r3, r2
 8003472:	d00b      	beq.n	800348c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	4a0e      	ldr	r2, [pc, #56]	@ (80034b4 <UART_AdvFeatureConfig+0x164>)
 800347c:	4013      	ands	r3, r2
 800347e:	0019      	movs	r1, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	605a      	str	r2, [r3, #4]
  }
}
 800348c:	46c0      	nop			@ (mov r8, r8)
 800348e:	46bd      	mov	sp, r7
 8003490:	b002      	add	sp, #8
 8003492:	bd80      	pop	{r7, pc}
 8003494:	ffff7fff 	.word	0xffff7fff
 8003498:	fffdffff 	.word	0xfffdffff
 800349c:	fffeffff 	.word	0xfffeffff
 80034a0:	fffbffff 	.word	0xfffbffff
 80034a4:	ffffefff 	.word	0xffffefff
 80034a8:	ffffdfff 	.word	0xffffdfff
 80034ac:	ffefffff 	.word	0xffefffff
 80034b0:	ff9fffff 	.word	0xff9fffff
 80034b4:	fff7ffff 	.word	0xfff7ffff

080034b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b092      	sub	sp, #72	@ 0x48
 80034bc:	af02      	add	r7, sp, #8
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2290      	movs	r2, #144	@ 0x90
 80034c4:	2100      	movs	r1, #0
 80034c6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034c8:	f7fd fa62 	bl	8000990 <HAL_GetTick>
 80034cc:	0003      	movs	r3, r0
 80034ce:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2208      	movs	r2, #8
 80034d8:	4013      	ands	r3, r2
 80034da:	2b08      	cmp	r3, #8
 80034dc:	d12d      	bne.n	800353a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034e0:	2280      	movs	r2, #128	@ 0x80
 80034e2:	0391      	lsls	r1, r2, #14
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	4a47      	ldr	r2, [pc, #284]	@ (8003604 <UART_CheckIdleState+0x14c>)
 80034e8:	9200      	str	r2, [sp, #0]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f000 f88e 	bl	800360c <UART_WaitOnFlagUntilTimeout>
 80034f0:	1e03      	subs	r3, r0, #0
 80034f2:	d022      	beq.n	800353a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80034f4:	f3ef 8310 	mrs	r3, PRIMASK
 80034f8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80034fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80034fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80034fe:	2301      	movs	r3, #1
 8003500:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003504:	f383 8810 	msr	PRIMASK, r3
}
 8003508:	46c0      	nop			@ (mov r8, r8)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2180      	movs	r1, #128	@ 0x80
 8003516:	438a      	bics	r2, r1
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800351c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800351e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003520:	f383 8810 	msr	PRIMASK, r3
}
 8003524:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2288      	movs	r2, #136	@ 0x88
 800352a:	2120      	movs	r1, #32
 800352c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2284      	movs	r2, #132	@ 0x84
 8003532:	2100      	movs	r1, #0
 8003534:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e060      	b.n	80035fc <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2204      	movs	r2, #4
 8003542:	4013      	ands	r3, r2
 8003544:	2b04      	cmp	r3, #4
 8003546:	d146      	bne.n	80035d6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003548:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800354a:	2280      	movs	r2, #128	@ 0x80
 800354c:	03d1      	lsls	r1, r2, #15
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	4a2c      	ldr	r2, [pc, #176]	@ (8003604 <UART_CheckIdleState+0x14c>)
 8003552:	9200      	str	r2, [sp, #0]
 8003554:	2200      	movs	r2, #0
 8003556:	f000 f859 	bl	800360c <UART_WaitOnFlagUntilTimeout>
 800355a:	1e03      	subs	r3, r0, #0
 800355c:	d03b      	beq.n	80035d6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800355e:	f3ef 8310 	mrs	r3, PRIMASK
 8003562:	60fb      	str	r3, [r7, #12]
  return(result);
 8003564:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003566:	637b      	str	r3, [r7, #52]	@ 0x34
 8003568:	2301      	movs	r3, #1
 800356a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	f383 8810 	msr	PRIMASK, r3
}
 8003572:	46c0      	nop			@ (mov r8, r8)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4922      	ldr	r1, [pc, #136]	@ (8003608 <UART_CheckIdleState+0x150>)
 8003580:	400a      	ands	r2, r1
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003586:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	f383 8810 	msr	PRIMASK, r3
}
 800358e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003590:	f3ef 8310 	mrs	r3, PRIMASK
 8003594:	61bb      	str	r3, [r7, #24]
  return(result);
 8003596:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003598:	633b      	str	r3, [r7, #48]	@ 0x30
 800359a:	2301      	movs	r3, #1
 800359c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	f383 8810 	msr	PRIMASK, r3
}
 80035a4:	46c0      	nop			@ (mov r8, r8)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2101      	movs	r1, #1
 80035b2:	438a      	bics	r2, r1
 80035b4:	609a      	str	r2, [r3, #8]
 80035b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ba:	6a3b      	ldr	r3, [r7, #32]
 80035bc:	f383 8810 	msr	PRIMASK, r3
}
 80035c0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	228c      	movs	r2, #140	@ 0x8c
 80035c6:	2120      	movs	r1, #32
 80035c8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2284      	movs	r2, #132	@ 0x84
 80035ce:	2100      	movs	r1, #0
 80035d0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e012      	b.n	80035fc <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2288      	movs	r2, #136	@ 0x88
 80035da:	2120      	movs	r1, #32
 80035dc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	228c      	movs	r2, #140	@ 0x8c
 80035e2:	2120      	movs	r1, #32
 80035e4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2284      	movs	r2, #132	@ 0x84
 80035f6:	2100      	movs	r1, #0
 80035f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	0018      	movs	r0, r3
 80035fe:	46bd      	mov	sp, r7
 8003600:	b010      	add	sp, #64	@ 0x40
 8003602:	bd80      	pop	{r7, pc}
 8003604:	01ffffff 	.word	0x01ffffff
 8003608:	fffffedf 	.word	0xfffffedf

0800360c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	603b      	str	r3, [r7, #0]
 8003618:	1dfb      	adds	r3, r7, #7
 800361a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800361c:	e04b      	b.n	80036b6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	3301      	adds	r3, #1
 8003622:	d048      	beq.n	80036b6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003624:	f7fd f9b4 	bl	8000990 <HAL_GetTick>
 8003628:	0002      	movs	r2, r0
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	429a      	cmp	r2, r3
 8003632:	d302      	bcc.n	800363a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e04b      	b.n	80036d6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2204      	movs	r2, #4
 8003646:	4013      	ands	r3, r2
 8003648:	d035      	beq.n	80036b6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	69db      	ldr	r3, [r3, #28]
 8003650:	2208      	movs	r2, #8
 8003652:	4013      	ands	r3, r2
 8003654:	2b08      	cmp	r3, #8
 8003656:	d111      	bne.n	800367c <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2208      	movs	r2, #8
 800365e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	0018      	movs	r0, r3
 8003664:	f000 f83c 	bl	80036e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2290      	movs	r2, #144	@ 0x90
 800366c:	2108      	movs	r1, #8
 800366e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2284      	movs	r2, #132	@ 0x84
 8003674:	2100      	movs	r1, #0
 8003676:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e02c      	b.n	80036d6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	69da      	ldr	r2, [r3, #28]
 8003682:	2380      	movs	r3, #128	@ 0x80
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	401a      	ands	r2, r3
 8003688:	2380      	movs	r3, #128	@ 0x80
 800368a:	011b      	lsls	r3, r3, #4
 800368c:	429a      	cmp	r2, r3
 800368e:	d112      	bne.n	80036b6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2280      	movs	r2, #128	@ 0x80
 8003696:	0112      	lsls	r2, r2, #4
 8003698:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	0018      	movs	r0, r3
 800369e:	f000 f81f 	bl	80036e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2290      	movs	r2, #144	@ 0x90
 80036a6:	2120      	movs	r1, #32
 80036a8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2284      	movs	r2, #132	@ 0x84
 80036ae:	2100      	movs	r1, #0
 80036b0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e00f      	b.n	80036d6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	69db      	ldr	r3, [r3, #28]
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	4013      	ands	r3, r2
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	425a      	negs	r2, r3
 80036c6:	4153      	adcs	r3, r2
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	001a      	movs	r2, r3
 80036cc:	1dfb      	adds	r3, r7, #7
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d0a4      	beq.n	800361e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	0018      	movs	r0, r3
 80036d8:	46bd      	mov	sp, r7
 80036da:	b004      	add	sp, #16
 80036dc:	bd80      	pop	{r7, pc}
	...

080036e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08e      	sub	sp, #56	@ 0x38
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80036e8:	f3ef 8310 	mrs	r3, PRIMASK
 80036ec:	617b      	str	r3, [r7, #20]
  return(result);
 80036ee:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80036f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80036f2:	2301      	movs	r3, #1
 80036f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	f383 8810 	msr	PRIMASK, r3
}
 80036fc:	46c0      	nop			@ (mov r8, r8)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4926      	ldr	r1, [pc, #152]	@ (80037a4 <UART_EndRxTransfer+0xc4>)
 800370a:	400a      	ands	r2, r1
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003710:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	f383 8810 	msr	PRIMASK, r3
}
 8003718:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800371a:	f3ef 8310 	mrs	r3, PRIMASK
 800371e:	623b      	str	r3, [r7, #32]
  return(result);
 8003720:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003722:	633b      	str	r3, [r7, #48]	@ 0x30
 8003724:	2301      	movs	r3, #1
 8003726:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372a:	f383 8810 	msr	PRIMASK, r3
}
 800372e:	46c0      	nop			@ (mov r8, r8)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	491b      	ldr	r1, [pc, #108]	@ (80037a8 <UART_EndRxTransfer+0xc8>)
 800373c:	400a      	ands	r2, r1
 800373e:	609a      	str	r2, [r3, #8]
 8003740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003742:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003746:	f383 8810 	msr	PRIMASK, r3
}
 800374a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003750:	2b01      	cmp	r3, #1
 8003752:	d118      	bne.n	8003786 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003754:	f3ef 8310 	mrs	r3, PRIMASK
 8003758:	60bb      	str	r3, [r7, #8]
  return(result);
 800375a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800375c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800375e:	2301      	movs	r3, #1
 8003760:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f383 8810 	msr	PRIMASK, r3
}
 8003768:	46c0      	nop			@ (mov r8, r8)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2110      	movs	r1, #16
 8003776:	438a      	bics	r2, r1
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800377c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	f383 8810 	msr	PRIMASK, r3
}
 8003784:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	228c      	movs	r2, #140	@ 0x8c
 800378a:	2120      	movs	r1, #32
 800378c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800379a:	46c0      	nop			@ (mov r8, r8)
 800379c:	46bd      	mov	sp, r7
 800379e:	b00e      	add	sp, #56	@ 0x38
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	46c0      	nop			@ (mov r8, r8)
 80037a4:	fffffedf 	.word	0xfffffedf
 80037a8:	effffffe 	.word	0xeffffffe

080037ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	225e      	movs	r2, #94	@ 0x5e
 80037be:	2100      	movs	r1, #0
 80037c0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2256      	movs	r2, #86	@ 0x56
 80037c6:	2100      	movs	r1, #0
 80037c8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	0018      	movs	r0, r3
 80037ce:	f7ff fc2d 	bl	800302c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037d2:	46c0      	nop			@ (mov r8, r8)
 80037d4:	46bd      	mov	sp, r7
 80037d6:	b004      	add	sp, #16
 80037d8:	bd80      	pop	{r7, pc}

080037da <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b086      	sub	sp, #24
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80037e2:	f3ef 8310 	mrs	r3, PRIMASK
 80037e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80037e8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80037ea:	617b      	str	r3, [r7, #20]
 80037ec:	2301      	movs	r3, #1
 80037ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f383 8810 	msr	PRIMASK, r3
}
 80037f6:	46c0      	nop			@ (mov r8, r8)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2140      	movs	r1, #64	@ 0x40
 8003804:	438a      	bics	r2, r1
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	f383 8810 	msr	PRIMASK, r3
}
 8003812:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2288      	movs	r2, #136	@ 0x88
 8003818:	2120      	movs	r1, #32
 800381a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	0018      	movs	r0, r3
 8003826:	f7ff fbf9 	bl	800301c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800382a:	46c0      	nop			@ (mov r8, r8)
 800382c:	46bd      	mov	sp, r7
 800382e:	b006      	add	sp, #24
 8003830:	bd80      	pop	{r7, pc}

08003832 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b082      	sub	sp, #8
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800383a:	46c0      	nop			@ (mov r8, r8)
 800383c:	46bd      	mov	sp, r7
 800383e:	b002      	add	sp, #8
 8003840:	bd80      	pop	{r7, pc}

08003842 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b082      	sub	sp, #8
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800384a:	46c0      	nop			@ (mov r8, r8)
 800384c:	46bd      	mov	sp, r7
 800384e:	b002      	add	sp, #8
 8003850:	bd80      	pop	{r7, pc}

08003852 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b082      	sub	sp, #8
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800385a:	46c0      	nop			@ (mov r8, r8)
 800385c:	46bd      	mov	sp, r7
 800385e:	b002      	add	sp, #8
 8003860:	bd80      	pop	{r7, pc}
	...

08003864 <std>:
 8003864:	2300      	movs	r3, #0
 8003866:	b510      	push	{r4, lr}
 8003868:	0004      	movs	r4, r0
 800386a:	6003      	str	r3, [r0, #0]
 800386c:	6043      	str	r3, [r0, #4]
 800386e:	6083      	str	r3, [r0, #8]
 8003870:	8181      	strh	r1, [r0, #12]
 8003872:	6643      	str	r3, [r0, #100]	@ 0x64
 8003874:	81c2      	strh	r2, [r0, #14]
 8003876:	6103      	str	r3, [r0, #16]
 8003878:	6143      	str	r3, [r0, #20]
 800387a:	6183      	str	r3, [r0, #24]
 800387c:	0019      	movs	r1, r3
 800387e:	2208      	movs	r2, #8
 8003880:	305c      	adds	r0, #92	@ 0x5c
 8003882:	f000 f9ff 	bl	8003c84 <memset>
 8003886:	4b0b      	ldr	r3, [pc, #44]	@ (80038b4 <std+0x50>)
 8003888:	6224      	str	r4, [r4, #32]
 800388a:	6263      	str	r3, [r4, #36]	@ 0x24
 800388c:	4b0a      	ldr	r3, [pc, #40]	@ (80038b8 <std+0x54>)
 800388e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003890:	4b0a      	ldr	r3, [pc, #40]	@ (80038bc <std+0x58>)
 8003892:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003894:	4b0a      	ldr	r3, [pc, #40]	@ (80038c0 <std+0x5c>)
 8003896:	6323      	str	r3, [r4, #48]	@ 0x30
 8003898:	4b0a      	ldr	r3, [pc, #40]	@ (80038c4 <std+0x60>)
 800389a:	429c      	cmp	r4, r3
 800389c:	d005      	beq.n	80038aa <std+0x46>
 800389e:	4b0a      	ldr	r3, [pc, #40]	@ (80038c8 <std+0x64>)
 80038a0:	429c      	cmp	r4, r3
 80038a2:	d002      	beq.n	80038aa <std+0x46>
 80038a4:	4b09      	ldr	r3, [pc, #36]	@ (80038cc <std+0x68>)
 80038a6:	429c      	cmp	r4, r3
 80038a8:	d103      	bne.n	80038b2 <std+0x4e>
 80038aa:	0020      	movs	r0, r4
 80038ac:	3058      	adds	r0, #88	@ 0x58
 80038ae:	f000 fa69 	bl	8003d84 <__retarget_lock_init_recursive>
 80038b2:	bd10      	pop	{r4, pc}
 80038b4:	08003aad 	.word	0x08003aad
 80038b8:	08003ad5 	.word	0x08003ad5
 80038bc:	08003b0d 	.word	0x08003b0d
 80038c0:	08003b39 	.word	0x08003b39
 80038c4:	20000174 	.word	0x20000174
 80038c8:	200001dc 	.word	0x200001dc
 80038cc:	20000244 	.word	0x20000244

080038d0 <stdio_exit_handler>:
 80038d0:	b510      	push	{r4, lr}
 80038d2:	4a03      	ldr	r2, [pc, #12]	@ (80038e0 <stdio_exit_handler+0x10>)
 80038d4:	4903      	ldr	r1, [pc, #12]	@ (80038e4 <stdio_exit_handler+0x14>)
 80038d6:	4804      	ldr	r0, [pc, #16]	@ (80038e8 <stdio_exit_handler+0x18>)
 80038d8:	f000 f86c 	bl	80039b4 <_fwalk_sglue>
 80038dc:	bd10      	pop	{r4, pc}
 80038de:	46c0      	nop			@ (mov r8, r8)
 80038e0:	2000000c 	.word	0x2000000c
 80038e4:	08004091 	.word	0x08004091
 80038e8:	2000001c 	.word	0x2000001c

080038ec <cleanup_stdio>:
 80038ec:	6841      	ldr	r1, [r0, #4]
 80038ee:	4b0b      	ldr	r3, [pc, #44]	@ (800391c <cleanup_stdio+0x30>)
 80038f0:	b510      	push	{r4, lr}
 80038f2:	0004      	movs	r4, r0
 80038f4:	4299      	cmp	r1, r3
 80038f6:	d001      	beq.n	80038fc <cleanup_stdio+0x10>
 80038f8:	f000 fbca 	bl	8004090 <_fflush_r>
 80038fc:	68a1      	ldr	r1, [r4, #8]
 80038fe:	4b08      	ldr	r3, [pc, #32]	@ (8003920 <cleanup_stdio+0x34>)
 8003900:	4299      	cmp	r1, r3
 8003902:	d002      	beq.n	800390a <cleanup_stdio+0x1e>
 8003904:	0020      	movs	r0, r4
 8003906:	f000 fbc3 	bl	8004090 <_fflush_r>
 800390a:	68e1      	ldr	r1, [r4, #12]
 800390c:	4b05      	ldr	r3, [pc, #20]	@ (8003924 <cleanup_stdio+0x38>)
 800390e:	4299      	cmp	r1, r3
 8003910:	d002      	beq.n	8003918 <cleanup_stdio+0x2c>
 8003912:	0020      	movs	r0, r4
 8003914:	f000 fbbc 	bl	8004090 <_fflush_r>
 8003918:	bd10      	pop	{r4, pc}
 800391a:	46c0      	nop			@ (mov r8, r8)
 800391c:	20000174 	.word	0x20000174
 8003920:	200001dc 	.word	0x200001dc
 8003924:	20000244 	.word	0x20000244

08003928 <global_stdio_init.part.0>:
 8003928:	b510      	push	{r4, lr}
 800392a:	4b09      	ldr	r3, [pc, #36]	@ (8003950 <global_stdio_init.part.0+0x28>)
 800392c:	4a09      	ldr	r2, [pc, #36]	@ (8003954 <global_stdio_init.part.0+0x2c>)
 800392e:	2104      	movs	r1, #4
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	4809      	ldr	r0, [pc, #36]	@ (8003958 <global_stdio_init.part.0+0x30>)
 8003934:	2200      	movs	r2, #0
 8003936:	f7ff ff95 	bl	8003864 <std>
 800393a:	2201      	movs	r2, #1
 800393c:	2109      	movs	r1, #9
 800393e:	4807      	ldr	r0, [pc, #28]	@ (800395c <global_stdio_init.part.0+0x34>)
 8003940:	f7ff ff90 	bl	8003864 <std>
 8003944:	2202      	movs	r2, #2
 8003946:	2112      	movs	r1, #18
 8003948:	4805      	ldr	r0, [pc, #20]	@ (8003960 <global_stdio_init.part.0+0x38>)
 800394a:	f7ff ff8b 	bl	8003864 <std>
 800394e:	bd10      	pop	{r4, pc}
 8003950:	200002ac 	.word	0x200002ac
 8003954:	080038d1 	.word	0x080038d1
 8003958:	20000174 	.word	0x20000174
 800395c:	200001dc 	.word	0x200001dc
 8003960:	20000244 	.word	0x20000244

08003964 <__sfp_lock_acquire>:
 8003964:	b510      	push	{r4, lr}
 8003966:	4802      	ldr	r0, [pc, #8]	@ (8003970 <__sfp_lock_acquire+0xc>)
 8003968:	f000 fa0d 	bl	8003d86 <__retarget_lock_acquire_recursive>
 800396c:	bd10      	pop	{r4, pc}
 800396e:	46c0      	nop			@ (mov r8, r8)
 8003970:	200002b5 	.word	0x200002b5

08003974 <__sfp_lock_release>:
 8003974:	b510      	push	{r4, lr}
 8003976:	4802      	ldr	r0, [pc, #8]	@ (8003980 <__sfp_lock_release+0xc>)
 8003978:	f000 fa06 	bl	8003d88 <__retarget_lock_release_recursive>
 800397c:	bd10      	pop	{r4, pc}
 800397e:	46c0      	nop			@ (mov r8, r8)
 8003980:	200002b5 	.word	0x200002b5

08003984 <__sinit>:
 8003984:	b510      	push	{r4, lr}
 8003986:	0004      	movs	r4, r0
 8003988:	f7ff ffec 	bl	8003964 <__sfp_lock_acquire>
 800398c:	6a23      	ldr	r3, [r4, #32]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d002      	beq.n	8003998 <__sinit+0x14>
 8003992:	f7ff ffef 	bl	8003974 <__sfp_lock_release>
 8003996:	bd10      	pop	{r4, pc}
 8003998:	4b04      	ldr	r3, [pc, #16]	@ (80039ac <__sinit+0x28>)
 800399a:	6223      	str	r3, [r4, #32]
 800399c:	4b04      	ldr	r3, [pc, #16]	@ (80039b0 <__sinit+0x2c>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1f6      	bne.n	8003992 <__sinit+0xe>
 80039a4:	f7ff ffc0 	bl	8003928 <global_stdio_init.part.0>
 80039a8:	e7f3      	b.n	8003992 <__sinit+0xe>
 80039aa:	46c0      	nop			@ (mov r8, r8)
 80039ac:	080038ed 	.word	0x080038ed
 80039b0:	200002ac 	.word	0x200002ac

080039b4 <_fwalk_sglue>:
 80039b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039b6:	0014      	movs	r4, r2
 80039b8:	2600      	movs	r6, #0
 80039ba:	9000      	str	r0, [sp, #0]
 80039bc:	9101      	str	r1, [sp, #4]
 80039be:	68a5      	ldr	r5, [r4, #8]
 80039c0:	6867      	ldr	r7, [r4, #4]
 80039c2:	3f01      	subs	r7, #1
 80039c4:	d504      	bpl.n	80039d0 <_fwalk_sglue+0x1c>
 80039c6:	6824      	ldr	r4, [r4, #0]
 80039c8:	2c00      	cmp	r4, #0
 80039ca:	d1f8      	bne.n	80039be <_fwalk_sglue+0xa>
 80039cc:	0030      	movs	r0, r6
 80039ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80039d0:	89ab      	ldrh	r3, [r5, #12]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d908      	bls.n	80039e8 <_fwalk_sglue+0x34>
 80039d6:	220e      	movs	r2, #14
 80039d8:	5eab      	ldrsh	r3, [r5, r2]
 80039da:	3301      	adds	r3, #1
 80039dc:	d004      	beq.n	80039e8 <_fwalk_sglue+0x34>
 80039de:	0029      	movs	r1, r5
 80039e0:	9800      	ldr	r0, [sp, #0]
 80039e2:	9b01      	ldr	r3, [sp, #4]
 80039e4:	4798      	blx	r3
 80039e6:	4306      	orrs	r6, r0
 80039e8:	3568      	adds	r5, #104	@ 0x68
 80039ea:	e7ea      	b.n	80039c2 <_fwalk_sglue+0xe>

080039ec <_puts_r>:
 80039ec:	6a03      	ldr	r3, [r0, #32]
 80039ee:	b570      	push	{r4, r5, r6, lr}
 80039f0:	0005      	movs	r5, r0
 80039f2:	000e      	movs	r6, r1
 80039f4:	6884      	ldr	r4, [r0, #8]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <_puts_r+0x12>
 80039fa:	f7ff ffc3 	bl	8003984 <__sinit>
 80039fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003a00:	07db      	lsls	r3, r3, #31
 8003a02:	d405      	bmi.n	8003a10 <_puts_r+0x24>
 8003a04:	89a3      	ldrh	r3, [r4, #12]
 8003a06:	059b      	lsls	r3, r3, #22
 8003a08:	d402      	bmi.n	8003a10 <_puts_r+0x24>
 8003a0a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a0c:	f000 f9bb 	bl	8003d86 <__retarget_lock_acquire_recursive>
 8003a10:	89a3      	ldrh	r3, [r4, #12]
 8003a12:	071b      	lsls	r3, r3, #28
 8003a14:	d502      	bpl.n	8003a1c <_puts_r+0x30>
 8003a16:	6923      	ldr	r3, [r4, #16]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d11f      	bne.n	8003a5c <_puts_r+0x70>
 8003a1c:	0021      	movs	r1, r4
 8003a1e:	0028      	movs	r0, r5
 8003a20:	f000 f8d2 	bl	8003bc8 <__swsetup_r>
 8003a24:	2800      	cmp	r0, #0
 8003a26:	d019      	beq.n	8003a5c <_puts_r+0x70>
 8003a28:	2501      	movs	r5, #1
 8003a2a:	426d      	negs	r5, r5
 8003a2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003a2e:	07db      	lsls	r3, r3, #31
 8003a30:	d405      	bmi.n	8003a3e <_puts_r+0x52>
 8003a32:	89a3      	ldrh	r3, [r4, #12]
 8003a34:	059b      	lsls	r3, r3, #22
 8003a36:	d402      	bmi.n	8003a3e <_puts_r+0x52>
 8003a38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a3a:	f000 f9a5 	bl	8003d88 <__retarget_lock_release_recursive>
 8003a3e:	0028      	movs	r0, r5
 8003a40:	bd70      	pop	{r4, r5, r6, pc}
 8003a42:	3601      	adds	r6, #1
 8003a44:	60a3      	str	r3, [r4, #8]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	da04      	bge.n	8003a54 <_puts_r+0x68>
 8003a4a:	69a2      	ldr	r2, [r4, #24]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	dc16      	bgt.n	8003a7e <_puts_r+0x92>
 8003a50:	290a      	cmp	r1, #10
 8003a52:	d014      	beq.n	8003a7e <_puts_r+0x92>
 8003a54:	6823      	ldr	r3, [r4, #0]
 8003a56:	1c5a      	adds	r2, r3, #1
 8003a58:	6022      	str	r2, [r4, #0]
 8003a5a:	7019      	strb	r1, [r3, #0]
 8003a5c:	68a3      	ldr	r3, [r4, #8]
 8003a5e:	7831      	ldrb	r1, [r6, #0]
 8003a60:	3b01      	subs	r3, #1
 8003a62:	2900      	cmp	r1, #0
 8003a64:	d1ed      	bne.n	8003a42 <_puts_r+0x56>
 8003a66:	60a3      	str	r3, [r4, #8]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	da0f      	bge.n	8003a8c <_puts_r+0xa0>
 8003a6c:	0022      	movs	r2, r4
 8003a6e:	0028      	movs	r0, r5
 8003a70:	310a      	adds	r1, #10
 8003a72:	f000 f867 	bl	8003b44 <__swbuf_r>
 8003a76:	3001      	adds	r0, #1
 8003a78:	d0d6      	beq.n	8003a28 <_puts_r+0x3c>
 8003a7a:	250a      	movs	r5, #10
 8003a7c:	e7d6      	b.n	8003a2c <_puts_r+0x40>
 8003a7e:	0022      	movs	r2, r4
 8003a80:	0028      	movs	r0, r5
 8003a82:	f000 f85f 	bl	8003b44 <__swbuf_r>
 8003a86:	3001      	adds	r0, #1
 8003a88:	d1e8      	bne.n	8003a5c <_puts_r+0x70>
 8003a8a:	e7cd      	b.n	8003a28 <_puts_r+0x3c>
 8003a8c:	6823      	ldr	r3, [r4, #0]
 8003a8e:	1c5a      	adds	r2, r3, #1
 8003a90:	6022      	str	r2, [r4, #0]
 8003a92:	220a      	movs	r2, #10
 8003a94:	701a      	strb	r2, [r3, #0]
 8003a96:	e7f0      	b.n	8003a7a <_puts_r+0x8e>

08003a98 <puts>:
 8003a98:	b510      	push	{r4, lr}
 8003a9a:	4b03      	ldr	r3, [pc, #12]	@ (8003aa8 <puts+0x10>)
 8003a9c:	0001      	movs	r1, r0
 8003a9e:	6818      	ldr	r0, [r3, #0]
 8003aa0:	f7ff ffa4 	bl	80039ec <_puts_r>
 8003aa4:	bd10      	pop	{r4, pc}
 8003aa6:	46c0      	nop			@ (mov r8, r8)
 8003aa8:	20000018 	.word	0x20000018

08003aac <__sread>:
 8003aac:	b570      	push	{r4, r5, r6, lr}
 8003aae:	000c      	movs	r4, r1
 8003ab0:	250e      	movs	r5, #14
 8003ab2:	5f49      	ldrsh	r1, [r1, r5]
 8003ab4:	f000 f914 	bl	8003ce0 <_read_r>
 8003ab8:	2800      	cmp	r0, #0
 8003aba:	db03      	blt.n	8003ac4 <__sread+0x18>
 8003abc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003abe:	181b      	adds	r3, r3, r0
 8003ac0:	6563      	str	r3, [r4, #84]	@ 0x54
 8003ac2:	bd70      	pop	{r4, r5, r6, pc}
 8003ac4:	89a3      	ldrh	r3, [r4, #12]
 8003ac6:	4a02      	ldr	r2, [pc, #8]	@ (8003ad0 <__sread+0x24>)
 8003ac8:	4013      	ands	r3, r2
 8003aca:	81a3      	strh	r3, [r4, #12]
 8003acc:	e7f9      	b.n	8003ac2 <__sread+0x16>
 8003ace:	46c0      	nop			@ (mov r8, r8)
 8003ad0:	ffffefff 	.word	0xffffefff

08003ad4 <__swrite>:
 8003ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ad6:	001f      	movs	r7, r3
 8003ad8:	898b      	ldrh	r3, [r1, #12]
 8003ada:	0005      	movs	r5, r0
 8003adc:	000c      	movs	r4, r1
 8003ade:	0016      	movs	r6, r2
 8003ae0:	05db      	lsls	r3, r3, #23
 8003ae2:	d505      	bpl.n	8003af0 <__swrite+0x1c>
 8003ae4:	230e      	movs	r3, #14
 8003ae6:	5ec9      	ldrsh	r1, [r1, r3]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	2302      	movs	r3, #2
 8003aec:	f000 f8e4 	bl	8003cb8 <_lseek_r>
 8003af0:	89a3      	ldrh	r3, [r4, #12]
 8003af2:	4a05      	ldr	r2, [pc, #20]	@ (8003b08 <__swrite+0x34>)
 8003af4:	0028      	movs	r0, r5
 8003af6:	4013      	ands	r3, r2
 8003af8:	81a3      	strh	r3, [r4, #12]
 8003afa:	0032      	movs	r2, r6
 8003afc:	230e      	movs	r3, #14
 8003afe:	5ee1      	ldrsh	r1, [r4, r3]
 8003b00:	003b      	movs	r3, r7
 8003b02:	f000 f901 	bl	8003d08 <_write_r>
 8003b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b08:	ffffefff 	.word	0xffffefff

08003b0c <__sseek>:
 8003b0c:	b570      	push	{r4, r5, r6, lr}
 8003b0e:	000c      	movs	r4, r1
 8003b10:	250e      	movs	r5, #14
 8003b12:	5f49      	ldrsh	r1, [r1, r5]
 8003b14:	f000 f8d0 	bl	8003cb8 <_lseek_r>
 8003b18:	89a3      	ldrh	r3, [r4, #12]
 8003b1a:	1c42      	adds	r2, r0, #1
 8003b1c:	d103      	bne.n	8003b26 <__sseek+0x1a>
 8003b1e:	4a05      	ldr	r2, [pc, #20]	@ (8003b34 <__sseek+0x28>)
 8003b20:	4013      	ands	r3, r2
 8003b22:	81a3      	strh	r3, [r4, #12]
 8003b24:	bd70      	pop	{r4, r5, r6, pc}
 8003b26:	2280      	movs	r2, #128	@ 0x80
 8003b28:	0152      	lsls	r2, r2, #5
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	81a3      	strh	r3, [r4, #12]
 8003b2e:	6560      	str	r0, [r4, #84]	@ 0x54
 8003b30:	e7f8      	b.n	8003b24 <__sseek+0x18>
 8003b32:	46c0      	nop			@ (mov r8, r8)
 8003b34:	ffffefff 	.word	0xffffefff

08003b38 <__sclose>:
 8003b38:	b510      	push	{r4, lr}
 8003b3a:	230e      	movs	r3, #14
 8003b3c:	5ec9      	ldrsh	r1, [r1, r3]
 8003b3e:	f000 f8a9 	bl	8003c94 <_close_r>
 8003b42:	bd10      	pop	{r4, pc}

08003b44 <__swbuf_r>:
 8003b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b46:	0006      	movs	r6, r0
 8003b48:	000d      	movs	r5, r1
 8003b4a:	0014      	movs	r4, r2
 8003b4c:	2800      	cmp	r0, #0
 8003b4e:	d004      	beq.n	8003b5a <__swbuf_r+0x16>
 8003b50:	6a03      	ldr	r3, [r0, #32]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <__swbuf_r+0x16>
 8003b56:	f7ff ff15 	bl	8003984 <__sinit>
 8003b5a:	69a3      	ldr	r3, [r4, #24]
 8003b5c:	60a3      	str	r3, [r4, #8]
 8003b5e:	89a3      	ldrh	r3, [r4, #12]
 8003b60:	071b      	lsls	r3, r3, #28
 8003b62:	d502      	bpl.n	8003b6a <__swbuf_r+0x26>
 8003b64:	6923      	ldr	r3, [r4, #16]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d109      	bne.n	8003b7e <__swbuf_r+0x3a>
 8003b6a:	0021      	movs	r1, r4
 8003b6c:	0030      	movs	r0, r6
 8003b6e:	f000 f82b 	bl	8003bc8 <__swsetup_r>
 8003b72:	2800      	cmp	r0, #0
 8003b74:	d003      	beq.n	8003b7e <__swbuf_r+0x3a>
 8003b76:	2501      	movs	r5, #1
 8003b78:	426d      	negs	r5, r5
 8003b7a:	0028      	movs	r0, r5
 8003b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b7e:	6923      	ldr	r3, [r4, #16]
 8003b80:	6820      	ldr	r0, [r4, #0]
 8003b82:	b2ef      	uxtb	r7, r5
 8003b84:	1ac0      	subs	r0, r0, r3
 8003b86:	6963      	ldr	r3, [r4, #20]
 8003b88:	b2ed      	uxtb	r5, r5
 8003b8a:	4283      	cmp	r3, r0
 8003b8c:	dc05      	bgt.n	8003b9a <__swbuf_r+0x56>
 8003b8e:	0021      	movs	r1, r4
 8003b90:	0030      	movs	r0, r6
 8003b92:	f000 fa7d 	bl	8004090 <_fflush_r>
 8003b96:	2800      	cmp	r0, #0
 8003b98:	d1ed      	bne.n	8003b76 <__swbuf_r+0x32>
 8003b9a:	68a3      	ldr	r3, [r4, #8]
 8003b9c:	3001      	adds	r0, #1
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	60a3      	str	r3, [r4, #8]
 8003ba2:	6823      	ldr	r3, [r4, #0]
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	6022      	str	r2, [r4, #0]
 8003ba8:	701f      	strb	r7, [r3, #0]
 8003baa:	6963      	ldr	r3, [r4, #20]
 8003bac:	4283      	cmp	r3, r0
 8003bae:	d004      	beq.n	8003bba <__swbuf_r+0x76>
 8003bb0:	89a3      	ldrh	r3, [r4, #12]
 8003bb2:	07db      	lsls	r3, r3, #31
 8003bb4:	d5e1      	bpl.n	8003b7a <__swbuf_r+0x36>
 8003bb6:	2d0a      	cmp	r5, #10
 8003bb8:	d1df      	bne.n	8003b7a <__swbuf_r+0x36>
 8003bba:	0021      	movs	r1, r4
 8003bbc:	0030      	movs	r0, r6
 8003bbe:	f000 fa67 	bl	8004090 <_fflush_r>
 8003bc2:	2800      	cmp	r0, #0
 8003bc4:	d0d9      	beq.n	8003b7a <__swbuf_r+0x36>
 8003bc6:	e7d6      	b.n	8003b76 <__swbuf_r+0x32>

08003bc8 <__swsetup_r>:
 8003bc8:	4b2d      	ldr	r3, [pc, #180]	@ (8003c80 <__swsetup_r+0xb8>)
 8003bca:	b570      	push	{r4, r5, r6, lr}
 8003bcc:	0005      	movs	r5, r0
 8003bce:	6818      	ldr	r0, [r3, #0]
 8003bd0:	000c      	movs	r4, r1
 8003bd2:	2800      	cmp	r0, #0
 8003bd4:	d004      	beq.n	8003be0 <__swsetup_r+0x18>
 8003bd6:	6a03      	ldr	r3, [r0, #32]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <__swsetup_r+0x18>
 8003bdc:	f7ff fed2 	bl	8003984 <__sinit>
 8003be0:	230c      	movs	r3, #12
 8003be2:	5ee2      	ldrsh	r2, [r4, r3]
 8003be4:	0713      	lsls	r3, r2, #28
 8003be6:	d423      	bmi.n	8003c30 <__swsetup_r+0x68>
 8003be8:	06d3      	lsls	r3, r2, #27
 8003bea:	d407      	bmi.n	8003bfc <__swsetup_r+0x34>
 8003bec:	2309      	movs	r3, #9
 8003bee:	602b      	str	r3, [r5, #0]
 8003bf0:	2340      	movs	r3, #64	@ 0x40
 8003bf2:	2001      	movs	r0, #1
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	81a3      	strh	r3, [r4, #12]
 8003bf8:	4240      	negs	r0, r0
 8003bfa:	e03a      	b.n	8003c72 <__swsetup_r+0xaa>
 8003bfc:	0752      	lsls	r2, r2, #29
 8003bfe:	d513      	bpl.n	8003c28 <__swsetup_r+0x60>
 8003c00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c02:	2900      	cmp	r1, #0
 8003c04:	d008      	beq.n	8003c18 <__swsetup_r+0x50>
 8003c06:	0023      	movs	r3, r4
 8003c08:	3344      	adds	r3, #68	@ 0x44
 8003c0a:	4299      	cmp	r1, r3
 8003c0c:	d002      	beq.n	8003c14 <__swsetup_r+0x4c>
 8003c0e:	0028      	movs	r0, r5
 8003c10:	f000 f8bc 	bl	8003d8c <_free_r>
 8003c14:	2300      	movs	r3, #0
 8003c16:	6363      	str	r3, [r4, #52]	@ 0x34
 8003c18:	2224      	movs	r2, #36	@ 0x24
 8003c1a:	89a3      	ldrh	r3, [r4, #12]
 8003c1c:	4393      	bics	r3, r2
 8003c1e:	81a3      	strh	r3, [r4, #12]
 8003c20:	2300      	movs	r3, #0
 8003c22:	6063      	str	r3, [r4, #4]
 8003c24:	6923      	ldr	r3, [r4, #16]
 8003c26:	6023      	str	r3, [r4, #0]
 8003c28:	2308      	movs	r3, #8
 8003c2a:	89a2      	ldrh	r2, [r4, #12]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	81a3      	strh	r3, [r4, #12]
 8003c30:	6923      	ldr	r3, [r4, #16]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10b      	bne.n	8003c4e <__swsetup_r+0x86>
 8003c36:	21a0      	movs	r1, #160	@ 0xa0
 8003c38:	2280      	movs	r2, #128	@ 0x80
 8003c3a:	89a3      	ldrh	r3, [r4, #12]
 8003c3c:	0089      	lsls	r1, r1, #2
 8003c3e:	0092      	lsls	r2, r2, #2
 8003c40:	400b      	ands	r3, r1
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d003      	beq.n	8003c4e <__swsetup_r+0x86>
 8003c46:	0021      	movs	r1, r4
 8003c48:	0028      	movs	r0, r5
 8003c4a:	f000 fa77 	bl	800413c <__smakebuf_r>
 8003c4e:	230c      	movs	r3, #12
 8003c50:	5ee2      	ldrsh	r2, [r4, r3]
 8003c52:	2101      	movs	r1, #1
 8003c54:	0013      	movs	r3, r2
 8003c56:	400b      	ands	r3, r1
 8003c58:	420a      	tst	r2, r1
 8003c5a:	d00b      	beq.n	8003c74 <__swsetup_r+0xac>
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	60a3      	str	r3, [r4, #8]
 8003c60:	6963      	ldr	r3, [r4, #20]
 8003c62:	425b      	negs	r3, r3
 8003c64:	61a3      	str	r3, [r4, #24]
 8003c66:	2000      	movs	r0, #0
 8003c68:	6923      	ldr	r3, [r4, #16]
 8003c6a:	4283      	cmp	r3, r0
 8003c6c:	d101      	bne.n	8003c72 <__swsetup_r+0xaa>
 8003c6e:	0613      	lsls	r3, r2, #24
 8003c70:	d4be      	bmi.n	8003bf0 <__swsetup_r+0x28>
 8003c72:	bd70      	pop	{r4, r5, r6, pc}
 8003c74:	0791      	lsls	r1, r2, #30
 8003c76:	d400      	bmi.n	8003c7a <__swsetup_r+0xb2>
 8003c78:	6963      	ldr	r3, [r4, #20]
 8003c7a:	60a3      	str	r3, [r4, #8]
 8003c7c:	e7f3      	b.n	8003c66 <__swsetup_r+0x9e>
 8003c7e:	46c0      	nop			@ (mov r8, r8)
 8003c80:	20000018 	.word	0x20000018

08003c84 <memset>:
 8003c84:	0003      	movs	r3, r0
 8003c86:	1882      	adds	r2, r0, r2
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d100      	bne.n	8003c8e <memset+0xa>
 8003c8c:	4770      	bx	lr
 8003c8e:	7019      	strb	r1, [r3, #0]
 8003c90:	3301      	adds	r3, #1
 8003c92:	e7f9      	b.n	8003c88 <memset+0x4>

08003c94 <_close_r>:
 8003c94:	2300      	movs	r3, #0
 8003c96:	b570      	push	{r4, r5, r6, lr}
 8003c98:	4d06      	ldr	r5, [pc, #24]	@ (8003cb4 <_close_r+0x20>)
 8003c9a:	0004      	movs	r4, r0
 8003c9c:	0008      	movs	r0, r1
 8003c9e:	602b      	str	r3, [r5, #0]
 8003ca0:	f7fc fce3 	bl	800066a <_close>
 8003ca4:	1c43      	adds	r3, r0, #1
 8003ca6:	d103      	bne.n	8003cb0 <_close_r+0x1c>
 8003ca8:	682b      	ldr	r3, [r5, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d000      	beq.n	8003cb0 <_close_r+0x1c>
 8003cae:	6023      	str	r3, [r4, #0]
 8003cb0:	bd70      	pop	{r4, r5, r6, pc}
 8003cb2:	46c0      	nop			@ (mov r8, r8)
 8003cb4:	200002b0 	.word	0x200002b0

08003cb8 <_lseek_r>:
 8003cb8:	b570      	push	{r4, r5, r6, lr}
 8003cba:	0004      	movs	r4, r0
 8003cbc:	0008      	movs	r0, r1
 8003cbe:	0011      	movs	r1, r2
 8003cc0:	001a      	movs	r2, r3
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	4d05      	ldr	r5, [pc, #20]	@ (8003cdc <_lseek_r+0x24>)
 8003cc6:	602b      	str	r3, [r5, #0]
 8003cc8:	f7fc fcf0 	bl	80006ac <_lseek>
 8003ccc:	1c43      	adds	r3, r0, #1
 8003cce:	d103      	bne.n	8003cd8 <_lseek_r+0x20>
 8003cd0:	682b      	ldr	r3, [r5, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d000      	beq.n	8003cd8 <_lseek_r+0x20>
 8003cd6:	6023      	str	r3, [r4, #0]
 8003cd8:	bd70      	pop	{r4, r5, r6, pc}
 8003cda:	46c0      	nop			@ (mov r8, r8)
 8003cdc:	200002b0 	.word	0x200002b0

08003ce0 <_read_r>:
 8003ce0:	b570      	push	{r4, r5, r6, lr}
 8003ce2:	0004      	movs	r4, r0
 8003ce4:	0008      	movs	r0, r1
 8003ce6:	0011      	movs	r1, r2
 8003ce8:	001a      	movs	r2, r3
 8003cea:	2300      	movs	r3, #0
 8003cec:	4d05      	ldr	r5, [pc, #20]	@ (8003d04 <_read_r+0x24>)
 8003cee:	602b      	str	r3, [r5, #0]
 8003cf0:	f7fc fc82 	bl	80005f8 <_read>
 8003cf4:	1c43      	adds	r3, r0, #1
 8003cf6:	d103      	bne.n	8003d00 <_read_r+0x20>
 8003cf8:	682b      	ldr	r3, [r5, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d000      	beq.n	8003d00 <_read_r+0x20>
 8003cfe:	6023      	str	r3, [r4, #0]
 8003d00:	bd70      	pop	{r4, r5, r6, pc}
 8003d02:	46c0      	nop			@ (mov r8, r8)
 8003d04:	200002b0 	.word	0x200002b0

08003d08 <_write_r>:
 8003d08:	b570      	push	{r4, r5, r6, lr}
 8003d0a:	0004      	movs	r4, r0
 8003d0c:	0008      	movs	r0, r1
 8003d0e:	0011      	movs	r1, r2
 8003d10:	001a      	movs	r2, r3
 8003d12:	2300      	movs	r3, #0
 8003d14:	4d05      	ldr	r5, [pc, #20]	@ (8003d2c <_write_r+0x24>)
 8003d16:	602b      	str	r3, [r5, #0]
 8003d18:	f7fc fc8b 	bl	8000632 <_write>
 8003d1c:	1c43      	adds	r3, r0, #1
 8003d1e:	d103      	bne.n	8003d28 <_write_r+0x20>
 8003d20:	682b      	ldr	r3, [r5, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d000      	beq.n	8003d28 <_write_r+0x20>
 8003d26:	6023      	str	r3, [r4, #0]
 8003d28:	bd70      	pop	{r4, r5, r6, pc}
 8003d2a:	46c0      	nop			@ (mov r8, r8)
 8003d2c:	200002b0 	.word	0x200002b0

08003d30 <__errno>:
 8003d30:	4b01      	ldr	r3, [pc, #4]	@ (8003d38 <__errno+0x8>)
 8003d32:	6818      	ldr	r0, [r3, #0]
 8003d34:	4770      	bx	lr
 8003d36:	46c0      	nop			@ (mov r8, r8)
 8003d38:	20000018 	.word	0x20000018

08003d3c <__libc_init_array>:
 8003d3c:	b570      	push	{r4, r5, r6, lr}
 8003d3e:	2600      	movs	r6, #0
 8003d40:	4c0c      	ldr	r4, [pc, #48]	@ (8003d74 <__libc_init_array+0x38>)
 8003d42:	4d0d      	ldr	r5, [pc, #52]	@ (8003d78 <__libc_init_array+0x3c>)
 8003d44:	1b64      	subs	r4, r4, r5
 8003d46:	10a4      	asrs	r4, r4, #2
 8003d48:	42a6      	cmp	r6, r4
 8003d4a:	d109      	bne.n	8003d60 <__libc_init_array+0x24>
 8003d4c:	2600      	movs	r6, #0
 8003d4e:	f000 fa6d 	bl	800422c <_init>
 8003d52:	4c0a      	ldr	r4, [pc, #40]	@ (8003d7c <__libc_init_array+0x40>)
 8003d54:	4d0a      	ldr	r5, [pc, #40]	@ (8003d80 <__libc_init_array+0x44>)
 8003d56:	1b64      	subs	r4, r4, r5
 8003d58:	10a4      	asrs	r4, r4, #2
 8003d5a:	42a6      	cmp	r6, r4
 8003d5c:	d105      	bne.n	8003d6a <__libc_init_array+0x2e>
 8003d5e:	bd70      	pop	{r4, r5, r6, pc}
 8003d60:	00b3      	lsls	r3, r6, #2
 8003d62:	58eb      	ldr	r3, [r5, r3]
 8003d64:	4798      	blx	r3
 8003d66:	3601      	adds	r6, #1
 8003d68:	e7ee      	b.n	8003d48 <__libc_init_array+0xc>
 8003d6a:	00b3      	lsls	r3, r6, #2
 8003d6c:	58eb      	ldr	r3, [r5, r3]
 8003d6e:	4798      	blx	r3
 8003d70:	3601      	adds	r6, #1
 8003d72:	e7f2      	b.n	8003d5a <__libc_init_array+0x1e>
 8003d74:	080042cc 	.word	0x080042cc
 8003d78:	080042cc 	.word	0x080042cc
 8003d7c:	080042d0 	.word	0x080042d0
 8003d80:	080042cc 	.word	0x080042cc

08003d84 <__retarget_lock_init_recursive>:
 8003d84:	4770      	bx	lr

08003d86 <__retarget_lock_acquire_recursive>:
 8003d86:	4770      	bx	lr

08003d88 <__retarget_lock_release_recursive>:
 8003d88:	4770      	bx	lr
	...

08003d8c <_free_r>:
 8003d8c:	b570      	push	{r4, r5, r6, lr}
 8003d8e:	0005      	movs	r5, r0
 8003d90:	1e0c      	subs	r4, r1, #0
 8003d92:	d010      	beq.n	8003db6 <_free_r+0x2a>
 8003d94:	3c04      	subs	r4, #4
 8003d96:	6823      	ldr	r3, [r4, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	da00      	bge.n	8003d9e <_free_r+0x12>
 8003d9c:	18e4      	adds	r4, r4, r3
 8003d9e:	0028      	movs	r0, r5
 8003da0:	f000 f8e0 	bl	8003f64 <__malloc_lock>
 8003da4:	4a1d      	ldr	r2, [pc, #116]	@ (8003e1c <_free_r+0x90>)
 8003da6:	6813      	ldr	r3, [r2, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d105      	bne.n	8003db8 <_free_r+0x2c>
 8003dac:	6063      	str	r3, [r4, #4]
 8003dae:	6014      	str	r4, [r2, #0]
 8003db0:	0028      	movs	r0, r5
 8003db2:	f000 f8df 	bl	8003f74 <__malloc_unlock>
 8003db6:	bd70      	pop	{r4, r5, r6, pc}
 8003db8:	42a3      	cmp	r3, r4
 8003dba:	d908      	bls.n	8003dce <_free_r+0x42>
 8003dbc:	6820      	ldr	r0, [r4, #0]
 8003dbe:	1821      	adds	r1, r4, r0
 8003dc0:	428b      	cmp	r3, r1
 8003dc2:	d1f3      	bne.n	8003dac <_free_r+0x20>
 8003dc4:	6819      	ldr	r1, [r3, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	1809      	adds	r1, r1, r0
 8003dca:	6021      	str	r1, [r4, #0]
 8003dcc:	e7ee      	b.n	8003dac <_free_r+0x20>
 8003dce:	001a      	movs	r2, r3
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <_free_r+0x4e>
 8003dd6:	42a3      	cmp	r3, r4
 8003dd8:	d9f9      	bls.n	8003dce <_free_r+0x42>
 8003dda:	6811      	ldr	r1, [r2, #0]
 8003ddc:	1850      	adds	r0, r2, r1
 8003dde:	42a0      	cmp	r0, r4
 8003de0:	d10b      	bne.n	8003dfa <_free_r+0x6e>
 8003de2:	6820      	ldr	r0, [r4, #0]
 8003de4:	1809      	adds	r1, r1, r0
 8003de6:	1850      	adds	r0, r2, r1
 8003de8:	6011      	str	r1, [r2, #0]
 8003dea:	4283      	cmp	r3, r0
 8003dec:	d1e0      	bne.n	8003db0 <_free_r+0x24>
 8003dee:	6818      	ldr	r0, [r3, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	1841      	adds	r1, r0, r1
 8003df4:	6011      	str	r1, [r2, #0]
 8003df6:	6053      	str	r3, [r2, #4]
 8003df8:	e7da      	b.n	8003db0 <_free_r+0x24>
 8003dfa:	42a0      	cmp	r0, r4
 8003dfc:	d902      	bls.n	8003e04 <_free_r+0x78>
 8003dfe:	230c      	movs	r3, #12
 8003e00:	602b      	str	r3, [r5, #0]
 8003e02:	e7d5      	b.n	8003db0 <_free_r+0x24>
 8003e04:	6820      	ldr	r0, [r4, #0]
 8003e06:	1821      	adds	r1, r4, r0
 8003e08:	428b      	cmp	r3, r1
 8003e0a:	d103      	bne.n	8003e14 <_free_r+0x88>
 8003e0c:	6819      	ldr	r1, [r3, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	1809      	adds	r1, r1, r0
 8003e12:	6021      	str	r1, [r4, #0]
 8003e14:	6063      	str	r3, [r4, #4]
 8003e16:	6054      	str	r4, [r2, #4]
 8003e18:	e7ca      	b.n	8003db0 <_free_r+0x24>
 8003e1a:	46c0      	nop			@ (mov r8, r8)
 8003e1c:	200002bc 	.word	0x200002bc

08003e20 <sbrk_aligned>:
 8003e20:	b570      	push	{r4, r5, r6, lr}
 8003e22:	4e0f      	ldr	r6, [pc, #60]	@ (8003e60 <sbrk_aligned+0x40>)
 8003e24:	000d      	movs	r5, r1
 8003e26:	6831      	ldr	r1, [r6, #0]
 8003e28:	0004      	movs	r4, r0
 8003e2a:	2900      	cmp	r1, #0
 8003e2c:	d102      	bne.n	8003e34 <sbrk_aligned+0x14>
 8003e2e:	f000 f9eb 	bl	8004208 <_sbrk_r>
 8003e32:	6030      	str	r0, [r6, #0]
 8003e34:	0029      	movs	r1, r5
 8003e36:	0020      	movs	r0, r4
 8003e38:	f000 f9e6 	bl	8004208 <_sbrk_r>
 8003e3c:	1c43      	adds	r3, r0, #1
 8003e3e:	d103      	bne.n	8003e48 <sbrk_aligned+0x28>
 8003e40:	2501      	movs	r5, #1
 8003e42:	426d      	negs	r5, r5
 8003e44:	0028      	movs	r0, r5
 8003e46:	bd70      	pop	{r4, r5, r6, pc}
 8003e48:	2303      	movs	r3, #3
 8003e4a:	1cc5      	adds	r5, r0, #3
 8003e4c:	439d      	bics	r5, r3
 8003e4e:	42a8      	cmp	r0, r5
 8003e50:	d0f8      	beq.n	8003e44 <sbrk_aligned+0x24>
 8003e52:	1a29      	subs	r1, r5, r0
 8003e54:	0020      	movs	r0, r4
 8003e56:	f000 f9d7 	bl	8004208 <_sbrk_r>
 8003e5a:	3001      	adds	r0, #1
 8003e5c:	d1f2      	bne.n	8003e44 <sbrk_aligned+0x24>
 8003e5e:	e7ef      	b.n	8003e40 <sbrk_aligned+0x20>
 8003e60:	200002b8 	.word	0x200002b8

08003e64 <_malloc_r>:
 8003e64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e66:	2203      	movs	r2, #3
 8003e68:	1ccb      	adds	r3, r1, #3
 8003e6a:	4393      	bics	r3, r2
 8003e6c:	3308      	adds	r3, #8
 8003e6e:	0005      	movs	r5, r0
 8003e70:	001f      	movs	r7, r3
 8003e72:	2b0c      	cmp	r3, #12
 8003e74:	d234      	bcs.n	8003ee0 <_malloc_r+0x7c>
 8003e76:	270c      	movs	r7, #12
 8003e78:	42b9      	cmp	r1, r7
 8003e7a:	d833      	bhi.n	8003ee4 <_malloc_r+0x80>
 8003e7c:	0028      	movs	r0, r5
 8003e7e:	f000 f871 	bl	8003f64 <__malloc_lock>
 8003e82:	4e37      	ldr	r6, [pc, #220]	@ (8003f60 <_malloc_r+0xfc>)
 8003e84:	6833      	ldr	r3, [r6, #0]
 8003e86:	001c      	movs	r4, r3
 8003e88:	2c00      	cmp	r4, #0
 8003e8a:	d12f      	bne.n	8003eec <_malloc_r+0x88>
 8003e8c:	0039      	movs	r1, r7
 8003e8e:	0028      	movs	r0, r5
 8003e90:	f7ff ffc6 	bl	8003e20 <sbrk_aligned>
 8003e94:	0004      	movs	r4, r0
 8003e96:	1c43      	adds	r3, r0, #1
 8003e98:	d15f      	bne.n	8003f5a <_malloc_r+0xf6>
 8003e9a:	6834      	ldr	r4, [r6, #0]
 8003e9c:	9400      	str	r4, [sp, #0]
 8003e9e:	9b00      	ldr	r3, [sp, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d14a      	bne.n	8003f3a <_malloc_r+0xd6>
 8003ea4:	2c00      	cmp	r4, #0
 8003ea6:	d052      	beq.n	8003f4e <_malloc_r+0xea>
 8003ea8:	6823      	ldr	r3, [r4, #0]
 8003eaa:	0028      	movs	r0, r5
 8003eac:	18e3      	adds	r3, r4, r3
 8003eae:	9900      	ldr	r1, [sp, #0]
 8003eb0:	9301      	str	r3, [sp, #4]
 8003eb2:	f000 f9a9 	bl	8004208 <_sbrk_r>
 8003eb6:	9b01      	ldr	r3, [sp, #4]
 8003eb8:	4283      	cmp	r3, r0
 8003eba:	d148      	bne.n	8003f4e <_malloc_r+0xea>
 8003ebc:	6823      	ldr	r3, [r4, #0]
 8003ebe:	0028      	movs	r0, r5
 8003ec0:	1aff      	subs	r7, r7, r3
 8003ec2:	0039      	movs	r1, r7
 8003ec4:	f7ff ffac 	bl	8003e20 <sbrk_aligned>
 8003ec8:	3001      	adds	r0, #1
 8003eca:	d040      	beq.n	8003f4e <_malloc_r+0xea>
 8003ecc:	6823      	ldr	r3, [r4, #0]
 8003ece:	19db      	adds	r3, r3, r7
 8003ed0:	6023      	str	r3, [r4, #0]
 8003ed2:	6833      	ldr	r3, [r6, #0]
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	2a00      	cmp	r2, #0
 8003ed8:	d133      	bne.n	8003f42 <_malloc_r+0xde>
 8003eda:	9b00      	ldr	r3, [sp, #0]
 8003edc:	6033      	str	r3, [r6, #0]
 8003ede:	e019      	b.n	8003f14 <_malloc_r+0xb0>
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	dac9      	bge.n	8003e78 <_malloc_r+0x14>
 8003ee4:	230c      	movs	r3, #12
 8003ee6:	602b      	str	r3, [r5, #0]
 8003ee8:	2000      	movs	r0, #0
 8003eea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003eec:	6821      	ldr	r1, [r4, #0]
 8003eee:	1bc9      	subs	r1, r1, r7
 8003ef0:	d420      	bmi.n	8003f34 <_malloc_r+0xd0>
 8003ef2:	290b      	cmp	r1, #11
 8003ef4:	d90a      	bls.n	8003f0c <_malloc_r+0xa8>
 8003ef6:	19e2      	adds	r2, r4, r7
 8003ef8:	6027      	str	r7, [r4, #0]
 8003efa:	42a3      	cmp	r3, r4
 8003efc:	d104      	bne.n	8003f08 <_malloc_r+0xa4>
 8003efe:	6032      	str	r2, [r6, #0]
 8003f00:	6863      	ldr	r3, [r4, #4]
 8003f02:	6011      	str	r1, [r2, #0]
 8003f04:	6053      	str	r3, [r2, #4]
 8003f06:	e005      	b.n	8003f14 <_malloc_r+0xb0>
 8003f08:	605a      	str	r2, [r3, #4]
 8003f0a:	e7f9      	b.n	8003f00 <_malloc_r+0x9c>
 8003f0c:	6862      	ldr	r2, [r4, #4]
 8003f0e:	42a3      	cmp	r3, r4
 8003f10:	d10e      	bne.n	8003f30 <_malloc_r+0xcc>
 8003f12:	6032      	str	r2, [r6, #0]
 8003f14:	0028      	movs	r0, r5
 8003f16:	f000 f82d 	bl	8003f74 <__malloc_unlock>
 8003f1a:	0020      	movs	r0, r4
 8003f1c:	2207      	movs	r2, #7
 8003f1e:	300b      	adds	r0, #11
 8003f20:	1d23      	adds	r3, r4, #4
 8003f22:	4390      	bics	r0, r2
 8003f24:	1ac2      	subs	r2, r0, r3
 8003f26:	4298      	cmp	r0, r3
 8003f28:	d0df      	beq.n	8003eea <_malloc_r+0x86>
 8003f2a:	1a1b      	subs	r3, r3, r0
 8003f2c:	50a3      	str	r3, [r4, r2]
 8003f2e:	e7dc      	b.n	8003eea <_malloc_r+0x86>
 8003f30:	605a      	str	r2, [r3, #4]
 8003f32:	e7ef      	b.n	8003f14 <_malloc_r+0xb0>
 8003f34:	0023      	movs	r3, r4
 8003f36:	6864      	ldr	r4, [r4, #4]
 8003f38:	e7a6      	b.n	8003e88 <_malloc_r+0x24>
 8003f3a:	9c00      	ldr	r4, [sp, #0]
 8003f3c:	6863      	ldr	r3, [r4, #4]
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	e7ad      	b.n	8003e9e <_malloc_r+0x3a>
 8003f42:	001a      	movs	r2, r3
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	42a3      	cmp	r3, r4
 8003f48:	d1fb      	bne.n	8003f42 <_malloc_r+0xde>
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	e7da      	b.n	8003f04 <_malloc_r+0xa0>
 8003f4e:	230c      	movs	r3, #12
 8003f50:	0028      	movs	r0, r5
 8003f52:	602b      	str	r3, [r5, #0]
 8003f54:	f000 f80e 	bl	8003f74 <__malloc_unlock>
 8003f58:	e7c6      	b.n	8003ee8 <_malloc_r+0x84>
 8003f5a:	6007      	str	r7, [r0, #0]
 8003f5c:	e7da      	b.n	8003f14 <_malloc_r+0xb0>
 8003f5e:	46c0      	nop			@ (mov r8, r8)
 8003f60:	200002bc 	.word	0x200002bc

08003f64 <__malloc_lock>:
 8003f64:	b510      	push	{r4, lr}
 8003f66:	4802      	ldr	r0, [pc, #8]	@ (8003f70 <__malloc_lock+0xc>)
 8003f68:	f7ff ff0d 	bl	8003d86 <__retarget_lock_acquire_recursive>
 8003f6c:	bd10      	pop	{r4, pc}
 8003f6e:	46c0      	nop			@ (mov r8, r8)
 8003f70:	200002b4 	.word	0x200002b4

08003f74 <__malloc_unlock>:
 8003f74:	b510      	push	{r4, lr}
 8003f76:	4802      	ldr	r0, [pc, #8]	@ (8003f80 <__malloc_unlock+0xc>)
 8003f78:	f7ff ff06 	bl	8003d88 <__retarget_lock_release_recursive>
 8003f7c:	bd10      	pop	{r4, pc}
 8003f7e:	46c0      	nop			@ (mov r8, r8)
 8003f80:	200002b4 	.word	0x200002b4

08003f84 <__sflush_r>:
 8003f84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f86:	220c      	movs	r2, #12
 8003f88:	5e8b      	ldrsh	r3, [r1, r2]
 8003f8a:	0005      	movs	r5, r0
 8003f8c:	000c      	movs	r4, r1
 8003f8e:	071a      	lsls	r2, r3, #28
 8003f90:	d456      	bmi.n	8004040 <__sflush_r+0xbc>
 8003f92:	684a      	ldr	r2, [r1, #4]
 8003f94:	2a00      	cmp	r2, #0
 8003f96:	dc02      	bgt.n	8003f9e <__sflush_r+0x1a>
 8003f98:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8003f9a:	2a00      	cmp	r2, #0
 8003f9c:	dd4e      	ble.n	800403c <__sflush_r+0xb8>
 8003f9e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003fa0:	2f00      	cmp	r7, #0
 8003fa2:	d04b      	beq.n	800403c <__sflush_r+0xb8>
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	2080      	movs	r0, #128	@ 0x80
 8003fa8:	682e      	ldr	r6, [r5, #0]
 8003faa:	602a      	str	r2, [r5, #0]
 8003fac:	001a      	movs	r2, r3
 8003fae:	0140      	lsls	r0, r0, #5
 8003fb0:	6a21      	ldr	r1, [r4, #32]
 8003fb2:	4002      	ands	r2, r0
 8003fb4:	4203      	tst	r3, r0
 8003fb6:	d033      	beq.n	8004020 <__sflush_r+0x9c>
 8003fb8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003fba:	89a3      	ldrh	r3, [r4, #12]
 8003fbc:	075b      	lsls	r3, r3, #29
 8003fbe:	d506      	bpl.n	8003fce <__sflush_r+0x4a>
 8003fc0:	6863      	ldr	r3, [r4, #4]
 8003fc2:	1ad2      	subs	r2, r2, r3
 8003fc4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <__sflush_r+0x4a>
 8003fca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003fcc:	1ad2      	subs	r2, r2, r3
 8003fce:	2300      	movs	r3, #0
 8003fd0:	0028      	movs	r0, r5
 8003fd2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003fd4:	6a21      	ldr	r1, [r4, #32]
 8003fd6:	47b8      	blx	r7
 8003fd8:	89a2      	ldrh	r2, [r4, #12]
 8003fda:	1c43      	adds	r3, r0, #1
 8003fdc:	d106      	bne.n	8003fec <__sflush_r+0x68>
 8003fde:	6829      	ldr	r1, [r5, #0]
 8003fe0:	291d      	cmp	r1, #29
 8003fe2:	d846      	bhi.n	8004072 <__sflush_r+0xee>
 8003fe4:	4b29      	ldr	r3, [pc, #164]	@ (800408c <__sflush_r+0x108>)
 8003fe6:	410b      	asrs	r3, r1
 8003fe8:	07db      	lsls	r3, r3, #31
 8003fea:	d442      	bmi.n	8004072 <__sflush_r+0xee>
 8003fec:	2300      	movs	r3, #0
 8003fee:	6063      	str	r3, [r4, #4]
 8003ff0:	6923      	ldr	r3, [r4, #16]
 8003ff2:	6023      	str	r3, [r4, #0]
 8003ff4:	04d2      	lsls	r2, r2, #19
 8003ff6:	d505      	bpl.n	8004004 <__sflush_r+0x80>
 8003ff8:	1c43      	adds	r3, r0, #1
 8003ffa:	d102      	bne.n	8004002 <__sflush_r+0x7e>
 8003ffc:	682b      	ldr	r3, [r5, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d100      	bne.n	8004004 <__sflush_r+0x80>
 8004002:	6560      	str	r0, [r4, #84]	@ 0x54
 8004004:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004006:	602e      	str	r6, [r5, #0]
 8004008:	2900      	cmp	r1, #0
 800400a:	d017      	beq.n	800403c <__sflush_r+0xb8>
 800400c:	0023      	movs	r3, r4
 800400e:	3344      	adds	r3, #68	@ 0x44
 8004010:	4299      	cmp	r1, r3
 8004012:	d002      	beq.n	800401a <__sflush_r+0x96>
 8004014:	0028      	movs	r0, r5
 8004016:	f7ff feb9 	bl	8003d8c <_free_r>
 800401a:	2300      	movs	r3, #0
 800401c:	6363      	str	r3, [r4, #52]	@ 0x34
 800401e:	e00d      	b.n	800403c <__sflush_r+0xb8>
 8004020:	2301      	movs	r3, #1
 8004022:	0028      	movs	r0, r5
 8004024:	47b8      	blx	r7
 8004026:	0002      	movs	r2, r0
 8004028:	1c43      	adds	r3, r0, #1
 800402a:	d1c6      	bne.n	8003fba <__sflush_r+0x36>
 800402c:	682b      	ldr	r3, [r5, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0c3      	beq.n	8003fba <__sflush_r+0x36>
 8004032:	2b1d      	cmp	r3, #29
 8004034:	d001      	beq.n	800403a <__sflush_r+0xb6>
 8004036:	2b16      	cmp	r3, #22
 8004038:	d11a      	bne.n	8004070 <__sflush_r+0xec>
 800403a:	602e      	str	r6, [r5, #0]
 800403c:	2000      	movs	r0, #0
 800403e:	e01e      	b.n	800407e <__sflush_r+0xfa>
 8004040:	690e      	ldr	r6, [r1, #16]
 8004042:	2e00      	cmp	r6, #0
 8004044:	d0fa      	beq.n	800403c <__sflush_r+0xb8>
 8004046:	680f      	ldr	r7, [r1, #0]
 8004048:	600e      	str	r6, [r1, #0]
 800404a:	1bba      	subs	r2, r7, r6
 800404c:	9201      	str	r2, [sp, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	079b      	lsls	r3, r3, #30
 8004052:	d100      	bne.n	8004056 <__sflush_r+0xd2>
 8004054:	694a      	ldr	r2, [r1, #20]
 8004056:	60a2      	str	r2, [r4, #8]
 8004058:	9b01      	ldr	r3, [sp, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	ddee      	ble.n	800403c <__sflush_r+0xb8>
 800405e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004060:	0032      	movs	r2, r6
 8004062:	001f      	movs	r7, r3
 8004064:	0028      	movs	r0, r5
 8004066:	9b01      	ldr	r3, [sp, #4]
 8004068:	6a21      	ldr	r1, [r4, #32]
 800406a:	47b8      	blx	r7
 800406c:	2800      	cmp	r0, #0
 800406e:	dc07      	bgt.n	8004080 <__sflush_r+0xfc>
 8004070:	89a2      	ldrh	r2, [r4, #12]
 8004072:	2340      	movs	r3, #64	@ 0x40
 8004074:	2001      	movs	r0, #1
 8004076:	4313      	orrs	r3, r2
 8004078:	b21b      	sxth	r3, r3
 800407a:	81a3      	strh	r3, [r4, #12]
 800407c:	4240      	negs	r0, r0
 800407e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004080:	9b01      	ldr	r3, [sp, #4]
 8004082:	1836      	adds	r6, r6, r0
 8004084:	1a1b      	subs	r3, r3, r0
 8004086:	9301      	str	r3, [sp, #4]
 8004088:	e7e6      	b.n	8004058 <__sflush_r+0xd4>
 800408a:	46c0      	nop			@ (mov r8, r8)
 800408c:	dfbffffe 	.word	0xdfbffffe

08004090 <_fflush_r>:
 8004090:	690b      	ldr	r3, [r1, #16]
 8004092:	b570      	push	{r4, r5, r6, lr}
 8004094:	0005      	movs	r5, r0
 8004096:	000c      	movs	r4, r1
 8004098:	2b00      	cmp	r3, #0
 800409a:	d102      	bne.n	80040a2 <_fflush_r+0x12>
 800409c:	2500      	movs	r5, #0
 800409e:	0028      	movs	r0, r5
 80040a0:	bd70      	pop	{r4, r5, r6, pc}
 80040a2:	2800      	cmp	r0, #0
 80040a4:	d004      	beq.n	80040b0 <_fflush_r+0x20>
 80040a6:	6a03      	ldr	r3, [r0, #32]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <_fflush_r+0x20>
 80040ac:	f7ff fc6a 	bl	8003984 <__sinit>
 80040b0:	220c      	movs	r2, #12
 80040b2:	5ea3      	ldrsh	r3, [r4, r2]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0f1      	beq.n	800409c <_fflush_r+0xc>
 80040b8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80040ba:	07d2      	lsls	r2, r2, #31
 80040bc:	d404      	bmi.n	80040c8 <_fflush_r+0x38>
 80040be:	059b      	lsls	r3, r3, #22
 80040c0:	d402      	bmi.n	80040c8 <_fflush_r+0x38>
 80040c2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80040c4:	f7ff fe5f 	bl	8003d86 <__retarget_lock_acquire_recursive>
 80040c8:	0028      	movs	r0, r5
 80040ca:	0021      	movs	r1, r4
 80040cc:	f7ff ff5a 	bl	8003f84 <__sflush_r>
 80040d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80040d2:	0005      	movs	r5, r0
 80040d4:	07db      	lsls	r3, r3, #31
 80040d6:	d4e2      	bmi.n	800409e <_fflush_r+0xe>
 80040d8:	89a3      	ldrh	r3, [r4, #12]
 80040da:	059b      	lsls	r3, r3, #22
 80040dc:	d4df      	bmi.n	800409e <_fflush_r+0xe>
 80040de:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80040e0:	f7ff fe52 	bl	8003d88 <__retarget_lock_release_recursive>
 80040e4:	e7db      	b.n	800409e <_fflush_r+0xe>
	...

080040e8 <__swhatbuf_r>:
 80040e8:	b570      	push	{r4, r5, r6, lr}
 80040ea:	000e      	movs	r6, r1
 80040ec:	001d      	movs	r5, r3
 80040ee:	230e      	movs	r3, #14
 80040f0:	5ec9      	ldrsh	r1, [r1, r3]
 80040f2:	0014      	movs	r4, r2
 80040f4:	b096      	sub	sp, #88	@ 0x58
 80040f6:	2900      	cmp	r1, #0
 80040f8:	da0c      	bge.n	8004114 <__swhatbuf_r+0x2c>
 80040fa:	89b2      	ldrh	r2, [r6, #12]
 80040fc:	2380      	movs	r3, #128	@ 0x80
 80040fe:	0011      	movs	r1, r2
 8004100:	4019      	ands	r1, r3
 8004102:	421a      	tst	r2, r3
 8004104:	d114      	bne.n	8004130 <__swhatbuf_r+0x48>
 8004106:	2380      	movs	r3, #128	@ 0x80
 8004108:	00db      	lsls	r3, r3, #3
 800410a:	2000      	movs	r0, #0
 800410c:	6029      	str	r1, [r5, #0]
 800410e:	6023      	str	r3, [r4, #0]
 8004110:	b016      	add	sp, #88	@ 0x58
 8004112:	bd70      	pop	{r4, r5, r6, pc}
 8004114:	466a      	mov	r2, sp
 8004116:	f000 f853 	bl	80041c0 <_fstat_r>
 800411a:	2800      	cmp	r0, #0
 800411c:	dbed      	blt.n	80040fa <__swhatbuf_r+0x12>
 800411e:	23f0      	movs	r3, #240	@ 0xf0
 8004120:	9901      	ldr	r1, [sp, #4]
 8004122:	021b      	lsls	r3, r3, #8
 8004124:	4019      	ands	r1, r3
 8004126:	4b04      	ldr	r3, [pc, #16]	@ (8004138 <__swhatbuf_r+0x50>)
 8004128:	18c9      	adds	r1, r1, r3
 800412a:	424b      	negs	r3, r1
 800412c:	4159      	adcs	r1, r3
 800412e:	e7ea      	b.n	8004106 <__swhatbuf_r+0x1e>
 8004130:	2100      	movs	r1, #0
 8004132:	2340      	movs	r3, #64	@ 0x40
 8004134:	e7e9      	b.n	800410a <__swhatbuf_r+0x22>
 8004136:	46c0      	nop			@ (mov r8, r8)
 8004138:	ffffe000 	.word	0xffffe000

0800413c <__smakebuf_r>:
 800413c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800413e:	2602      	movs	r6, #2
 8004140:	898b      	ldrh	r3, [r1, #12]
 8004142:	0005      	movs	r5, r0
 8004144:	000c      	movs	r4, r1
 8004146:	b085      	sub	sp, #20
 8004148:	4233      	tst	r3, r6
 800414a:	d007      	beq.n	800415c <__smakebuf_r+0x20>
 800414c:	0023      	movs	r3, r4
 800414e:	3347      	adds	r3, #71	@ 0x47
 8004150:	6023      	str	r3, [r4, #0]
 8004152:	6123      	str	r3, [r4, #16]
 8004154:	2301      	movs	r3, #1
 8004156:	6163      	str	r3, [r4, #20]
 8004158:	b005      	add	sp, #20
 800415a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800415c:	ab03      	add	r3, sp, #12
 800415e:	aa02      	add	r2, sp, #8
 8004160:	f7ff ffc2 	bl	80040e8 <__swhatbuf_r>
 8004164:	9f02      	ldr	r7, [sp, #8]
 8004166:	9001      	str	r0, [sp, #4]
 8004168:	0039      	movs	r1, r7
 800416a:	0028      	movs	r0, r5
 800416c:	f7ff fe7a 	bl	8003e64 <_malloc_r>
 8004170:	2800      	cmp	r0, #0
 8004172:	d108      	bne.n	8004186 <__smakebuf_r+0x4a>
 8004174:	220c      	movs	r2, #12
 8004176:	5ea3      	ldrsh	r3, [r4, r2]
 8004178:	059a      	lsls	r2, r3, #22
 800417a:	d4ed      	bmi.n	8004158 <__smakebuf_r+0x1c>
 800417c:	2203      	movs	r2, #3
 800417e:	4393      	bics	r3, r2
 8004180:	431e      	orrs	r6, r3
 8004182:	81a6      	strh	r6, [r4, #12]
 8004184:	e7e2      	b.n	800414c <__smakebuf_r+0x10>
 8004186:	2380      	movs	r3, #128	@ 0x80
 8004188:	89a2      	ldrh	r2, [r4, #12]
 800418a:	6020      	str	r0, [r4, #0]
 800418c:	4313      	orrs	r3, r2
 800418e:	81a3      	strh	r3, [r4, #12]
 8004190:	9b03      	ldr	r3, [sp, #12]
 8004192:	6120      	str	r0, [r4, #16]
 8004194:	6167      	str	r7, [r4, #20]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00c      	beq.n	80041b4 <__smakebuf_r+0x78>
 800419a:	0028      	movs	r0, r5
 800419c:	230e      	movs	r3, #14
 800419e:	5ee1      	ldrsh	r1, [r4, r3]
 80041a0:	f000 f820 	bl	80041e4 <_isatty_r>
 80041a4:	2800      	cmp	r0, #0
 80041a6:	d005      	beq.n	80041b4 <__smakebuf_r+0x78>
 80041a8:	2303      	movs	r3, #3
 80041aa:	89a2      	ldrh	r2, [r4, #12]
 80041ac:	439a      	bics	r2, r3
 80041ae:	3b02      	subs	r3, #2
 80041b0:	4313      	orrs	r3, r2
 80041b2:	81a3      	strh	r3, [r4, #12]
 80041b4:	89a3      	ldrh	r3, [r4, #12]
 80041b6:	9a01      	ldr	r2, [sp, #4]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	81a3      	strh	r3, [r4, #12]
 80041bc:	e7cc      	b.n	8004158 <__smakebuf_r+0x1c>
	...

080041c0 <_fstat_r>:
 80041c0:	2300      	movs	r3, #0
 80041c2:	b570      	push	{r4, r5, r6, lr}
 80041c4:	4d06      	ldr	r5, [pc, #24]	@ (80041e0 <_fstat_r+0x20>)
 80041c6:	0004      	movs	r4, r0
 80041c8:	0008      	movs	r0, r1
 80041ca:	0011      	movs	r1, r2
 80041cc:	602b      	str	r3, [r5, #0]
 80041ce:	f7fc fa56 	bl	800067e <_fstat>
 80041d2:	1c43      	adds	r3, r0, #1
 80041d4:	d103      	bne.n	80041de <_fstat_r+0x1e>
 80041d6:	682b      	ldr	r3, [r5, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d000      	beq.n	80041de <_fstat_r+0x1e>
 80041dc:	6023      	str	r3, [r4, #0]
 80041de:	bd70      	pop	{r4, r5, r6, pc}
 80041e0:	200002b0 	.word	0x200002b0

080041e4 <_isatty_r>:
 80041e4:	2300      	movs	r3, #0
 80041e6:	b570      	push	{r4, r5, r6, lr}
 80041e8:	4d06      	ldr	r5, [pc, #24]	@ (8004204 <_isatty_r+0x20>)
 80041ea:	0004      	movs	r4, r0
 80041ec:	0008      	movs	r0, r1
 80041ee:	602b      	str	r3, [r5, #0]
 80041f0:	f7fc fa53 	bl	800069a <_isatty>
 80041f4:	1c43      	adds	r3, r0, #1
 80041f6:	d103      	bne.n	8004200 <_isatty_r+0x1c>
 80041f8:	682b      	ldr	r3, [r5, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d000      	beq.n	8004200 <_isatty_r+0x1c>
 80041fe:	6023      	str	r3, [r4, #0]
 8004200:	bd70      	pop	{r4, r5, r6, pc}
 8004202:	46c0      	nop			@ (mov r8, r8)
 8004204:	200002b0 	.word	0x200002b0

08004208 <_sbrk_r>:
 8004208:	2300      	movs	r3, #0
 800420a:	b570      	push	{r4, r5, r6, lr}
 800420c:	4d06      	ldr	r5, [pc, #24]	@ (8004228 <_sbrk_r+0x20>)
 800420e:	0004      	movs	r4, r0
 8004210:	0008      	movs	r0, r1
 8004212:	602b      	str	r3, [r5, #0]
 8004214:	f7fc fa56 	bl	80006c4 <_sbrk>
 8004218:	1c43      	adds	r3, r0, #1
 800421a:	d103      	bne.n	8004224 <_sbrk_r+0x1c>
 800421c:	682b      	ldr	r3, [r5, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d000      	beq.n	8004224 <_sbrk_r+0x1c>
 8004222:	6023      	str	r3, [r4, #0]
 8004224:	bd70      	pop	{r4, r5, r6, pc}
 8004226:	46c0      	nop			@ (mov r8, r8)
 8004228:	200002b0 	.word	0x200002b0

0800422c <_init>:
 800422c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800422e:	46c0      	nop			@ (mov r8, r8)
 8004230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004232:	bc08      	pop	{r3}
 8004234:	469e      	mov	lr, r3
 8004236:	4770      	bx	lr

08004238 <_fini>:
 8004238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800423a:	46c0      	nop			@ (mov r8, r8)
 800423c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800423e:	bc08      	pop	{r3}
 8004240:	469e      	mov	lr, r3
 8004242:	4770      	bx	lr
