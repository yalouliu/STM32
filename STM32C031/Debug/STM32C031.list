
STM32C031.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ab8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08002b78  08002b78  00003b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c38  08002c38  00004068  2**0
                  CONTENTS
  4 .ARM          00000000  08002c38  08002c38  00004068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c38  08002c38  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c38  08002c38  00003c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002c3c  08002c3c  00003c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002c40  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000068  08002ca8  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08002ca8  0000426c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008acd  00000000  00000000  00004090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001540  00000000  00000000  0000cb5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000708  00000000  00000000  0000e0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000561  00000000  00000000  0000e7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013945  00000000  00000000  0000ed09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000916f  00000000  00000000  0002264e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00076f70  00000000  00000000  0002b7bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a272d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f40  00000000  00000000  000a2770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000a46b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002b60 	.word	0x08002b60

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08002b60 	.word	0x08002b60

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000238:	f000 fa39 	bl	80006ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023c:	f000 f818 	bl	8000270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000240:	f000 f88e 	bl	8000360 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000244:	f000 f858 	bl	80002f8 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000248:	23a0      	movs	r3, #160	@ 0xa0
 800024a:	05db      	lsls	r3, r3, #23
 800024c:	2120      	movs	r1, #32
 800024e:	0018      	movs	r0, r3
 8000250:	f000 fd11 	bl	8000c76 <HAL_GPIO_TogglePin>
    printf("\n\r hello world！\n\r");
 8000254:	4b05      	ldr	r3, [pc, #20]	@ (800026c <main+0x38>)
 8000256:	0018      	movs	r0, r3
 8000258:	f001 fde4 	bl	8001e24 <iprintf>
    HAL_Delay(1000);
 800025c:	23fa      	movs	r3, #250	@ 0xfa
 800025e:	009b      	lsls	r3, r3, #2
 8000260:	0018      	movs	r0, r3
 8000262:	f000 faa1 	bl	80007a8 <HAL_Delay>
  {
 8000266:	46c0      	nop			@ (mov r8, r8)
 8000268:	e7ee      	b.n	8000248 <main+0x14>
 800026a:	46c0      	nop			@ (mov r8, r8)
 800026c:	08002b78 	.word	0x08002b78

08000270 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000270:	b590      	push	{r4, r7, lr}
 8000272:	b08d      	sub	sp, #52	@ 0x34
 8000274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000276:	2414      	movs	r4, #20
 8000278:	193b      	adds	r3, r7, r4
 800027a:	0018      	movs	r0, r3
 800027c:	231c      	movs	r3, #28
 800027e:	001a      	movs	r2, r3
 8000280:	2100      	movs	r1, #0
 8000282:	f001 fe2b 	bl	8001edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000286:	003b      	movs	r3, r7
 8000288:	0018      	movs	r0, r3
 800028a:	2314      	movs	r3, #20
 800028c:	001a      	movs	r2, r3
 800028e:	2100      	movs	r1, #0
 8000290:	f001 fe24 	bl	8001edc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000294:	193b      	adds	r3, r7, r4
 8000296:	2202      	movs	r2, #2
 8000298:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800029a:	193b      	adds	r3, r7, r4
 800029c:	2280      	movs	r2, #128	@ 0x80
 800029e:	0052      	lsls	r2, r2, #1
 80002a0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 80002a2:	193b      	adds	r3, r7, r4
 80002a4:	2280      	movs	r2, #128	@ 0x80
 80002a6:	0152      	lsls	r2, r2, #5
 80002a8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002aa:	193b      	adds	r3, r7, r4
 80002ac:	2240      	movs	r2, #64	@ 0x40
 80002ae:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b0:	193b      	adds	r3, r7, r4
 80002b2:	0018      	movs	r0, r3
 80002b4:	f000 fcfa 	bl	8000cac <HAL_RCC_OscConfig>
 80002b8:	1e03      	subs	r3, r0, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002bc:	f000 f89a 	bl	80003f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 80002c0:	003b      	movs	r3, r7
 80002c2:	2207      	movs	r2, #7
 80002c4:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002c6:	003b      	movs	r3, r7
 80002c8:	2200      	movs	r2, #0
 80002ca:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80002cc:	003b      	movs	r3, r7
 80002ce:	2200      	movs	r2, #0
 80002d0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80002d2:	003b      	movs	r3, r7
 80002d4:	2200      	movs	r2, #0
 80002d6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80002d8:	003b      	movs	r3, r7
 80002da:	2200      	movs	r2, #0
 80002dc:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002de:	003b      	movs	r3, r7
 80002e0:	2100      	movs	r1, #0
 80002e2:	0018      	movs	r0, r3
 80002e4:	f000 fec6 	bl	8001074 <HAL_RCC_ClockConfig>
 80002e8:	1e03      	subs	r3, r0, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80002ec:	f000 f882 	bl	80003f4 <Error_Handler>
  }
}
 80002f0:	46c0      	nop			@ (mov r8, r8)
 80002f2:	46bd      	mov	sp, r7
 80002f4:	b00d      	add	sp, #52	@ 0x34
 80002f6:	bd90      	pop	{r4, r7, pc}

080002f8 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002fc:	4b16      	ldr	r3, [pc, #88]	@ (8000358 <MX_USART2_UART_Init+0x60>)
 80002fe:	4a17      	ldr	r2, [pc, #92]	@ (800035c <MX_USART2_UART_Init+0x64>)
 8000300:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000302:	4b15      	ldr	r3, [pc, #84]	@ (8000358 <MX_USART2_UART_Init+0x60>)
 8000304:	22e1      	movs	r2, #225	@ 0xe1
 8000306:	0252      	lsls	r2, r2, #9
 8000308:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800030a:	4b13      	ldr	r3, [pc, #76]	@ (8000358 <MX_USART2_UART_Init+0x60>)
 800030c:	2200      	movs	r2, #0
 800030e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000310:	4b11      	ldr	r3, [pc, #68]	@ (8000358 <MX_USART2_UART_Init+0x60>)
 8000312:	2200      	movs	r2, #0
 8000314:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000316:	4b10      	ldr	r3, [pc, #64]	@ (8000358 <MX_USART2_UART_Init+0x60>)
 8000318:	2280      	movs	r2, #128	@ 0x80
 800031a:	00d2      	lsls	r2, r2, #3
 800031c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800031e:	4b0e      	ldr	r3, [pc, #56]	@ (8000358 <MX_USART2_UART_Init+0x60>)
 8000320:	220c      	movs	r2, #12
 8000322:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000324:	4b0c      	ldr	r3, [pc, #48]	@ (8000358 <MX_USART2_UART_Init+0x60>)
 8000326:	2200      	movs	r2, #0
 8000328:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800032a:	4b0b      	ldr	r3, [pc, #44]	@ (8000358 <MX_USART2_UART_Init+0x60>)
 800032c:	2200      	movs	r2, #0
 800032e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000330:	4b09      	ldr	r3, [pc, #36]	@ (8000358 <MX_USART2_UART_Init+0x60>)
 8000332:	2200      	movs	r2, #0
 8000334:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000336:	4b08      	ldr	r3, [pc, #32]	@ (8000358 <MX_USART2_UART_Init+0x60>)
 8000338:	2200      	movs	r2, #0
 800033a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800033c:	4b06      	ldr	r3, [pc, #24]	@ (8000358 <MX_USART2_UART_Init+0x60>)
 800033e:	2200      	movs	r2, #0
 8000340:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000342:	4b05      	ldr	r3, [pc, #20]	@ (8000358 <MX_USART2_UART_Init+0x60>)
 8000344:	0018      	movs	r0, r3
 8000346:	f001 f803 	bl	8001350 <HAL_UART_Init>
 800034a:	1e03      	subs	r3, r0, #0
 800034c:	d001      	beq.n	8000352 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800034e:	f000 f851 	bl	80003f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8000352:	46c0      	nop			@ (mov r8, r8)
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	20000084 	.word	0x20000084
 800035c:	40004400 	.word	0x40004400

08000360 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b086      	sub	sp, #24
 8000364:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	0018      	movs	r0, r3
 800036a:	2314      	movs	r3, #20
 800036c:	001a      	movs	r2, r3
 800036e:	2100      	movs	r1, #0
 8000370:	f001 fdb4 	bl	8001edc <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000374:	4b14      	ldr	r3, [pc, #80]	@ (80003c8 <MX_GPIO_Init+0x68>)
 8000376:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000378:	4b13      	ldr	r3, [pc, #76]	@ (80003c8 <MX_GPIO_Init+0x68>)
 800037a:	2101      	movs	r1, #1
 800037c:	430a      	orrs	r2, r1
 800037e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000380:	4b11      	ldr	r3, [pc, #68]	@ (80003c8 <MX_GPIO_Init+0x68>)
 8000382:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000384:	2201      	movs	r2, #1
 8000386:	4013      	ands	r3, r2
 8000388:	603b      	str	r3, [r7, #0]
 800038a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800038c:	23a0      	movs	r3, #160	@ 0xa0
 800038e:	05db      	lsls	r3, r3, #23
 8000390:	2200      	movs	r2, #0
 8000392:	2120      	movs	r1, #32
 8000394:	0018      	movs	r0, r3
 8000396:	f000 fc51 	bl	8000c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	2220      	movs	r2, #32
 800039e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	2201      	movs	r2, #1
 80003a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	2200      	movs	r2, #0
 80003aa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	2200      	movs	r2, #0
 80003b0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003b2:	1d3a      	adds	r2, r7, #4
 80003b4:	23a0      	movs	r3, #160	@ 0xa0
 80003b6:	05db      	lsls	r3, r3, #23
 80003b8:	0011      	movs	r1, r2
 80003ba:	0018      	movs	r0, r3
 80003bc:	f000 facc 	bl	8000958 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80003c0:	46c0      	nop			@ (mov r8, r8)
 80003c2:	46bd      	mov	sp, r7
 80003c4:	b006      	add	sp, #24
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	40021000 	.word	0x40021000

080003cc <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80003d4:	4b05      	ldr	r3, [pc, #20]	@ (80003ec <__io_putchar+0x20>)
 80003d6:	1d39      	adds	r1, r7, #4
 80003d8:	4805      	ldr	r0, [pc, #20]	@ (80003f0 <__io_putchar+0x24>)
 80003da:	2201      	movs	r2, #1
 80003dc:	f001 f80e 	bl	80013fc <HAL_UART_Transmit>

  return ch;
 80003e0:	687b      	ldr	r3, [r7, #4]
}
 80003e2:	0018      	movs	r0, r3
 80003e4:	46bd      	mov	sp, r7
 80003e6:	b002      	add	sp, #8
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	46c0      	nop			@ (mov r8, r8)
 80003ec:	0000ffff 	.word	0x0000ffff
 80003f0:	20000084 	.word	0x20000084

080003f4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f8:	b672      	cpsid	i
}
 80003fa:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003fc:	46c0      	nop			@ (mov r8, r8)
 80003fe:	e7fd      	b.n	80003fc <Error_Handler+0x8>

08000400 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000406:	4b0f      	ldr	r3, [pc, #60]	@ (8000444 <HAL_MspInit+0x44>)
 8000408:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800040a:	4b0e      	ldr	r3, [pc, #56]	@ (8000444 <HAL_MspInit+0x44>)
 800040c:	2101      	movs	r1, #1
 800040e:	430a      	orrs	r2, r1
 8000410:	641a      	str	r2, [r3, #64]	@ 0x40
 8000412:	4b0c      	ldr	r3, [pc, #48]	@ (8000444 <HAL_MspInit+0x44>)
 8000414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000416:	2201      	movs	r2, #1
 8000418:	4013      	ands	r3, r2
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800041e:	4b09      	ldr	r3, [pc, #36]	@ (8000444 <HAL_MspInit+0x44>)
 8000420:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000422:	4b08      	ldr	r3, [pc, #32]	@ (8000444 <HAL_MspInit+0x44>)
 8000424:	2180      	movs	r1, #128	@ 0x80
 8000426:	0549      	lsls	r1, r1, #21
 8000428:	430a      	orrs	r2, r1
 800042a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800042c:	4b05      	ldr	r3, [pc, #20]	@ (8000444 <HAL_MspInit+0x44>)
 800042e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000430:	2380      	movs	r3, #128	@ 0x80
 8000432:	055b      	lsls	r3, r3, #21
 8000434:	4013      	ands	r3, r2
 8000436:	603b      	str	r3, [r7, #0]
 8000438:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	46bd      	mov	sp, r7
 800043e:	b002      	add	sp, #8
 8000440:	bd80      	pop	{r7, pc}
 8000442:	46c0      	nop			@ (mov r8, r8)
 8000444:	40021000 	.word	0x40021000

08000448 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000448:	b590      	push	{r4, r7, lr}
 800044a:	b08b      	sub	sp, #44	@ 0x2c
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000450:	2414      	movs	r4, #20
 8000452:	193b      	adds	r3, r7, r4
 8000454:	0018      	movs	r0, r3
 8000456:	2314      	movs	r3, #20
 8000458:	001a      	movs	r2, r3
 800045a:	2100      	movs	r1, #0
 800045c:	f001 fd3e 	bl	8001edc <memset>
  if(huart->Instance==USART2)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a1b      	ldr	r2, [pc, #108]	@ (80004d4 <HAL_UART_MspInit+0x8c>)
 8000466:	4293      	cmp	r3, r2
 8000468:	d130      	bne.n	80004cc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800046a:	4b1b      	ldr	r3, [pc, #108]	@ (80004d8 <HAL_UART_MspInit+0x90>)
 800046c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800046e:	4b1a      	ldr	r3, [pc, #104]	@ (80004d8 <HAL_UART_MspInit+0x90>)
 8000470:	2180      	movs	r1, #128	@ 0x80
 8000472:	0289      	lsls	r1, r1, #10
 8000474:	430a      	orrs	r2, r1
 8000476:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000478:	4b17      	ldr	r3, [pc, #92]	@ (80004d8 <HAL_UART_MspInit+0x90>)
 800047a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800047c:	2380      	movs	r3, #128	@ 0x80
 800047e:	029b      	lsls	r3, r3, #10
 8000480:	4013      	ands	r3, r2
 8000482:	613b      	str	r3, [r7, #16]
 8000484:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000486:	4b14      	ldr	r3, [pc, #80]	@ (80004d8 <HAL_UART_MspInit+0x90>)
 8000488:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800048a:	4b13      	ldr	r3, [pc, #76]	@ (80004d8 <HAL_UART_MspInit+0x90>)
 800048c:	2101      	movs	r1, #1
 800048e:	430a      	orrs	r2, r1
 8000490:	635a      	str	r2, [r3, #52]	@ 0x34
 8000492:	4b11      	ldr	r3, [pc, #68]	@ (80004d8 <HAL_UART_MspInit+0x90>)
 8000494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000496:	2201      	movs	r2, #1
 8000498:	4013      	ands	r3, r2
 800049a:	60fb      	str	r3, [r7, #12]
 800049c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800049e:	0021      	movs	r1, r4
 80004a0:	187b      	adds	r3, r7, r1
 80004a2:	220c      	movs	r2, #12
 80004a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004a6:	187b      	adds	r3, r7, r1
 80004a8:	2202      	movs	r2, #2
 80004aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ac:	187b      	adds	r3, r7, r1
 80004ae:	2200      	movs	r2, #0
 80004b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2200      	movs	r2, #0
 80004b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80004b8:	187b      	adds	r3, r7, r1
 80004ba:	2201      	movs	r2, #1
 80004bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004be:	187a      	adds	r2, r7, r1
 80004c0:	23a0      	movs	r3, #160	@ 0xa0
 80004c2:	05db      	lsls	r3, r3, #23
 80004c4:	0011      	movs	r1, r2
 80004c6:	0018      	movs	r0, r3
 80004c8:	f000 fa46 	bl	8000958 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80004cc:	46c0      	nop			@ (mov r8, r8)
 80004ce:	46bd      	mov	sp, r7
 80004d0:	b00b      	add	sp, #44	@ 0x2c
 80004d2:	bd90      	pop	{r4, r7, pc}
 80004d4:	40004400 	.word	0x40004400
 80004d8:	40021000 	.word	0x40021000

080004dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004e0:	46c0      	nop			@ (mov r8, r8)
 80004e2:	e7fd      	b.n	80004e0 <NMI_Handler+0x4>

080004e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004e8:	46c0      	nop			@ (mov r8, r8)
 80004ea:	e7fd      	b.n	80004e8 <HardFault_Handler+0x4>

080004ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80004f0:	46c0      	nop			@ (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}

080004f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004f6:	b580      	push	{r7, lr}
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004fa:	46c0      	nop			@ (mov r8, r8)
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}

08000500 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000504:	f000 f934 	bl	8000770 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000508:	46c0      	nop			@ (mov r8, r8)
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}

0800050e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800050e:	b580      	push	{r7, lr}
 8000510:	b086      	sub	sp, #24
 8000512:	af00      	add	r7, sp, #0
 8000514:	60f8      	str	r0, [r7, #12]
 8000516:	60b9      	str	r1, [r7, #8]
 8000518:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]
 800051e:	e00a      	b.n	8000536 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000520:	e000      	b.n	8000524 <_read+0x16>
 8000522:	bf00      	nop
 8000524:	0001      	movs	r1, r0
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	1c5a      	adds	r2, r3, #1
 800052a:	60ba      	str	r2, [r7, #8]
 800052c:	b2ca      	uxtb	r2, r1
 800052e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000530:	697b      	ldr	r3, [r7, #20]
 8000532:	3301      	adds	r3, #1
 8000534:	617b      	str	r3, [r7, #20]
 8000536:	697a      	ldr	r2, [r7, #20]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	429a      	cmp	r2, r3
 800053c:	dbf0      	blt.n	8000520 <_read+0x12>
  }

  return len;
 800053e:	687b      	ldr	r3, [r7, #4]
}
 8000540:	0018      	movs	r0, r3
 8000542:	46bd      	mov	sp, r7
 8000544:	b006      	add	sp, #24
 8000546:	bd80      	pop	{r7, pc}

08000548 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af00      	add	r7, sp, #0
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	60b9      	str	r1, [r7, #8]
 8000552:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000554:	2300      	movs	r3, #0
 8000556:	617b      	str	r3, [r7, #20]
 8000558:	e009      	b.n	800056e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800055a:	68bb      	ldr	r3, [r7, #8]
 800055c:	1c5a      	adds	r2, r3, #1
 800055e:	60ba      	str	r2, [r7, #8]
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	0018      	movs	r0, r3
 8000564:	f7ff ff32 	bl	80003cc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	3301      	adds	r3, #1
 800056c:	617b      	str	r3, [r7, #20]
 800056e:	697a      	ldr	r2, [r7, #20]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	429a      	cmp	r2, r3
 8000574:	dbf1      	blt.n	800055a <_write+0x12>
  }
  return len;
 8000576:	687b      	ldr	r3, [r7, #4]
}
 8000578:	0018      	movs	r0, r3
 800057a:	46bd      	mov	sp, r7
 800057c:	b006      	add	sp, #24
 800057e:	bd80      	pop	{r7, pc}

08000580 <_close>:

int _close(int file)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000588:	2301      	movs	r3, #1
 800058a:	425b      	negs	r3, r3
}
 800058c:	0018      	movs	r0, r3
 800058e:	46bd      	mov	sp, r7
 8000590:	b002      	add	sp, #8
 8000592:	bd80      	pop	{r7, pc}

08000594 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	2280      	movs	r2, #128	@ 0x80
 80005a2:	0192      	lsls	r2, r2, #6
 80005a4:	605a      	str	r2, [r3, #4]
  return 0;
 80005a6:	2300      	movs	r3, #0
}
 80005a8:	0018      	movs	r0, r3
 80005aa:	46bd      	mov	sp, r7
 80005ac:	b002      	add	sp, #8
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <_isatty>:

int _isatty(int file)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005b8:	2301      	movs	r3, #1
}
 80005ba:	0018      	movs	r0, r3
 80005bc:	46bd      	mov	sp, r7
 80005be:	b002      	add	sp, #8
 80005c0:	bd80      	pop	{r7, pc}

080005c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b084      	sub	sp, #16
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	60f8      	str	r0, [r7, #12]
 80005ca:	60b9      	str	r1, [r7, #8]
 80005cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005ce:	2300      	movs	r3, #0
}
 80005d0:	0018      	movs	r0, r3
 80005d2:	46bd      	mov	sp, r7
 80005d4:	b004      	add	sp, #16
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005e0:	4a14      	ldr	r2, [pc, #80]	@ (8000634 <_sbrk+0x5c>)
 80005e2:	4b15      	ldr	r3, [pc, #84]	@ (8000638 <_sbrk+0x60>)
 80005e4:	1ad3      	subs	r3, r2, r3
 80005e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005ec:	4b13      	ldr	r3, [pc, #76]	@ (800063c <_sbrk+0x64>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d102      	bne.n	80005fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005f4:	4b11      	ldr	r3, [pc, #68]	@ (800063c <_sbrk+0x64>)
 80005f6:	4a12      	ldr	r2, [pc, #72]	@ (8000640 <_sbrk+0x68>)
 80005f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005fa:	4b10      	ldr	r3, [pc, #64]	@ (800063c <_sbrk+0x64>)
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	18d3      	adds	r3, r2, r3
 8000602:	693a      	ldr	r2, [r7, #16]
 8000604:	429a      	cmp	r2, r3
 8000606:	d207      	bcs.n	8000618 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000608:	f001 fcbe 	bl	8001f88 <__errno>
 800060c:	0003      	movs	r3, r0
 800060e:	220c      	movs	r2, #12
 8000610:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000612:	2301      	movs	r3, #1
 8000614:	425b      	negs	r3, r3
 8000616:	e009      	b.n	800062c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000618:	4b08      	ldr	r3, [pc, #32]	@ (800063c <_sbrk+0x64>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800061e:	4b07      	ldr	r3, [pc, #28]	@ (800063c <_sbrk+0x64>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	18d2      	adds	r2, r2, r3
 8000626:	4b05      	ldr	r3, [pc, #20]	@ (800063c <_sbrk+0x64>)
 8000628:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800062a:	68fb      	ldr	r3, [r7, #12]
}
 800062c:	0018      	movs	r0, r3
 800062e:	46bd      	mov	sp, r7
 8000630:	b006      	add	sp, #24
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20003000 	.word	0x20003000
 8000638:	00000400 	.word	0x00000400
 800063c:	20000118 	.word	0x20000118
 8000640:	20000270 	.word	0x20000270

08000644 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000648:	4b03      	ldr	r3, [pc, #12]	@ (8000658 <SystemInit+0x14>)
 800064a:	2280      	movs	r2, #128	@ 0x80
 800064c:	0512      	lsls	r2, r2, #20
 800064e:	609a      	str	r2, [r3, #8]
#endif
}
 8000650:	46c0      	nop			@ (mov r8, r8)
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	46c0      	nop			@ (mov r8, r8)
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800065c:	480d      	ldr	r0, [pc, #52]	@ (8000694 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800065e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000660:	f7ff fff0 	bl	8000644 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000664:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000666:	e003      	b.n	8000670 <LoopCopyDataInit>

08000668 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000668:	4b0b      	ldr	r3, [pc, #44]	@ (8000698 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800066a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800066c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800066e:	3104      	adds	r1, #4

08000670 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000670:	480a      	ldr	r0, [pc, #40]	@ (800069c <LoopForever+0xa>)
  ldr r3, =_edata
 8000672:	4b0b      	ldr	r3, [pc, #44]	@ (80006a0 <LoopForever+0xe>)
  adds r2, r0, r1
 8000674:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000676:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000678:	d3f6      	bcc.n	8000668 <CopyDataInit>
  ldr r2, =_sbss
 800067a:	4a0a      	ldr	r2, [pc, #40]	@ (80006a4 <LoopForever+0x12>)
  b LoopFillZerobss
 800067c:	e002      	b.n	8000684 <LoopFillZerobss>

0800067e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800067e:	2300      	movs	r3, #0
  str  r3, [r2]
 8000680:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000682:	3204      	adds	r2, #4

08000684 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000684:	4b08      	ldr	r3, [pc, #32]	@ (80006a8 <LoopForever+0x16>)
  cmp r2, r3
 8000686:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000688:	d3f9      	bcc.n	800067e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800068a:	f001 fc83 	bl	8001f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800068e:	f7ff fdd1 	bl	8000234 <main>

08000692 <LoopForever>:

LoopForever:
    b LoopForever
 8000692:	e7fe      	b.n	8000692 <LoopForever>
  ldr   r0, =_estack
 8000694:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000698:	08002c40 	.word	0x08002c40
  ldr r0, =_sdata
 800069c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80006a0:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 80006a4:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 80006a8:	2000026c 	.word	0x2000026c

080006ac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006ac:	e7fe      	b.n	80006ac <ADC1_IRQHandler>

080006ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b082      	sub	sp, #8
 80006b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006b4:	1dfb      	adds	r3, r7, #7
 80006b6:	2200      	movs	r2, #0
 80006b8:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006ba:	2003      	movs	r0, #3
 80006bc:	f000 f80e 	bl	80006dc <HAL_InitTick>
 80006c0:	1e03      	subs	r3, r0, #0
 80006c2:	d003      	beq.n	80006cc <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80006c4:	1dfb      	adds	r3, r7, #7
 80006c6:	2201      	movs	r2, #1
 80006c8:	701a      	strb	r2, [r3, #0]
 80006ca:	e001      	b.n	80006d0 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006cc:	f7ff fe98 	bl	8000400 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006d0:	1dfb      	adds	r3, r7, #7
 80006d2:	781b      	ldrb	r3, [r3, #0]
}
 80006d4:	0018      	movs	r0, r3
 80006d6:	46bd      	mov	sp, r7
 80006d8:	b002      	add	sp, #8
 80006da:	bd80      	pop	{r7, pc}

080006dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006dc:	b590      	push	{r4, r7, lr}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006e4:	230f      	movs	r3, #15
 80006e6:	18fb      	adds	r3, r7, r3
 80006e8:	2200      	movs	r2, #0
 80006ea:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 80006ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000764 <HAL_InitTick+0x88>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d02b      	beq.n	800074c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 80006f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000768 <HAL_InitTick+0x8c>)
 80006f6:	681c      	ldr	r4, [r3, #0]
 80006f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000764 <HAL_InitTick+0x88>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	0019      	movs	r1, r3
 80006fe:	23fa      	movs	r3, #250	@ 0xfa
 8000700:	0098      	lsls	r0, r3, #2
 8000702:	f7ff fd0b 	bl	800011c <__udivsi3>
 8000706:	0003      	movs	r3, r0
 8000708:	0019      	movs	r1, r3
 800070a:	0020      	movs	r0, r4
 800070c:	f7ff fd06 	bl	800011c <__udivsi3>
 8000710:	0003      	movs	r3, r0
 8000712:	0018      	movs	r0, r3
 8000714:	f000 f913 	bl	800093e <HAL_SYSTICK_Config>
 8000718:	1e03      	subs	r3, r0, #0
 800071a:	d112      	bne.n	8000742 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2b03      	cmp	r3, #3
 8000720:	d80a      	bhi.n	8000738 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000722:	6879      	ldr	r1, [r7, #4]
 8000724:	2301      	movs	r3, #1
 8000726:	425b      	negs	r3, r3
 8000728:	2200      	movs	r2, #0
 800072a:	0018      	movs	r0, r3
 800072c:	f000 f8f2 	bl	8000914 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000730:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <HAL_InitTick+0x90>)
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	e00d      	b.n	8000754 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000738:	230f      	movs	r3, #15
 800073a:	18fb      	adds	r3, r7, r3
 800073c:	2201      	movs	r2, #1
 800073e:	701a      	strb	r2, [r3, #0]
 8000740:	e008      	b.n	8000754 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000742:	230f      	movs	r3, #15
 8000744:	18fb      	adds	r3, r7, r3
 8000746:	2201      	movs	r2, #1
 8000748:	701a      	strb	r2, [r3, #0]
 800074a:	e003      	b.n	8000754 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800074c:	230f      	movs	r3, #15
 800074e:	18fb      	adds	r3, r7, r3
 8000750:	2201      	movs	r2, #1
 8000752:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000754:	230f      	movs	r3, #15
 8000756:	18fb      	adds	r3, r7, r3
 8000758:	781b      	ldrb	r3, [r3, #0]
}
 800075a:	0018      	movs	r0, r3
 800075c:	46bd      	mov	sp, r7
 800075e:	b005      	add	sp, #20
 8000760:	bd90      	pop	{r4, r7, pc}
 8000762:	46c0      	nop			@ (mov r8, r8)
 8000764:	20000008 	.word	0x20000008
 8000768:	20000000 	.word	0x20000000
 800076c:	20000004 	.word	0x20000004

08000770 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000774:	4b05      	ldr	r3, [pc, #20]	@ (800078c <HAL_IncTick+0x1c>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	001a      	movs	r2, r3
 800077a:	4b05      	ldr	r3, [pc, #20]	@ (8000790 <HAL_IncTick+0x20>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	18d2      	adds	r2, r2, r3
 8000780:	4b03      	ldr	r3, [pc, #12]	@ (8000790 <HAL_IncTick+0x20>)
 8000782:	601a      	str	r2, [r3, #0]
}
 8000784:	46c0      	nop			@ (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	46c0      	nop			@ (mov r8, r8)
 800078c:	20000008 	.word	0x20000008
 8000790:	2000011c 	.word	0x2000011c

08000794 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  return uwTick;
 8000798:	4b02      	ldr	r3, [pc, #8]	@ (80007a4 <HAL_GetTick+0x10>)
 800079a:	681b      	ldr	r3, [r3, #0]
}
 800079c:	0018      	movs	r0, r3
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	46c0      	nop			@ (mov r8, r8)
 80007a4:	2000011c 	.word	0x2000011c

080007a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007b0:	f7ff fff0 	bl	8000794 <HAL_GetTick>
 80007b4:	0003      	movs	r3, r0
 80007b6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	3301      	adds	r3, #1
 80007c0:	d005      	beq.n	80007ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007c2:	4b0a      	ldr	r3, [pc, #40]	@ (80007ec <HAL_Delay+0x44>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	001a      	movs	r2, r3
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	189b      	adds	r3, r3, r2
 80007cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007ce:	46c0      	nop			@ (mov r8, r8)
 80007d0:	f7ff ffe0 	bl	8000794 <HAL_GetTick>
 80007d4:	0002      	movs	r2, r0
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	68fa      	ldr	r2, [r7, #12]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d8f7      	bhi.n	80007d0 <HAL_Delay+0x28>
  {
  }
}
 80007e0:	46c0      	nop			@ (mov r8, r8)
 80007e2:	46c0      	nop			@ (mov r8, r8)
 80007e4:	46bd      	mov	sp, r7
 80007e6:	b004      	add	sp, #16
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	46c0      	nop			@ (mov r8, r8)
 80007ec:	20000008 	.word	0x20000008

080007f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	0002      	movs	r2, r0
 80007f8:	6039      	str	r1, [r7, #0]
 80007fa:	1dfb      	adds	r3, r7, #7
 80007fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007fe:	1dfb      	adds	r3, r7, #7
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	2b7f      	cmp	r3, #127	@ 0x7f
 8000804:	d828      	bhi.n	8000858 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000806:	4a2f      	ldr	r2, [pc, #188]	@ (80008c4 <__NVIC_SetPriority+0xd4>)
 8000808:	1dfb      	adds	r3, r7, #7
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	b25b      	sxtb	r3, r3
 800080e:	089b      	lsrs	r3, r3, #2
 8000810:	33c0      	adds	r3, #192	@ 0xc0
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	589b      	ldr	r3, [r3, r2]
 8000816:	1dfa      	adds	r2, r7, #7
 8000818:	7812      	ldrb	r2, [r2, #0]
 800081a:	0011      	movs	r1, r2
 800081c:	2203      	movs	r2, #3
 800081e:	400a      	ands	r2, r1
 8000820:	00d2      	lsls	r2, r2, #3
 8000822:	21ff      	movs	r1, #255	@ 0xff
 8000824:	4091      	lsls	r1, r2
 8000826:	000a      	movs	r2, r1
 8000828:	43d2      	mvns	r2, r2
 800082a:	401a      	ands	r2, r3
 800082c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	019b      	lsls	r3, r3, #6
 8000832:	22ff      	movs	r2, #255	@ 0xff
 8000834:	401a      	ands	r2, r3
 8000836:	1dfb      	adds	r3, r7, #7
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	0018      	movs	r0, r3
 800083c:	2303      	movs	r3, #3
 800083e:	4003      	ands	r3, r0
 8000840:	00db      	lsls	r3, r3, #3
 8000842:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000844:	481f      	ldr	r0, [pc, #124]	@ (80008c4 <__NVIC_SetPriority+0xd4>)
 8000846:	1dfb      	adds	r3, r7, #7
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	b25b      	sxtb	r3, r3
 800084c:	089b      	lsrs	r3, r3, #2
 800084e:	430a      	orrs	r2, r1
 8000850:	33c0      	adds	r3, #192	@ 0xc0
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000856:	e031      	b.n	80008bc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000858:	4a1b      	ldr	r2, [pc, #108]	@ (80008c8 <__NVIC_SetPriority+0xd8>)
 800085a:	1dfb      	adds	r3, r7, #7
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	0019      	movs	r1, r3
 8000860:	230f      	movs	r3, #15
 8000862:	400b      	ands	r3, r1
 8000864:	3b08      	subs	r3, #8
 8000866:	089b      	lsrs	r3, r3, #2
 8000868:	3306      	adds	r3, #6
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	18d3      	adds	r3, r2, r3
 800086e:	3304      	adds	r3, #4
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	1dfa      	adds	r2, r7, #7
 8000874:	7812      	ldrb	r2, [r2, #0]
 8000876:	0011      	movs	r1, r2
 8000878:	2203      	movs	r2, #3
 800087a:	400a      	ands	r2, r1
 800087c:	00d2      	lsls	r2, r2, #3
 800087e:	21ff      	movs	r1, #255	@ 0xff
 8000880:	4091      	lsls	r1, r2
 8000882:	000a      	movs	r2, r1
 8000884:	43d2      	mvns	r2, r2
 8000886:	401a      	ands	r2, r3
 8000888:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	019b      	lsls	r3, r3, #6
 800088e:	22ff      	movs	r2, #255	@ 0xff
 8000890:	401a      	ands	r2, r3
 8000892:	1dfb      	adds	r3, r7, #7
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	0018      	movs	r0, r3
 8000898:	2303      	movs	r3, #3
 800089a:	4003      	ands	r3, r0
 800089c:	00db      	lsls	r3, r3, #3
 800089e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008a0:	4809      	ldr	r0, [pc, #36]	@ (80008c8 <__NVIC_SetPriority+0xd8>)
 80008a2:	1dfb      	adds	r3, r7, #7
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	001c      	movs	r4, r3
 80008a8:	230f      	movs	r3, #15
 80008aa:	4023      	ands	r3, r4
 80008ac:	3b08      	subs	r3, #8
 80008ae:	089b      	lsrs	r3, r3, #2
 80008b0:	430a      	orrs	r2, r1
 80008b2:	3306      	adds	r3, #6
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	18c3      	adds	r3, r0, r3
 80008b8:	3304      	adds	r3, #4
 80008ba:	601a      	str	r2, [r3, #0]
}
 80008bc:	46c0      	nop			@ (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	b003      	add	sp, #12
 80008c2:	bd90      	pop	{r4, r7, pc}
 80008c4:	e000e100 	.word	0xe000e100
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	1e5a      	subs	r2, r3, #1
 80008d8:	2380      	movs	r3, #128	@ 0x80
 80008da:	045b      	lsls	r3, r3, #17
 80008dc:	429a      	cmp	r2, r3
 80008de:	d301      	bcc.n	80008e4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008e0:	2301      	movs	r3, #1
 80008e2:	e010      	b.n	8000906 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000910 <SysTick_Config+0x44>)
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	3a01      	subs	r2, #1
 80008ea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ec:	2301      	movs	r3, #1
 80008ee:	425b      	negs	r3, r3
 80008f0:	2103      	movs	r1, #3
 80008f2:	0018      	movs	r0, r3
 80008f4:	f7ff ff7c 	bl	80007f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008f8:	4b05      	ldr	r3, [pc, #20]	@ (8000910 <SysTick_Config+0x44>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008fe:	4b04      	ldr	r3, [pc, #16]	@ (8000910 <SysTick_Config+0x44>)
 8000900:	2207      	movs	r2, #7
 8000902:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000904:	2300      	movs	r3, #0
}
 8000906:	0018      	movs	r0, r3
 8000908:	46bd      	mov	sp, r7
 800090a:	b002      	add	sp, #8
 800090c:	bd80      	pop	{r7, pc}
 800090e:	46c0      	nop			@ (mov r8, r8)
 8000910:	e000e010 	.word	0xe000e010

08000914 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	60b9      	str	r1, [r7, #8]
 800091c:	607a      	str	r2, [r7, #4]
 800091e:	210f      	movs	r1, #15
 8000920:	187b      	adds	r3, r7, r1
 8000922:	1c02      	adds	r2, r0, #0
 8000924:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000926:	68ba      	ldr	r2, [r7, #8]
 8000928:	187b      	adds	r3, r7, r1
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	b25b      	sxtb	r3, r3
 800092e:	0011      	movs	r1, r2
 8000930:	0018      	movs	r0, r3
 8000932:	f7ff ff5d 	bl	80007f0 <__NVIC_SetPriority>
}
 8000936:	46c0      	nop			@ (mov r8, r8)
 8000938:	46bd      	mov	sp, r7
 800093a:	b004      	add	sp, #16
 800093c:	bd80      	pop	{r7, pc}

0800093e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b082      	sub	sp, #8
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	0018      	movs	r0, r3
 800094a:	f7ff ffbf 	bl	80008cc <SysTick_Config>
 800094e:	0003      	movs	r3, r0
}
 8000950:	0018      	movs	r0, r3
 8000952:	46bd      	mov	sp, r7
 8000954:	b002      	add	sp, #8
 8000956:	bd80      	pop	{r7, pc}

08000958 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000966:	e153      	b.n	8000c10 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2101      	movs	r1, #1
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	4091      	lsls	r1, r2
 8000972:	000a      	movs	r2, r1
 8000974:	4013      	ands	r3, r2
 8000976:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d100      	bne.n	8000980 <HAL_GPIO_Init+0x28>
 800097e:	e144      	b.n	8000c0a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	2b02      	cmp	r3, #2
 8000986:	d003      	beq.n	8000990 <HAL_GPIO_Init+0x38>
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	2b12      	cmp	r3, #18
 800098e:	d125      	bne.n	80009dc <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000990:	693b      	ldr	r3, [r7, #16]
 8000992:	08da      	lsrs	r2, r3, #3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3208      	adds	r2, #8
 8000998:	0092      	lsls	r2, r2, #2
 800099a:	58d3      	ldr	r3, [r2, r3]
 800099c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 800099e:	693b      	ldr	r3, [r7, #16]
 80009a0:	2207      	movs	r2, #7
 80009a2:	4013      	ands	r3, r2
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	220f      	movs	r2, #15
 80009a8:	409a      	lsls	r2, r3
 80009aa:	0013      	movs	r3, r2
 80009ac:	43da      	mvns	r2, r3
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	4013      	ands	r3, r2
 80009b2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	691b      	ldr	r3, [r3, #16]
 80009b8:	220f      	movs	r2, #15
 80009ba:	401a      	ands	r2, r3
 80009bc:	693b      	ldr	r3, [r7, #16]
 80009be:	2107      	movs	r1, #7
 80009c0:	400b      	ands	r3, r1
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	409a      	lsls	r2, r3
 80009c6:	0013      	movs	r3, r2
 80009c8:	697a      	ldr	r2, [r7, #20]
 80009ca:	4313      	orrs	r3, r2
 80009cc:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80009ce:	693b      	ldr	r3, [r7, #16]
 80009d0:	08da      	lsrs	r2, r3, #3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	3208      	adds	r2, #8
 80009d6:	0092      	lsls	r2, r2, #2
 80009d8:	6979      	ldr	r1, [r7, #20]
 80009da:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80009e2:	693b      	ldr	r3, [r7, #16]
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	2203      	movs	r2, #3
 80009e8:	409a      	lsls	r2, r3
 80009ea:	0013      	movs	r3, r2
 80009ec:	43da      	mvns	r2, r3
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	4013      	ands	r3, r2
 80009f2:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	2203      	movs	r2, #3
 80009fa:	401a      	ands	r2, r3
 80009fc:	693b      	ldr	r3, [r7, #16]
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	409a      	lsls	r2, r3
 8000a02:	0013      	movs	r3, r2
 8000a04:	697a      	ldr	r2, [r7, #20]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	697a      	ldr	r2, [r7, #20]
 8000a0e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d00b      	beq.n	8000a30 <HAL_GPIO_Init+0xd8>
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	2b02      	cmp	r3, #2
 8000a1e:	d007      	beq.n	8000a30 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a24:	2b11      	cmp	r3, #17
 8000a26:	d003      	beq.n	8000a30 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	2b12      	cmp	r3, #18
 8000a2e:	d130      	bne.n	8000a92 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	2203      	movs	r2, #3
 8000a3c:	409a      	lsls	r2, r3
 8000a3e:	0013      	movs	r3, r2
 8000a40:	43da      	mvns	r2, r3
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	4013      	ands	r3, r2
 8000a46:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	68da      	ldr	r2, [r3, #12]
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	409a      	lsls	r2, r3
 8000a52:	0013      	movs	r3, r2
 8000a54:	697a      	ldr	r2, [r7, #20]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	697a      	ldr	r2, [r7, #20]
 8000a5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a66:	2201      	movs	r2, #1
 8000a68:	693b      	ldr	r3, [r7, #16]
 8000a6a:	409a      	lsls	r2, r3
 8000a6c:	0013      	movs	r3, r2
 8000a6e:	43da      	mvns	r2, r3
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	4013      	ands	r3, r2
 8000a74:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	091b      	lsrs	r3, r3, #4
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	401a      	ands	r2, r3
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	409a      	lsls	r2, r3
 8000a84:	0013      	movs	r3, r2
 8000a86:	697a      	ldr	r2, [r7, #20]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	697a      	ldr	r2, [r7, #20]
 8000a90:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	2b03      	cmp	r3, #3
 8000a98:	d017      	beq.n	8000aca <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	68db      	ldr	r3, [r3, #12]
 8000a9e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	2203      	movs	r2, #3
 8000aa6:	409a      	lsls	r2, r3
 8000aa8:	0013      	movs	r3, r2
 8000aaa:	43da      	mvns	r2, r3
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	4013      	ands	r3, r2
 8000ab0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	689a      	ldr	r2, [r3, #8]
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	409a      	lsls	r2, r3
 8000abc:	0013      	movs	r3, r2
 8000abe:	697a      	ldr	r2, [r7, #20]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	697a      	ldr	r2, [r7, #20]
 8000ac8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685a      	ldr	r2, [r3, #4]
 8000ace:	2380      	movs	r3, #128	@ 0x80
 8000ad0:	055b      	lsls	r3, r3, #21
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	d100      	bne.n	8000ad8 <HAL_GPIO_Init+0x180>
 8000ad6:	e098      	b.n	8000c0a <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000ad8:	4a53      	ldr	r2, [pc, #332]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	089b      	lsrs	r3, r3, #2
 8000ade:	3318      	adds	r3, #24
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	589b      	ldr	r3, [r3, r2]
 8000ae4:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	2203      	movs	r2, #3
 8000aea:	4013      	ands	r3, r2
 8000aec:	00db      	lsls	r3, r3, #3
 8000aee:	220f      	movs	r2, #15
 8000af0:	409a      	lsls	r2, r3
 8000af2:	0013      	movs	r3, r2
 8000af4:	43da      	mvns	r2, r3
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	4013      	ands	r3, r2
 8000afa:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	23a0      	movs	r3, #160	@ 0xa0
 8000b00:	05db      	lsls	r3, r3, #23
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d019      	beq.n	8000b3a <HAL_GPIO_Init+0x1e2>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4a48      	ldr	r2, [pc, #288]	@ (8000c2c <HAL_GPIO_Init+0x2d4>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d013      	beq.n	8000b36 <HAL_GPIO_Init+0x1de>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4a47      	ldr	r2, [pc, #284]	@ (8000c30 <HAL_GPIO_Init+0x2d8>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d00d      	beq.n	8000b32 <HAL_GPIO_Init+0x1da>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4a46      	ldr	r2, [pc, #280]	@ (8000c34 <HAL_GPIO_Init+0x2dc>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d007      	beq.n	8000b2e <HAL_GPIO_Init+0x1d6>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4a45      	ldr	r2, [pc, #276]	@ (8000c38 <HAL_GPIO_Init+0x2e0>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d101      	bne.n	8000b2a <HAL_GPIO_Init+0x1d2>
 8000b26:	2305      	movs	r3, #5
 8000b28:	e008      	b.n	8000b3c <HAL_GPIO_Init+0x1e4>
 8000b2a:	2306      	movs	r3, #6
 8000b2c:	e006      	b.n	8000b3c <HAL_GPIO_Init+0x1e4>
 8000b2e:	2303      	movs	r3, #3
 8000b30:	e004      	b.n	8000b3c <HAL_GPIO_Init+0x1e4>
 8000b32:	2302      	movs	r3, #2
 8000b34:	e002      	b.n	8000b3c <HAL_GPIO_Init+0x1e4>
 8000b36:	2301      	movs	r3, #1
 8000b38:	e000      	b.n	8000b3c <HAL_GPIO_Init+0x1e4>
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	2103      	movs	r1, #3
 8000b40:	400a      	ands	r2, r1
 8000b42:	00d2      	lsls	r2, r2, #3
 8000b44:	4093      	lsls	r3, r2
 8000b46:	697a      	ldr	r2, [r7, #20]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000b4c:	4936      	ldr	r1, [pc, #216]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	089b      	lsrs	r3, r3, #2
 8000b52:	3318      	adds	r3, #24
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	697a      	ldr	r2, [r7, #20]
 8000b58:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8000b5a:	4a33      	ldr	r2, [pc, #204]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b5c:	2380      	movs	r3, #128	@ 0x80
 8000b5e:	58d3      	ldr	r3, [r2, r3]
 8000b60:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	43da      	mvns	r2, r3
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	4013      	ands	r3, r2
 8000b6a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685a      	ldr	r2, [r3, #4]
 8000b70:	2380      	movs	r3, #128	@ 0x80
 8000b72:	025b      	lsls	r3, r3, #9
 8000b74:	4013      	ands	r3, r2
 8000b76:	d003      	beq.n	8000b80 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8000b78:	697a      	ldr	r2, [r7, #20]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8000b80:	4929      	ldr	r1, [pc, #164]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b82:	2280      	movs	r2, #128	@ 0x80
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8000b88:	4a27      	ldr	r2, [pc, #156]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b8a:	2384      	movs	r3, #132	@ 0x84
 8000b8c:	58d3      	ldr	r3, [r2, r3]
 8000b8e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	43da      	mvns	r2, r3
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	4013      	ands	r3, r2
 8000b98:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685a      	ldr	r2, [r3, #4]
 8000b9e:	2380      	movs	r3, #128	@ 0x80
 8000ba0:	029b      	lsls	r3, r3, #10
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	d003      	beq.n	8000bae <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8000ba6:	697a      	ldr	r2, [r7, #20]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	4313      	orrs	r3, r2
 8000bac:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8000bae:	491e      	ldr	r1, [pc, #120]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bb0:	2284      	movs	r2, #132	@ 0x84
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000bb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	43da      	mvns	r2, r3
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685a      	ldr	r2, [r3, #4]
 8000bca:	2380      	movs	r3, #128	@ 0x80
 8000bcc:	035b      	lsls	r3, r3, #13
 8000bce:	4013      	ands	r3, r2
 8000bd0:	d003      	beq.n	8000bda <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8000bd2:	697a      	ldr	r2, [r7, #20]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000bda:	4b13      	ldr	r3, [pc, #76]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bdc:	697a      	ldr	r2, [r7, #20]
 8000bde:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8000be0:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	43da      	mvns	r2, r3
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	4013      	ands	r3, r2
 8000bee:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685a      	ldr	r2, [r3, #4]
 8000bf4:	2380      	movs	r3, #128	@ 0x80
 8000bf6:	039b      	lsls	r3, r3, #14
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	d003      	beq.n	8000c04 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8000bfc:	697a      	ldr	r2, [r7, #20]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8000c04:	4b08      	ldr	r3, [pc, #32]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000c06:	697a      	ldr	r2, [r7, #20]
 8000c08:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	40da      	lsrs	r2, r3
 8000c18:	1e13      	subs	r3, r2, #0
 8000c1a:	d000      	beq.n	8000c1e <HAL_GPIO_Init+0x2c6>
 8000c1c:	e6a4      	b.n	8000968 <HAL_GPIO_Init+0x10>
  }
}
 8000c1e:	46c0      	nop			@ (mov r8, r8)
 8000c20:	46c0      	nop			@ (mov r8, r8)
 8000c22:	46bd      	mov	sp, r7
 8000c24:	b006      	add	sp, #24
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40021800 	.word	0x40021800
 8000c2c:	50000400 	.word	0x50000400
 8000c30:	50000800 	.word	0x50000800
 8000c34:	50000c00 	.word	0x50000c00
 8000c38:	50001400 	.word	0x50001400

08000c3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	0008      	movs	r0, r1
 8000c46:	0011      	movs	r1, r2
 8000c48:	1cbb      	adds	r3, r7, #2
 8000c4a:	1c02      	adds	r2, r0, #0
 8000c4c:	801a      	strh	r2, [r3, #0]
 8000c4e:	1c7b      	adds	r3, r7, #1
 8000c50:	1c0a      	adds	r2, r1, #0
 8000c52:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c54:	1c7b      	adds	r3, r7, #1
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d004      	beq.n	8000c66 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c5c:	1cbb      	adds	r3, r7, #2
 8000c5e:	881a      	ldrh	r2, [r3, #0]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c64:	e003      	b.n	8000c6e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c66:	1cbb      	adds	r3, r7, #2
 8000c68:	881a      	ldrh	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000c6e:	46c0      	nop			@ (mov r8, r8)
 8000c70:	46bd      	mov	sp, r7
 8000c72:	b002      	add	sp, #8
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32C0 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b084      	sub	sp, #16
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
 8000c7e:	000a      	movs	r2, r1
 8000c80:	1cbb      	adds	r3, r7, #2
 8000c82:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	695b      	ldr	r3, [r3, #20]
 8000c88:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c8a:	1cbb      	adds	r3, r7, #2
 8000c8c:	881b      	ldrh	r3, [r3, #0]
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	4013      	ands	r3, r2
 8000c92:	041a      	lsls	r2, r3, #16
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	43db      	mvns	r3, r3
 8000c98:	1cb9      	adds	r1, r7, #2
 8000c9a:	8809      	ldrh	r1, [r1, #0]
 8000c9c:	400b      	ands	r3, r1
 8000c9e:	431a      	orrs	r2, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	619a      	str	r2, [r3, #24]
}
 8000ca4:	46c0      	nop			@ (mov r8, r8)
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	b004      	add	sp, #16
 8000caa:	bd80      	pop	{r7, pc}

08000cac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d101      	bne.n	8000cbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e1d0      	b.n	8001060 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	d100      	bne.n	8000cca <HAL_RCC_OscConfig+0x1e>
 8000cc8:	e069      	b.n	8000d9e <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000cca:	4bc8      	ldr	r3, [pc, #800]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	2238      	movs	r2, #56	@ 0x38
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	2b08      	cmp	r3, #8
 8000cd8:	d105      	bne.n	8000ce6 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d15d      	bne.n	8000d9e <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e1bc      	b.n	8001060 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	685a      	ldr	r2, [r3, #4]
 8000cea:	2380      	movs	r3, #128	@ 0x80
 8000cec:	025b      	lsls	r3, r3, #9
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d107      	bne.n	8000d02 <HAL_RCC_OscConfig+0x56>
 8000cf2:	4bbe      	ldr	r3, [pc, #760]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	4bbd      	ldr	r3, [pc, #756]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000cf8:	2180      	movs	r1, #128	@ 0x80
 8000cfa:	0249      	lsls	r1, r1, #9
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	e020      	b.n	8000d44 <HAL_RCC_OscConfig+0x98>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	685a      	ldr	r2, [r3, #4]
 8000d06:	23a0      	movs	r3, #160	@ 0xa0
 8000d08:	02db      	lsls	r3, r3, #11
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	d10e      	bne.n	8000d2c <HAL_RCC_OscConfig+0x80>
 8000d0e:	4bb7      	ldr	r3, [pc, #732]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	4bb6      	ldr	r3, [pc, #728]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000d14:	2180      	movs	r1, #128	@ 0x80
 8000d16:	02c9      	lsls	r1, r1, #11
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	4bb3      	ldr	r3, [pc, #716]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4bb2      	ldr	r3, [pc, #712]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000d22:	2180      	movs	r1, #128	@ 0x80
 8000d24:	0249      	lsls	r1, r1, #9
 8000d26:	430a      	orrs	r2, r1
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	e00b      	b.n	8000d44 <HAL_RCC_OscConfig+0x98>
 8000d2c:	4baf      	ldr	r3, [pc, #700]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	4bae      	ldr	r3, [pc, #696]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000d32:	49af      	ldr	r1, [pc, #700]	@ (8000ff0 <HAL_RCC_OscConfig+0x344>)
 8000d34:	400a      	ands	r2, r1
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	4bac      	ldr	r3, [pc, #688]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4bab      	ldr	r3, [pc, #684]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000d3e:	49ad      	ldr	r1, [pc, #692]	@ (8000ff4 <HAL_RCC_OscConfig+0x348>)
 8000d40:	400a      	ands	r2, r1
 8000d42:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d014      	beq.n	8000d76 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d4c:	f7ff fd22 	bl	8000794 <HAL_GetTick>
 8000d50:	0003      	movs	r3, r0
 8000d52:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d54:	e008      	b.n	8000d68 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8000d56:	f7ff fd1d 	bl	8000794 <HAL_GetTick>
 8000d5a:	0002      	movs	r2, r0
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	1ad3      	subs	r3, r2, r3
 8000d60:	2b64      	cmp	r3, #100	@ 0x64
 8000d62:	d901      	bls.n	8000d68 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000d64:	2303      	movs	r3, #3
 8000d66:	e17b      	b.n	8001060 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d68:	4ba0      	ldr	r3, [pc, #640]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	2380      	movs	r3, #128	@ 0x80
 8000d6e:	029b      	lsls	r3, r3, #10
 8000d70:	4013      	ands	r3, r2
 8000d72:	d0f0      	beq.n	8000d56 <HAL_RCC_OscConfig+0xaa>
 8000d74:	e013      	b.n	8000d9e <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d76:	f7ff fd0d 	bl	8000794 <HAL_GetTick>
 8000d7a:	0003      	movs	r3, r0
 8000d7c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d7e:	e008      	b.n	8000d92 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8000d80:	f7ff fd08 	bl	8000794 <HAL_GetTick>
 8000d84:	0002      	movs	r2, r0
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	2b64      	cmp	r3, #100	@ 0x64
 8000d8c:	d901      	bls.n	8000d92 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	e166      	b.n	8001060 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d92:	4b96      	ldr	r3, [pc, #600]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	2380      	movs	r3, #128	@ 0x80
 8000d98:	029b      	lsls	r3, r3, #10
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	d1f0      	bne.n	8000d80 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2202      	movs	r2, #2
 8000da4:	4013      	ands	r3, r2
 8000da6:	d100      	bne.n	8000daa <HAL_RCC_OscConfig+0xfe>
 8000da8:	e086      	b.n	8000eb8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000daa:	4b90      	ldr	r3, [pc, #576]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	2238      	movs	r2, #56	@ 0x38
 8000db0:	4013      	ands	r3, r2
 8000db2:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d12f      	bne.n	8000e1a <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	68db      	ldr	r3, [r3, #12]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d101      	bne.n	8000dc6 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e14c      	b.n	8001060 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dc6:	4b89      	ldr	r3, [pc, #548]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	4a8b      	ldr	r2, [pc, #556]	@ (8000ff8 <HAL_RCC_OscConfig+0x34c>)
 8000dcc:	4013      	ands	r3, r2
 8000dce:	0019      	movs	r1, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	695b      	ldr	r3, [r3, #20]
 8000dd4:	021a      	lsls	r2, r3, #8
 8000dd6:	4b85      	ldr	r3, [pc, #532]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000dd8:	430a      	orrs	r2, r1
 8000dda:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d112      	bne.n	8000e08 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000de2:	4b82      	ldr	r3, [pc, #520]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a85      	ldr	r2, [pc, #532]	@ (8000ffc <HAL_RCC_OscConfig+0x350>)
 8000de8:	4013      	ands	r3, r2
 8000dea:	0019      	movs	r1, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	691a      	ldr	r2, [r3, #16]
 8000df0:	4b7e      	ldr	r3, [pc, #504]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000df2:	430a      	orrs	r2, r1
 8000df4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000df6:	4b7d      	ldr	r3, [pc, #500]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	0adb      	lsrs	r3, r3, #11
 8000dfc:	2207      	movs	r2, #7
 8000dfe:	4013      	ands	r3, r2
 8000e00:	4a7f      	ldr	r2, [pc, #508]	@ (8001000 <HAL_RCC_OscConfig+0x354>)
 8000e02:	40da      	lsrs	r2, r3
 8000e04:	4b7f      	ldr	r3, [pc, #508]	@ (8001004 <HAL_RCC_OscConfig+0x358>)
 8000e06:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000e08:	4b7f      	ldr	r3, [pc, #508]	@ (8001008 <HAL_RCC_OscConfig+0x35c>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f7ff fc65 	bl	80006dc <HAL_InitTick>
 8000e12:	1e03      	subs	r3, r0, #0
 8000e14:	d050      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e122      	b.n	8001060 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d030      	beq.n	8000e84 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000e22:	4b72      	ldr	r3, [pc, #456]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a75      	ldr	r2, [pc, #468]	@ (8000ffc <HAL_RCC_OscConfig+0x350>)
 8000e28:	4013      	ands	r3, r2
 8000e2a:	0019      	movs	r1, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	691a      	ldr	r2, [r3, #16]
 8000e30:	4b6e      	ldr	r3, [pc, #440]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000e32:	430a      	orrs	r2, r1
 8000e34:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8000e36:	4b6d      	ldr	r3, [pc, #436]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	4b6c      	ldr	r3, [pc, #432]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000e3c:	2180      	movs	r1, #128	@ 0x80
 8000e3e:	0049      	lsls	r1, r1, #1
 8000e40:	430a      	orrs	r2, r1
 8000e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e44:	f7ff fca6 	bl	8000794 <HAL_GetTick>
 8000e48:	0003      	movs	r3, r0
 8000e4a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e4c:	e008      	b.n	8000e60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8000e4e:	f7ff fca1 	bl	8000794 <HAL_GetTick>
 8000e52:	0002      	movs	r2, r0
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d901      	bls.n	8000e60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	e0ff      	b.n	8001060 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e60:	4b62      	ldr	r3, [pc, #392]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	2380      	movs	r3, #128	@ 0x80
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	4013      	ands	r3, r2
 8000e6a:	d0f0      	beq.n	8000e4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e6c:	4b5f      	ldr	r3, [pc, #380]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	4a61      	ldr	r2, [pc, #388]	@ (8000ff8 <HAL_RCC_OscConfig+0x34c>)
 8000e72:	4013      	ands	r3, r2
 8000e74:	0019      	movs	r1, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	021a      	lsls	r2, r3, #8
 8000e7c:	4b5b      	ldr	r3, [pc, #364]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	e019      	b.n	8000eb8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8000e84:	4b59      	ldr	r3, [pc, #356]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4b58      	ldr	r3, [pc, #352]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000e8a:	4960      	ldr	r1, [pc, #384]	@ (800100c <HAL_RCC_OscConfig+0x360>)
 8000e8c:	400a      	ands	r2, r1
 8000e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e90:	f7ff fc80 	bl	8000794 <HAL_GetTick>
 8000e94:	0003      	movs	r3, r0
 8000e96:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000e98:	e008      	b.n	8000eac <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8000e9a:	f7ff fc7b 	bl	8000794 <HAL_GetTick>
 8000e9e:	0002      	movs	r2, r0
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d901      	bls.n	8000eac <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	e0d9      	b.n	8001060 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000eac:	4b4f      	ldr	r3, [pc, #316]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	2380      	movs	r3, #128	@ 0x80
 8000eb2:	00db      	lsls	r3, r3, #3
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	d1f0      	bne.n	8000e9a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2208      	movs	r2, #8
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	d042      	beq.n	8000f48 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8000ec2:	4b4a      	ldr	r3, [pc, #296]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	2238      	movs	r2, #56	@ 0x38
 8000ec8:	4013      	ands	r3, r2
 8000eca:	2b18      	cmp	r3, #24
 8000ecc:	d105      	bne.n	8000eda <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d138      	bne.n	8000f48 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e0c2      	b.n	8001060 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	699b      	ldr	r3, [r3, #24]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d019      	beq.n	8000f16 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000ee2:	4b42      	ldr	r3, [pc, #264]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000ee4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000ee6:	4b41      	ldr	r3, [pc, #260]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000ee8:	2101      	movs	r1, #1
 8000eea:	430a      	orrs	r2, r1
 8000eec:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eee:	f7ff fc51 	bl	8000794 <HAL_GetTick>
 8000ef2:	0003      	movs	r3, r0
 8000ef4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8000ef6:	e008      	b.n	8000f0a <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8000ef8:	f7ff fc4c 	bl	8000794 <HAL_GetTick>
 8000efc:	0002      	movs	r2, r0
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d901      	bls.n	8000f0a <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8000f06:	2303      	movs	r3, #3
 8000f08:	e0aa      	b.n	8001060 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8000f0a:	4b38      	ldr	r3, [pc, #224]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000f0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f0e:	2202      	movs	r2, #2
 8000f10:	4013      	ands	r3, r2
 8000f12:	d0f1      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x24c>
 8000f14:	e018      	b.n	8000f48 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8000f16:	4b35      	ldr	r3, [pc, #212]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000f18:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000f1a:	4b34      	ldr	r3, [pc, #208]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	438a      	bics	r2, r1
 8000f20:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f22:	f7ff fc37 	bl	8000794 <HAL_GetTick>
 8000f26:	0003      	movs	r3, r0
 8000f28:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8000f2a:	e008      	b.n	8000f3e <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8000f2c:	f7ff fc32 	bl	8000794 <HAL_GetTick>
 8000f30:	0002      	movs	r2, r0
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d901      	bls.n	8000f3e <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e090      	b.n	8001060 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8000f3e:	4b2b      	ldr	r3, [pc, #172]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000f40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f42:	2202      	movs	r2, #2
 8000f44:	4013      	ands	r3, r2
 8000f46:	d1f1      	bne.n	8000f2c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2204      	movs	r2, #4
 8000f4e:	4013      	ands	r3, r2
 8000f50:	d100      	bne.n	8000f54 <HAL_RCC_OscConfig+0x2a8>
 8000f52:	e084      	b.n	800105e <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f54:	230f      	movs	r3, #15
 8000f56:	18fb      	adds	r3, r7, r3
 8000f58:	2200      	movs	r2, #0
 8000f5a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8000f5c:	4b23      	ldr	r3, [pc, #140]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	2238      	movs	r2, #56	@ 0x38
 8000f62:	4013      	ands	r3, r2
 8000f64:	2b20      	cmp	r3, #32
 8000f66:	d106      	bne.n	8000f76 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d000      	beq.n	8000f72 <HAL_RCC_OscConfig+0x2c6>
 8000f70:	e075      	b.n	800105e <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e074      	b.n	8001060 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d106      	bne.n	8000f8c <HAL_RCC_OscConfig+0x2e0>
 8000f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000f80:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000f82:	4b1a      	ldr	r3, [pc, #104]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000f84:	2101      	movs	r1, #1
 8000f86:	430a      	orrs	r2, r1
 8000f88:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000f8a:	e01c      	b.n	8000fc6 <HAL_RCC_OscConfig+0x31a>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	2b05      	cmp	r3, #5
 8000f92:	d10c      	bne.n	8000fae <HAL_RCC_OscConfig+0x302>
 8000f94:	4b15      	ldr	r3, [pc, #84]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000f96:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000f98:	4b14      	ldr	r3, [pc, #80]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000f9a:	2104      	movs	r1, #4
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000fa0:	4b12      	ldr	r3, [pc, #72]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000fa2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000fa4:	4b11      	ldr	r3, [pc, #68]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000fac:	e00b      	b.n	8000fc6 <HAL_RCC_OscConfig+0x31a>
 8000fae:	4b0f      	ldr	r3, [pc, #60]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000fb0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	438a      	bics	r2, r1
 8000fb8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000fba:	4b0c      	ldr	r3, [pc, #48]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000fbc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000fec <HAL_RCC_OscConfig+0x340>)
 8000fc0:	2104      	movs	r1, #4
 8000fc2:	438a      	bics	r2, r1
 8000fc4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d028      	beq.n	8001020 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fce:	f7ff fbe1 	bl	8000794 <HAL_GetTick>
 8000fd2:	0003      	movs	r3, r0
 8000fd4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8000fd6:	e01d      	b.n	8001014 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fd8:	f7ff fbdc 	bl	8000794 <HAL_GetTick>
 8000fdc:	0002      	movs	r2, r0
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	4a0b      	ldr	r2, [pc, #44]	@ (8001010 <HAL_RCC_OscConfig+0x364>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d915      	bls.n	8001014 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e039      	b.n	8001060 <HAL_RCC_OscConfig+0x3b4>
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	fffeffff 	.word	0xfffeffff
 8000ff4:	fffbffff 	.word	0xfffbffff
 8000ff8:	ffff80ff 	.word	0xffff80ff
 8000ffc:	ffffc7ff 	.word	0xffffc7ff
 8001000:	02dc6c00 	.word	0x02dc6c00
 8001004:	20000000 	.word	0x20000000
 8001008:	20000004 	.word	0x20000004
 800100c:	fffffeff 	.word	0xfffffeff
 8001010:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001014:	4b14      	ldr	r3, [pc, #80]	@ (8001068 <HAL_RCC_OscConfig+0x3bc>)
 8001016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001018:	2202      	movs	r2, #2
 800101a:	4013      	ands	r3, r2
 800101c:	d0dc      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x32c>
 800101e:	e013      	b.n	8001048 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001020:	f7ff fbb8 	bl	8000794 <HAL_GetTick>
 8001024:	0003      	movs	r3, r0
 8001026:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001028:	e009      	b.n	800103e <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800102a:	f7ff fbb3 	bl	8000794 <HAL_GetTick>
 800102e:	0002      	movs	r2, r0
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	4a0d      	ldr	r2, [pc, #52]	@ (800106c <HAL_RCC_OscConfig+0x3c0>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d901      	bls.n	800103e <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e010      	b.n	8001060 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800103e:	4b0a      	ldr	r3, [pc, #40]	@ (8001068 <HAL_RCC_OscConfig+0x3bc>)
 8001040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001042:	2202      	movs	r2, #2
 8001044:	4013      	ands	r3, r2
 8001046:	d1f0      	bne.n	800102a <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001048:	230f      	movs	r3, #15
 800104a:	18fb      	adds	r3, r7, r3
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d105      	bne.n	800105e <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001052:	4b05      	ldr	r3, [pc, #20]	@ (8001068 <HAL_RCC_OscConfig+0x3bc>)
 8001054:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001056:	4b04      	ldr	r3, [pc, #16]	@ (8001068 <HAL_RCC_OscConfig+0x3bc>)
 8001058:	4905      	ldr	r1, [pc, #20]	@ (8001070 <HAL_RCC_OscConfig+0x3c4>)
 800105a:	400a      	ands	r2, r1
 800105c:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 800105e:	2300      	movs	r3, #0
}
 8001060:	0018      	movs	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	b006      	add	sp, #24
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40021000 	.word	0x40021000
 800106c:	00001388 	.word	0x00001388
 8001070:	efffffff 	.word	0xefffffff

08001074 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d101      	bne.n	8001088 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	e0e9      	b.n	800125c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001088:	4b76      	ldr	r3, [pc, #472]	@ (8001264 <HAL_RCC_ClockConfig+0x1f0>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2207      	movs	r2, #7
 800108e:	4013      	ands	r3, r2
 8001090:	683a      	ldr	r2, [r7, #0]
 8001092:	429a      	cmp	r2, r3
 8001094:	d91e      	bls.n	80010d4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001096:	4b73      	ldr	r3, [pc, #460]	@ (8001264 <HAL_RCC_ClockConfig+0x1f0>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2207      	movs	r2, #7
 800109c:	4393      	bics	r3, r2
 800109e:	0019      	movs	r1, r3
 80010a0:	4b70      	ldr	r3, [pc, #448]	@ (8001264 <HAL_RCC_ClockConfig+0x1f0>)
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	430a      	orrs	r2, r1
 80010a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80010a8:	f7ff fb74 	bl	8000794 <HAL_GetTick>
 80010ac:	0003      	movs	r3, r0
 80010ae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80010b0:	e009      	b.n	80010c6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80010b2:	f7ff fb6f 	bl	8000794 <HAL_GetTick>
 80010b6:	0002      	movs	r2, r0
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	4a6a      	ldr	r2, [pc, #424]	@ (8001268 <HAL_RCC_ClockConfig+0x1f4>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d901      	bls.n	80010c6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80010c2:	2303      	movs	r3, #3
 80010c4:	e0ca      	b.n	800125c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80010c6:	4b67      	ldr	r3, [pc, #412]	@ (8001264 <HAL_RCC_ClockConfig+0x1f0>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2207      	movs	r2, #7
 80010cc:	4013      	ands	r3, r2
 80010ce:	683a      	ldr	r2, [r7, #0]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d1ee      	bne.n	80010b2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2202      	movs	r2, #2
 80010da:	4013      	ands	r3, r2
 80010dc:	d017      	beq.n	800110e <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2204      	movs	r2, #4
 80010e4:	4013      	ands	r3, r2
 80010e6:	d008      	beq.n	80010fa <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80010e8:	4b60      	ldr	r3, [pc, #384]	@ (800126c <HAL_RCC_ClockConfig+0x1f8>)
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	4a60      	ldr	r2, [pc, #384]	@ (8001270 <HAL_RCC_ClockConfig+0x1fc>)
 80010ee:	401a      	ands	r2, r3
 80010f0:	4b5e      	ldr	r3, [pc, #376]	@ (800126c <HAL_RCC_ClockConfig+0x1f8>)
 80010f2:	21b0      	movs	r1, #176	@ 0xb0
 80010f4:	0109      	lsls	r1, r1, #4
 80010f6:	430a      	orrs	r2, r1
 80010f8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010fa:	4b5c      	ldr	r3, [pc, #368]	@ (800126c <HAL_RCC_ClockConfig+0x1f8>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	4a5d      	ldr	r2, [pc, #372]	@ (8001274 <HAL_RCC_ClockConfig+0x200>)
 8001100:	4013      	ands	r3, r2
 8001102:	0019      	movs	r1, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	68da      	ldr	r2, [r3, #12]
 8001108:	4b58      	ldr	r3, [pc, #352]	@ (800126c <HAL_RCC_ClockConfig+0x1f8>)
 800110a:	430a      	orrs	r2, r1
 800110c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2201      	movs	r2, #1
 8001114:	4013      	ands	r3, r2
 8001116:	d055      	beq.n	80011c4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8001118:	4b54      	ldr	r3, [pc, #336]	@ (800126c <HAL_RCC_ClockConfig+0x1f8>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	221c      	movs	r2, #28
 800111e:	4393      	bics	r3, r2
 8001120:	0019      	movs	r1, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	689a      	ldr	r2, [r3, #8]
 8001126:	4b51      	ldr	r3, [pc, #324]	@ (800126c <HAL_RCC_ClockConfig+0x1f8>)
 8001128:	430a      	orrs	r2, r1
 800112a:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d107      	bne.n	8001144 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001134:	4b4d      	ldr	r3, [pc, #308]	@ (800126c <HAL_RCC_ClockConfig+0x1f8>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	2380      	movs	r3, #128	@ 0x80
 800113a:	029b      	lsls	r3, r3, #10
 800113c:	4013      	ands	r3, r2
 800113e:	d11f      	bne.n	8001180 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e08b      	b.n	800125c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d107      	bne.n	800115c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800114c:	4b47      	ldr	r3, [pc, #284]	@ (800126c <HAL_RCC_ClockConfig+0x1f8>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	2380      	movs	r3, #128	@ 0x80
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	4013      	ands	r3, r2
 8001156:	d113      	bne.n	8001180 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e07f      	b.n	800125c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	2b03      	cmp	r3, #3
 8001162:	d106      	bne.n	8001172 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001164:	4b41      	ldr	r3, [pc, #260]	@ (800126c <HAL_RCC_ClockConfig+0x1f8>)
 8001166:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001168:	2202      	movs	r2, #2
 800116a:	4013      	ands	r3, r2
 800116c:	d108      	bne.n	8001180 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e074      	b.n	800125c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001172:	4b3e      	ldr	r3, [pc, #248]	@ (800126c <HAL_RCC_ClockConfig+0x1f8>)
 8001174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001176:	2202      	movs	r2, #2
 8001178:	4013      	ands	r3, r2
 800117a:	d101      	bne.n	8001180 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e06d      	b.n	800125c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001180:	4b3a      	ldr	r3, [pc, #232]	@ (800126c <HAL_RCC_ClockConfig+0x1f8>)
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	2207      	movs	r2, #7
 8001186:	4393      	bics	r3, r2
 8001188:	0019      	movs	r1, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	4b37      	ldr	r3, [pc, #220]	@ (800126c <HAL_RCC_ClockConfig+0x1f8>)
 8001190:	430a      	orrs	r2, r1
 8001192:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001194:	f7ff fafe 	bl	8000794 <HAL_GetTick>
 8001198:	0003      	movs	r3, r0
 800119a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800119c:	e009      	b.n	80011b2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800119e:	f7ff faf9 	bl	8000794 <HAL_GetTick>
 80011a2:	0002      	movs	r2, r0
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	4a2f      	ldr	r2, [pc, #188]	@ (8001268 <HAL_RCC_ClockConfig+0x1f4>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d901      	bls.n	80011b2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e054      	b.n	800125c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011b2:	4b2e      	ldr	r3, [pc, #184]	@ (800126c <HAL_RCC_ClockConfig+0x1f8>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	2238      	movs	r2, #56	@ 0x38
 80011b8:	401a      	ands	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	00db      	lsls	r3, r3, #3
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d1ec      	bne.n	800119e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011c4:	4b27      	ldr	r3, [pc, #156]	@ (8001264 <HAL_RCC_ClockConfig+0x1f0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2207      	movs	r2, #7
 80011ca:	4013      	ands	r3, r2
 80011cc:	683a      	ldr	r2, [r7, #0]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d21e      	bcs.n	8001210 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011d2:	4b24      	ldr	r3, [pc, #144]	@ (8001264 <HAL_RCC_ClockConfig+0x1f0>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2207      	movs	r2, #7
 80011d8:	4393      	bics	r3, r2
 80011da:	0019      	movs	r1, r3
 80011dc:	4b21      	ldr	r3, [pc, #132]	@ (8001264 <HAL_RCC_ClockConfig+0x1f0>)
 80011de:	683a      	ldr	r2, [r7, #0]
 80011e0:	430a      	orrs	r2, r1
 80011e2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80011e4:	f7ff fad6 	bl	8000794 <HAL_GetTick>
 80011e8:	0003      	movs	r3, r0
 80011ea:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80011ec:	e009      	b.n	8001202 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80011ee:	f7ff fad1 	bl	8000794 <HAL_GetTick>
 80011f2:	0002      	movs	r2, r0
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001268 <HAL_RCC_ClockConfig+0x1f4>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e02c      	b.n	800125c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001202:	4b18      	ldr	r3, [pc, #96]	@ (8001264 <HAL_RCC_ClockConfig+0x1f0>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2207      	movs	r2, #7
 8001208:	4013      	ands	r3, r2
 800120a:	683a      	ldr	r2, [r7, #0]
 800120c:	429a      	cmp	r2, r3
 800120e:	d1ee      	bne.n	80011ee <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2204      	movs	r2, #4
 8001216:	4013      	ands	r3, r2
 8001218:	d009      	beq.n	800122e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800121a:	4b14      	ldr	r3, [pc, #80]	@ (800126c <HAL_RCC_ClockConfig+0x1f8>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	4a16      	ldr	r2, [pc, #88]	@ (8001278 <HAL_RCC_ClockConfig+0x204>)
 8001220:	4013      	ands	r3, r2
 8001222:	0019      	movs	r1, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	691a      	ldr	r2, [r3, #16]
 8001228:	4b10      	ldr	r3, [pc, #64]	@ (800126c <HAL_RCC_ClockConfig+0x1f8>)
 800122a:	430a      	orrs	r2, r1
 800122c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800122e:	f000 f82b 	bl	8001288 <HAL_RCC_GetSysClockFreq>
 8001232:	0001      	movs	r1, r0
 8001234:	4b0d      	ldr	r3, [pc, #52]	@ (800126c <HAL_RCC_ClockConfig+0x1f8>)
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	0a1b      	lsrs	r3, r3, #8
 800123a:	220f      	movs	r2, #15
 800123c:	401a      	ands	r2, r3
 800123e:	4b0f      	ldr	r3, [pc, #60]	@ (800127c <HAL_RCC_ClockConfig+0x208>)
 8001240:	0092      	lsls	r2, r2, #2
 8001242:	58d3      	ldr	r3, [r2, r3]
 8001244:	221f      	movs	r2, #31
 8001246:	4013      	ands	r3, r2
 8001248:	000a      	movs	r2, r1
 800124a:	40da      	lsrs	r2, r3
 800124c:	4b0c      	ldr	r3, [pc, #48]	@ (8001280 <HAL_RCC_ClockConfig+0x20c>)
 800124e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001250:	4b0c      	ldr	r3, [pc, #48]	@ (8001284 <HAL_RCC_ClockConfig+0x210>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	0018      	movs	r0, r3
 8001256:	f7ff fa41 	bl	80006dc <HAL_InitTick>
 800125a:	0003      	movs	r3, r0
}
 800125c:	0018      	movs	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	b004      	add	sp, #16
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40022000 	.word	0x40022000
 8001268:	00001388 	.word	0x00001388
 800126c:	40021000 	.word	0x40021000
 8001270:	ffff84ff 	.word	0xffff84ff
 8001274:	fffff0ff 	.word	0xfffff0ff
 8001278:	ffff8fff 	.word	0xffff8fff
 800127c:	08002b8c 	.word	0x08002b8c
 8001280:	20000000 	.word	0x20000000
 8001284:	20000004 	.word	0x20000004

08001288 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800128e:	4b1c      	ldr	r3, [pc, #112]	@ (8001300 <HAL_RCC_GetSysClockFreq+0x78>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	2238      	movs	r2, #56	@ 0x38
 8001294:	4013      	ands	r3, r2
 8001296:	d10f      	bne.n	80012b8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001298:	4b19      	ldr	r3, [pc, #100]	@ (8001300 <HAL_RCC_GetSysClockFreq+0x78>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	0adb      	lsrs	r3, r3, #11
 800129e:	2207      	movs	r2, #7
 80012a0:	4013      	ands	r3, r2
 80012a2:	2201      	movs	r2, #1
 80012a4:	409a      	lsls	r2, r3
 80012a6:	0013      	movs	r3, r2
 80012a8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80012aa:	6839      	ldr	r1, [r7, #0]
 80012ac:	4815      	ldr	r0, [pc, #84]	@ (8001304 <HAL_RCC_GetSysClockFreq+0x7c>)
 80012ae:	f7fe ff35 	bl	800011c <__udivsi3>
 80012b2:	0003      	movs	r3, r0
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	e01e      	b.n	80012f6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80012b8:	4b11      	ldr	r3, [pc, #68]	@ (8001300 <HAL_RCC_GetSysClockFreq+0x78>)
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	2238      	movs	r2, #56	@ 0x38
 80012be:	4013      	ands	r3, r2
 80012c0:	2b08      	cmp	r3, #8
 80012c2:	d102      	bne.n	80012ca <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80012c4:	4b10      	ldr	r3, [pc, #64]	@ (8001308 <HAL_RCC_GetSysClockFreq+0x80>)
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	e015      	b.n	80012f6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80012ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001300 <HAL_RCC_GetSysClockFreq+0x78>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	2238      	movs	r2, #56	@ 0x38
 80012d0:	4013      	ands	r3, r2
 80012d2:	2b20      	cmp	r3, #32
 80012d4:	d103      	bne.n	80012de <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80012d6:	2380      	movs	r3, #128	@ 0x80
 80012d8:	021b      	lsls	r3, r3, #8
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	e00b      	b.n	80012f6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80012de:	4b08      	ldr	r3, [pc, #32]	@ (8001300 <HAL_RCC_GetSysClockFreq+0x78>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	2238      	movs	r2, #56	@ 0x38
 80012e4:	4013      	ands	r3, r2
 80012e6:	2b18      	cmp	r3, #24
 80012e8:	d103      	bne.n	80012f2 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80012ea:	23fa      	movs	r3, #250	@ 0xfa
 80012ec:	01db      	lsls	r3, r3, #7
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	e001      	b.n	80012f6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 80012f2:	2300      	movs	r3, #0
 80012f4:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 80012f6:	687b      	ldr	r3, [r7, #4]
}
 80012f8:	0018      	movs	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	b002      	add	sp, #8
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40021000 	.word	0x40021000
 8001304:	02dc6c00 	.word	0x02dc6c00
 8001308:	007a1200 	.word	0x007a1200

0800130c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001310:	4b02      	ldr	r3, [pc, #8]	@ (800131c <HAL_RCC_GetHCLKFreq+0x10>)
 8001312:	681b      	ldr	r3, [r3, #0]
}
 8001314:	0018      	movs	r0, r3
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	46c0      	nop			@ (mov r8, r8)
 800131c:	20000000 	.word	0x20000000

08001320 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001324:	f7ff fff2 	bl	800130c <HAL_RCC_GetHCLKFreq>
 8001328:	0001      	movs	r1, r0
 800132a:	4b07      	ldr	r3, [pc, #28]	@ (8001348 <HAL_RCC_GetPCLK1Freq+0x28>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	0b1b      	lsrs	r3, r3, #12
 8001330:	2207      	movs	r2, #7
 8001332:	401a      	ands	r2, r3
 8001334:	4b05      	ldr	r3, [pc, #20]	@ (800134c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001336:	0092      	lsls	r2, r2, #2
 8001338:	58d3      	ldr	r3, [r2, r3]
 800133a:	221f      	movs	r2, #31
 800133c:	4013      	ands	r3, r2
 800133e:	40d9      	lsrs	r1, r3
 8001340:	000b      	movs	r3, r1
}
 8001342:	0018      	movs	r0, r3
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40021000 	.word	0x40021000
 800134c:	08002bcc 	.word	0x08002bcc

08001350 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d101      	bne.n	8001362 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e046      	b.n	80013f0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2288      	movs	r2, #136	@ 0x88
 8001366:	589b      	ldr	r3, [r3, r2]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d107      	bne.n	800137c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2284      	movs	r2, #132	@ 0x84
 8001370:	2100      	movs	r1, #0
 8001372:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	0018      	movs	r0, r3
 8001378:	f7ff f866 	bl	8000448 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2288      	movs	r2, #136	@ 0x88
 8001380:	2124      	movs	r1, #36	@ 0x24
 8001382:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2101      	movs	r1, #1
 8001390:	438a      	bics	r2, r1
 8001392:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001398:	2b00      	cmp	r3, #0
 800139a:	d003      	beq.n	80013a4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	0018      	movs	r0, r3
 80013a0:	f000 fa4e 	bl	8001840 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	0018      	movs	r0, r3
 80013a8:	f000 f8cc 	bl	8001544 <UART_SetConfig>
 80013ac:	0003      	movs	r3, r0
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d101      	bne.n	80013b6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e01c      	b.n	80013f0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	490d      	ldr	r1, [pc, #52]	@ (80013f8 <HAL_UART_Init+0xa8>)
 80013c2:	400a      	ands	r2, r1
 80013c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	212a      	movs	r1, #42	@ 0x2a
 80013d2:	438a      	bics	r2, r1
 80013d4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2101      	movs	r1, #1
 80013e2:	430a      	orrs	r2, r1
 80013e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	0018      	movs	r0, r3
 80013ea:	f000 fadd 	bl	80019a8 <UART_CheckIdleState>
 80013ee:	0003      	movs	r3, r0
}
 80013f0:	0018      	movs	r0, r3
 80013f2:	46bd      	mov	sp, r7
 80013f4:	b002      	add	sp, #8
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	ffffb7ff 	.word	0xffffb7ff

080013fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	@ 0x28
 8001400:	af02      	add	r7, sp, #8
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	1dbb      	adds	r3, r7, #6
 800140a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2288      	movs	r2, #136	@ 0x88
 8001410:	589b      	ldr	r3, [r3, r2]
 8001412:	2b20      	cmp	r3, #32
 8001414:	d000      	beq.n	8001418 <HAL_UART_Transmit+0x1c>
 8001416:	e090      	b.n	800153a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_UART_Transmit+0x2a>
 800141e:	1dbb      	adds	r3, r7, #6
 8001420:	881b      	ldrh	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e088      	b.n	800153c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	689a      	ldr	r2, [r3, #8]
 800142e:	2380      	movs	r3, #128	@ 0x80
 8001430:	015b      	lsls	r3, r3, #5
 8001432:	429a      	cmp	r2, r3
 8001434:	d109      	bne.n	800144a <HAL_UART_Transmit+0x4e>
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d105      	bne.n	800144a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	2201      	movs	r2, #1
 8001442:	4013      	ands	r3, r2
 8001444:	d001      	beq.n	800144a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e078      	b.n	800153c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2290      	movs	r2, #144	@ 0x90
 800144e:	2100      	movs	r1, #0
 8001450:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	2288      	movs	r2, #136	@ 0x88
 8001456:	2121      	movs	r1, #33	@ 0x21
 8001458:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800145a:	f7ff f99b 	bl	8000794 <HAL_GetTick>
 800145e:	0003      	movs	r3, r0
 8001460:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	1dba      	adds	r2, r7, #6
 8001466:	2154      	movs	r1, #84	@ 0x54
 8001468:	8812      	ldrh	r2, [r2, #0]
 800146a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	1dba      	adds	r2, r7, #6
 8001470:	2156      	movs	r1, #86	@ 0x56
 8001472:	8812      	ldrh	r2, [r2, #0]
 8001474:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	689a      	ldr	r2, [r3, #8]
 800147a:	2380      	movs	r3, #128	@ 0x80
 800147c:	015b      	lsls	r3, r3, #5
 800147e:	429a      	cmp	r2, r3
 8001480:	d108      	bne.n	8001494 <HAL_UART_Transmit+0x98>
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	691b      	ldr	r3, [r3, #16]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d104      	bne.n	8001494 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800148a:	2300      	movs	r3, #0
 800148c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	61bb      	str	r3, [r7, #24]
 8001492:	e003      	b.n	800149c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001498:	2300      	movs	r3, #0
 800149a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800149c:	e030      	b.n	8001500 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	68f8      	ldr	r0, [r7, #12]
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	0013      	movs	r3, r2
 80014a8:	2200      	movs	r2, #0
 80014aa:	2180      	movs	r1, #128	@ 0x80
 80014ac:	f000 fb26 	bl	8001afc <UART_WaitOnFlagUntilTimeout>
 80014b0:	1e03      	subs	r3, r0, #0
 80014b2:	d005      	beq.n	80014c0 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2288      	movs	r2, #136	@ 0x88
 80014b8:	2120      	movs	r1, #32
 80014ba:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e03d      	b.n	800153c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d10b      	bne.n	80014de <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	881b      	ldrh	r3, [r3, #0]
 80014ca:	001a      	movs	r2, r3
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	05d2      	lsls	r2, r2, #23
 80014d2:	0dd2      	lsrs	r2, r2, #23
 80014d4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	3302      	adds	r3, #2
 80014da:	61bb      	str	r3, [r7, #24]
 80014dc:	e007      	b.n	80014ee <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	781a      	ldrb	r2, [r3, #0]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	3301      	adds	r3, #1
 80014ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2256      	movs	r2, #86	@ 0x56
 80014f2:	5a9b      	ldrh	r3, [r3, r2]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	3b01      	subs	r3, #1
 80014f8:	b299      	uxth	r1, r3
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2256      	movs	r2, #86	@ 0x56
 80014fe:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2256      	movs	r2, #86	@ 0x56
 8001504:	5a9b      	ldrh	r3, [r3, r2]
 8001506:	b29b      	uxth	r3, r3
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1c8      	bne.n	800149e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800150c:	697a      	ldr	r2, [r7, #20]
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	0013      	movs	r3, r2
 8001516:	2200      	movs	r2, #0
 8001518:	2140      	movs	r1, #64	@ 0x40
 800151a:	f000 faef 	bl	8001afc <UART_WaitOnFlagUntilTimeout>
 800151e:	1e03      	subs	r3, r0, #0
 8001520:	d005      	beq.n	800152e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2288      	movs	r2, #136	@ 0x88
 8001526:	2120      	movs	r1, #32
 8001528:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e006      	b.n	800153c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2288      	movs	r2, #136	@ 0x88
 8001532:	2120      	movs	r1, #32
 8001534:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8001536:	2300      	movs	r3, #0
 8001538:	e000      	b.n	800153c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800153a:	2302      	movs	r3, #2
  }
}
 800153c:	0018      	movs	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	b008      	add	sp, #32
 8001542:	bd80      	pop	{r7, pc}

08001544 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b088      	sub	sp, #32
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800154c:	231e      	movs	r3, #30
 800154e:	18fb      	adds	r3, r7, r3
 8001550:	2200      	movs	r2, #0
 8001552:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	431a      	orrs	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	431a      	orrs	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69db      	ldr	r3, [r3, #28]
 8001568:	4313      	orrs	r3, r2
 800156a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4aab      	ldr	r2, [pc, #684]	@ (8001820 <UART_SetConfig+0x2dc>)
 8001574:	4013      	ands	r3, r2
 8001576:	0019      	movs	r1, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	697a      	ldr	r2, [r7, #20]
 800157e:	430a      	orrs	r2, r1
 8001580:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	4aa6      	ldr	r2, [pc, #664]	@ (8001824 <UART_SetConfig+0x2e0>)
 800158a:	4013      	ands	r3, r2
 800158c:	0019      	movs	r1, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	68da      	ldr	r2, [r3, #12]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	430a      	orrs	r2, r1
 8001598:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a1b      	ldr	r3, [r3, #32]
 80015a4:	697a      	ldr	r2, [r7, #20]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	4a9d      	ldr	r2, [pc, #628]	@ (8001828 <UART_SetConfig+0x2e4>)
 80015b2:	4013      	ands	r3, r2
 80015b4:	0019      	movs	r1, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	430a      	orrs	r2, r1
 80015be:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015c6:	220f      	movs	r2, #15
 80015c8:	4393      	bics	r3, r2
 80015ca:	0019      	movs	r1, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	430a      	orrs	r2, r1
 80015d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a93      	ldr	r2, [pc, #588]	@ (800182c <UART_SetConfig+0x2e8>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d127      	bne.n	8001632 <UART_SetConfig+0xee>
 80015e2:	4b93      	ldr	r3, [pc, #588]	@ (8001830 <UART_SetConfig+0x2ec>)
 80015e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015e6:	2203      	movs	r2, #3
 80015e8:	4013      	ands	r3, r2
 80015ea:	2b03      	cmp	r3, #3
 80015ec:	d017      	beq.n	800161e <UART_SetConfig+0xda>
 80015ee:	d81b      	bhi.n	8001628 <UART_SetConfig+0xe4>
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d00a      	beq.n	800160a <UART_SetConfig+0xc6>
 80015f4:	d818      	bhi.n	8001628 <UART_SetConfig+0xe4>
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d002      	beq.n	8001600 <UART_SetConfig+0xbc>
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d00a      	beq.n	8001614 <UART_SetConfig+0xd0>
 80015fe:	e013      	b.n	8001628 <UART_SetConfig+0xe4>
 8001600:	231f      	movs	r3, #31
 8001602:	18fb      	adds	r3, r7, r3
 8001604:	2200      	movs	r2, #0
 8001606:	701a      	strb	r2, [r3, #0]
 8001608:	e021      	b.n	800164e <UART_SetConfig+0x10a>
 800160a:	231f      	movs	r3, #31
 800160c:	18fb      	adds	r3, r7, r3
 800160e:	2202      	movs	r2, #2
 8001610:	701a      	strb	r2, [r3, #0]
 8001612:	e01c      	b.n	800164e <UART_SetConfig+0x10a>
 8001614:	231f      	movs	r3, #31
 8001616:	18fb      	adds	r3, r7, r3
 8001618:	2204      	movs	r2, #4
 800161a:	701a      	strb	r2, [r3, #0]
 800161c:	e017      	b.n	800164e <UART_SetConfig+0x10a>
 800161e:	231f      	movs	r3, #31
 8001620:	18fb      	adds	r3, r7, r3
 8001622:	2208      	movs	r2, #8
 8001624:	701a      	strb	r2, [r3, #0]
 8001626:	e012      	b.n	800164e <UART_SetConfig+0x10a>
 8001628:	231f      	movs	r3, #31
 800162a:	18fb      	adds	r3, r7, r3
 800162c:	2210      	movs	r2, #16
 800162e:	701a      	strb	r2, [r3, #0]
 8001630:	e00d      	b.n	800164e <UART_SetConfig+0x10a>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a7f      	ldr	r2, [pc, #508]	@ (8001834 <UART_SetConfig+0x2f0>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d104      	bne.n	8001646 <UART_SetConfig+0x102>
 800163c:	231f      	movs	r3, #31
 800163e:	18fb      	adds	r3, r7, r3
 8001640:	2200      	movs	r2, #0
 8001642:	701a      	strb	r2, [r3, #0]
 8001644:	e003      	b.n	800164e <UART_SetConfig+0x10a>
 8001646:	231f      	movs	r3, #31
 8001648:	18fb      	adds	r3, r7, r3
 800164a:	2210      	movs	r2, #16
 800164c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	69da      	ldr	r2, [r3, #28]
 8001652:	2380      	movs	r3, #128	@ 0x80
 8001654:	021b      	lsls	r3, r3, #8
 8001656:	429a      	cmp	r2, r3
 8001658:	d000      	beq.n	800165c <UART_SetConfig+0x118>
 800165a:	e06f      	b.n	800173c <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 800165c:	231f      	movs	r3, #31
 800165e:	18fb      	adds	r3, r7, r3
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b08      	cmp	r3, #8
 8001664:	d01f      	beq.n	80016a6 <UART_SetConfig+0x162>
 8001666:	dc22      	bgt.n	80016ae <UART_SetConfig+0x16a>
 8001668:	2b04      	cmp	r3, #4
 800166a:	d017      	beq.n	800169c <UART_SetConfig+0x158>
 800166c:	dc1f      	bgt.n	80016ae <UART_SetConfig+0x16a>
 800166e:	2b00      	cmp	r3, #0
 8001670:	d002      	beq.n	8001678 <UART_SetConfig+0x134>
 8001672:	2b02      	cmp	r3, #2
 8001674:	d005      	beq.n	8001682 <UART_SetConfig+0x13e>
 8001676:	e01a      	b.n	80016ae <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001678:	f7ff fe52 	bl	8001320 <HAL_RCC_GetPCLK1Freq>
 800167c:	0003      	movs	r3, r0
 800167e:	61bb      	str	r3, [r7, #24]
        break;
 8001680:	e01c      	b.n	80016bc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8001682:	4b6b      	ldr	r3, [pc, #428]	@ (8001830 <UART_SetConfig+0x2ec>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	095b      	lsrs	r3, r3, #5
 8001688:	2207      	movs	r2, #7
 800168a:	4013      	ands	r3, r2
 800168c:	3301      	adds	r3, #1
 800168e:	0019      	movs	r1, r3
 8001690:	4869      	ldr	r0, [pc, #420]	@ (8001838 <UART_SetConfig+0x2f4>)
 8001692:	f7fe fd43 	bl	800011c <__udivsi3>
 8001696:	0003      	movs	r3, r0
 8001698:	61bb      	str	r3, [r7, #24]
        break;
 800169a:	e00f      	b.n	80016bc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800169c:	f7ff fdf4 	bl	8001288 <HAL_RCC_GetSysClockFreq>
 80016a0:	0003      	movs	r3, r0
 80016a2:	61bb      	str	r3, [r7, #24]
        break;
 80016a4:	e00a      	b.n	80016bc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80016a6:	2380      	movs	r3, #128	@ 0x80
 80016a8:	021b      	lsls	r3, r3, #8
 80016aa:	61bb      	str	r3, [r7, #24]
        break;
 80016ac:	e006      	b.n	80016bc <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80016b2:	231e      	movs	r3, #30
 80016b4:	18fb      	adds	r3, r7, r3
 80016b6:	2201      	movs	r2, #1
 80016b8:	701a      	strb	r2, [r3, #0]
        break;
 80016ba:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d100      	bne.n	80016c4 <UART_SetConfig+0x180>
 80016c2:	e097      	b.n	80017f4 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016c8:	4b5c      	ldr	r3, [pc, #368]	@ (800183c <UART_SetConfig+0x2f8>)
 80016ca:	0052      	lsls	r2, r2, #1
 80016cc:	5ad3      	ldrh	r3, [r2, r3]
 80016ce:	0019      	movs	r1, r3
 80016d0:	69b8      	ldr	r0, [r7, #24]
 80016d2:	f7fe fd23 	bl	800011c <__udivsi3>
 80016d6:	0003      	movs	r3, r0
 80016d8:	005a      	lsls	r2, r3, #1
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	085b      	lsrs	r3, r3, #1
 80016e0:	18d2      	adds	r2, r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	0019      	movs	r1, r3
 80016e8:	0010      	movs	r0, r2
 80016ea:	f7fe fd17 	bl	800011c <__udivsi3>
 80016ee:	0003      	movs	r3, r0
 80016f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	2b0f      	cmp	r3, #15
 80016f6:	d91c      	bls.n	8001732 <UART_SetConfig+0x1ee>
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	2380      	movs	r3, #128	@ 0x80
 80016fc:	025b      	lsls	r3, r3, #9
 80016fe:	429a      	cmp	r2, r3
 8001700:	d217      	bcs.n	8001732 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	b29a      	uxth	r2, r3
 8001706:	200e      	movs	r0, #14
 8001708:	183b      	adds	r3, r7, r0
 800170a:	210f      	movs	r1, #15
 800170c:	438a      	bics	r2, r1
 800170e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	085b      	lsrs	r3, r3, #1
 8001714:	b29b      	uxth	r3, r3
 8001716:	2207      	movs	r2, #7
 8001718:	4013      	ands	r3, r2
 800171a:	b299      	uxth	r1, r3
 800171c:	183b      	adds	r3, r7, r0
 800171e:	183a      	adds	r2, r7, r0
 8001720:	8812      	ldrh	r2, [r2, #0]
 8001722:	430a      	orrs	r2, r1
 8001724:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	183a      	adds	r2, r7, r0
 800172c:	8812      	ldrh	r2, [r2, #0]
 800172e:	60da      	str	r2, [r3, #12]
 8001730:	e060      	b.n	80017f4 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8001732:	231e      	movs	r3, #30
 8001734:	18fb      	adds	r3, r7, r3
 8001736:	2201      	movs	r2, #1
 8001738:	701a      	strb	r2, [r3, #0]
 800173a:	e05b      	b.n	80017f4 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800173c:	231f      	movs	r3, #31
 800173e:	18fb      	adds	r3, r7, r3
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b08      	cmp	r3, #8
 8001744:	d01f      	beq.n	8001786 <UART_SetConfig+0x242>
 8001746:	dc22      	bgt.n	800178e <UART_SetConfig+0x24a>
 8001748:	2b04      	cmp	r3, #4
 800174a:	d017      	beq.n	800177c <UART_SetConfig+0x238>
 800174c:	dc1f      	bgt.n	800178e <UART_SetConfig+0x24a>
 800174e:	2b00      	cmp	r3, #0
 8001750:	d002      	beq.n	8001758 <UART_SetConfig+0x214>
 8001752:	2b02      	cmp	r3, #2
 8001754:	d005      	beq.n	8001762 <UART_SetConfig+0x21e>
 8001756:	e01a      	b.n	800178e <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001758:	f7ff fde2 	bl	8001320 <HAL_RCC_GetPCLK1Freq>
 800175c:	0003      	movs	r3, r0
 800175e:	61bb      	str	r3, [r7, #24]
        break;
 8001760:	e01c      	b.n	800179c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8001762:	4b33      	ldr	r3, [pc, #204]	@ (8001830 <UART_SetConfig+0x2ec>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	095b      	lsrs	r3, r3, #5
 8001768:	2207      	movs	r2, #7
 800176a:	4013      	ands	r3, r2
 800176c:	3301      	adds	r3, #1
 800176e:	0019      	movs	r1, r3
 8001770:	4831      	ldr	r0, [pc, #196]	@ (8001838 <UART_SetConfig+0x2f4>)
 8001772:	f7fe fcd3 	bl	800011c <__udivsi3>
 8001776:	0003      	movs	r3, r0
 8001778:	61bb      	str	r3, [r7, #24]
        break;
 800177a:	e00f      	b.n	800179c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800177c:	f7ff fd84 	bl	8001288 <HAL_RCC_GetSysClockFreq>
 8001780:	0003      	movs	r3, r0
 8001782:	61bb      	str	r3, [r7, #24]
        break;
 8001784:	e00a      	b.n	800179c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001786:	2380      	movs	r3, #128	@ 0x80
 8001788:	021b      	lsls	r3, r3, #8
 800178a:	61bb      	str	r3, [r7, #24]
        break;
 800178c:	e006      	b.n	800179c <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 800178e:	2300      	movs	r3, #0
 8001790:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001792:	231e      	movs	r3, #30
 8001794:	18fb      	adds	r3, r7, r3
 8001796:	2201      	movs	r2, #1
 8001798:	701a      	strb	r2, [r3, #0]
        break;
 800179a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d028      	beq.n	80017f4 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017a6:	4b25      	ldr	r3, [pc, #148]	@ (800183c <UART_SetConfig+0x2f8>)
 80017a8:	0052      	lsls	r2, r2, #1
 80017aa:	5ad3      	ldrh	r3, [r2, r3]
 80017ac:	0019      	movs	r1, r3
 80017ae:	69b8      	ldr	r0, [r7, #24]
 80017b0:	f7fe fcb4 	bl	800011c <__udivsi3>
 80017b4:	0003      	movs	r3, r0
 80017b6:	001a      	movs	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	085b      	lsrs	r3, r3, #1
 80017be:	18d2      	adds	r2, r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	0019      	movs	r1, r3
 80017c6:	0010      	movs	r0, r2
 80017c8:	f7fe fca8 	bl	800011c <__udivsi3>
 80017cc:	0003      	movs	r3, r0
 80017ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	2b0f      	cmp	r3, #15
 80017d4:	d90a      	bls.n	80017ec <UART_SetConfig+0x2a8>
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	2380      	movs	r3, #128	@ 0x80
 80017da:	025b      	lsls	r3, r3, #9
 80017dc:	429a      	cmp	r2, r3
 80017de:	d205      	bcs.n	80017ec <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	e003      	b.n	80017f4 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80017ec:	231e      	movs	r3, #30
 80017ee:	18fb      	adds	r3, r7, r3
 80017f0:	2201      	movs	r2, #1
 80017f2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	226a      	movs	r2, #106	@ 0x6a
 80017f8:	2101      	movs	r1, #1
 80017fa:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2268      	movs	r2, #104	@ 0x68
 8001800:	2101      	movs	r1, #1
 8001802:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8001810:	231e      	movs	r3, #30
 8001812:	18fb      	adds	r3, r7, r3
 8001814:	781b      	ldrb	r3, [r3, #0]
}
 8001816:	0018      	movs	r0, r3
 8001818:	46bd      	mov	sp, r7
 800181a:	b008      	add	sp, #32
 800181c:	bd80      	pop	{r7, pc}
 800181e:	46c0      	nop			@ (mov r8, r8)
 8001820:	cfff69f3 	.word	0xcfff69f3
 8001824:	ffffcfff 	.word	0xffffcfff
 8001828:	11fff4ff 	.word	0x11fff4ff
 800182c:	40013800 	.word	0x40013800
 8001830:	40021000 	.word	0x40021000
 8001834:	40004400 	.word	0x40004400
 8001838:	02dc6c00 	.word	0x02dc6c00
 800183c:	08002bec 	.word	0x08002bec

08001840 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800184c:	2208      	movs	r2, #8
 800184e:	4013      	ands	r3, r2
 8001850:	d00b      	beq.n	800186a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	4a4a      	ldr	r2, [pc, #296]	@ (8001984 <UART_AdvFeatureConfig+0x144>)
 800185a:	4013      	ands	r3, r2
 800185c:	0019      	movs	r1, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	430a      	orrs	r2, r1
 8001868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800186e:	2201      	movs	r2, #1
 8001870:	4013      	ands	r3, r2
 8001872:	d00b      	beq.n	800188c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	4a43      	ldr	r2, [pc, #268]	@ (8001988 <UART_AdvFeatureConfig+0x148>)
 800187c:	4013      	ands	r3, r2
 800187e:	0019      	movs	r1, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	430a      	orrs	r2, r1
 800188a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001890:	2202      	movs	r2, #2
 8001892:	4013      	ands	r3, r2
 8001894:	d00b      	beq.n	80018ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	4a3b      	ldr	r2, [pc, #236]	@ (800198c <UART_AdvFeatureConfig+0x14c>)
 800189e:	4013      	ands	r3, r2
 80018a0:	0019      	movs	r1, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	430a      	orrs	r2, r1
 80018ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b2:	2204      	movs	r2, #4
 80018b4:	4013      	ands	r3, r2
 80018b6:	d00b      	beq.n	80018d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	4a34      	ldr	r2, [pc, #208]	@ (8001990 <UART_AdvFeatureConfig+0x150>)
 80018c0:	4013      	ands	r3, r2
 80018c2:	0019      	movs	r1, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018d4:	2210      	movs	r2, #16
 80018d6:	4013      	ands	r3, r2
 80018d8:	d00b      	beq.n	80018f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	4a2c      	ldr	r2, [pc, #176]	@ (8001994 <UART_AdvFeatureConfig+0x154>)
 80018e2:	4013      	ands	r3, r2
 80018e4:	0019      	movs	r1, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	430a      	orrs	r2, r1
 80018f0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f6:	2220      	movs	r2, #32
 80018f8:	4013      	ands	r3, r2
 80018fa:	d00b      	beq.n	8001914 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	4a25      	ldr	r2, [pc, #148]	@ (8001998 <UART_AdvFeatureConfig+0x158>)
 8001904:	4013      	ands	r3, r2
 8001906:	0019      	movs	r1, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	430a      	orrs	r2, r1
 8001912:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001918:	2240      	movs	r2, #64	@ 0x40
 800191a:	4013      	ands	r3, r2
 800191c:	d01d      	beq.n	800195a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	4a1d      	ldr	r2, [pc, #116]	@ (800199c <UART_AdvFeatureConfig+0x15c>)
 8001926:	4013      	ands	r3, r2
 8001928:	0019      	movs	r1, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	430a      	orrs	r2, r1
 8001934:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800193a:	2380      	movs	r3, #128	@ 0x80
 800193c:	035b      	lsls	r3, r3, #13
 800193e:	429a      	cmp	r2, r3
 8001940:	d10b      	bne.n	800195a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	4a15      	ldr	r2, [pc, #84]	@ (80019a0 <UART_AdvFeatureConfig+0x160>)
 800194a:	4013      	ands	r3, r2
 800194c:	0019      	movs	r1, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	430a      	orrs	r2, r1
 8001958:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800195e:	2280      	movs	r2, #128	@ 0x80
 8001960:	4013      	ands	r3, r2
 8001962:	d00b      	beq.n	800197c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	4a0e      	ldr	r2, [pc, #56]	@ (80019a4 <UART_AdvFeatureConfig+0x164>)
 800196c:	4013      	ands	r3, r2
 800196e:	0019      	movs	r1, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	605a      	str	r2, [r3, #4]
  }
}
 800197c:	46c0      	nop			@ (mov r8, r8)
 800197e:	46bd      	mov	sp, r7
 8001980:	b002      	add	sp, #8
 8001982:	bd80      	pop	{r7, pc}
 8001984:	ffff7fff 	.word	0xffff7fff
 8001988:	fffdffff 	.word	0xfffdffff
 800198c:	fffeffff 	.word	0xfffeffff
 8001990:	fffbffff 	.word	0xfffbffff
 8001994:	ffffefff 	.word	0xffffefff
 8001998:	ffffdfff 	.word	0xffffdfff
 800199c:	ffefffff 	.word	0xffefffff
 80019a0:	ff9fffff 	.word	0xff9fffff
 80019a4:	fff7ffff 	.word	0xfff7ffff

080019a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b092      	sub	sp, #72	@ 0x48
 80019ac:	af02      	add	r7, sp, #8
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2290      	movs	r2, #144	@ 0x90
 80019b4:	2100      	movs	r1, #0
 80019b6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80019b8:	f7fe feec 	bl	8000794 <HAL_GetTick>
 80019bc:	0003      	movs	r3, r0
 80019be:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2208      	movs	r2, #8
 80019c8:	4013      	ands	r3, r2
 80019ca:	2b08      	cmp	r3, #8
 80019cc:	d12d      	bne.n	8001a2a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80019ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019d0:	2280      	movs	r2, #128	@ 0x80
 80019d2:	0391      	lsls	r1, r2, #14
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	4a47      	ldr	r2, [pc, #284]	@ (8001af4 <UART_CheckIdleState+0x14c>)
 80019d8:	9200      	str	r2, [sp, #0]
 80019da:	2200      	movs	r2, #0
 80019dc:	f000 f88e 	bl	8001afc <UART_WaitOnFlagUntilTimeout>
 80019e0:	1e03      	subs	r3, r0, #0
 80019e2:	d022      	beq.n	8001a2a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80019e4:	f3ef 8310 	mrs	r3, PRIMASK
 80019e8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80019ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80019ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019ee:	2301      	movs	r3, #1
 80019f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019f4:	f383 8810 	msr	PRIMASK, r3
}
 80019f8:	46c0      	nop			@ (mov r8, r8)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2180      	movs	r1, #128	@ 0x80
 8001a06:	438a      	bics	r2, r1
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a10:	f383 8810 	msr	PRIMASK, r3
}
 8001a14:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2288      	movs	r2, #136	@ 0x88
 8001a1a:	2120      	movs	r1, #32
 8001a1c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2284      	movs	r2, #132	@ 0x84
 8001a22:	2100      	movs	r1, #0
 8001a24:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e060      	b.n	8001aec <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2204      	movs	r2, #4
 8001a32:	4013      	ands	r3, r2
 8001a34:	2b04      	cmp	r3, #4
 8001a36:	d146      	bne.n	8001ac6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001a38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a3a:	2280      	movs	r2, #128	@ 0x80
 8001a3c:	03d1      	lsls	r1, r2, #15
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	4a2c      	ldr	r2, [pc, #176]	@ (8001af4 <UART_CheckIdleState+0x14c>)
 8001a42:	9200      	str	r2, [sp, #0]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f000 f859 	bl	8001afc <UART_WaitOnFlagUntilTimeout>
 8001a4a:	1e03      	subs	r3, r0, #0
 8001a4c:	d03b      	beq.n	8001ac6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001a4e:	f3ef 8310 	mrs	r3, PRIMASK
 8001a52:	60fb      	str	r3, [r7, #12]
  return(result);
 8001a54:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8001a56:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a58:	2301      	movs	r3, #1
 8001a5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	f383 8810 	msr	PRIMASK, r3
}
 8001a62:	46c0      	nop			@ (mov r8, r8)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4922      	ldr	r1, [pc, #136]	@ (8001af8 <UART_CheckIdleState+0x150>)
 8001a70:	400a      	ands	r2, r1
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	f383 8810 	msr	PRIMASK, r3
}
 8001a7e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001a80:	f3ef 8310 	mrs	r3, PRIMASK
 8001a84:	61bb      	str	r3, [r7, #24]
  return(result);
 8001a86:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a88:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	f383 8810 	msr	PRIMASK, r3
}
 8001a94:	46c0      	nop			@ (mov r8, r8)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	438a      	bics	r2, r1
 8001aa4:	609a      	str	r2, [r3, #8]
 8001aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001aa8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001aaa:	6a3b      	ldr	r3, [r7, #32]
 8001aac:	f383 8810 	msr	PRIMASK, r3
}
 8001ab0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	228c      	movs	r2, #140	@ 0x8c
 8001ab6:	2120      	movs	r1, #32
 8001ab8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2284      	movs	r2, #132	@ 0x84
 8001abe:	2100      	movs	r1, #0
 8001ac0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e012      	b.n	8001aec <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2288      	movs	r2, #136	@ 0x88
 8001aca:	2120      	movs	r1, #32
 8001acc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	228c      	movs	r2, #140	@ 0x8c
 8001ad2:	2120      	movs	r1, #32
 8001ad4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2284      	movs	r2, #132	@ 0x84
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	0018      	movs	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	b010      	add	sp, #64	@ 0x40
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	01ffffff 	.word	0x01ffffff
 8001af8:	fffffedf 	.word	0xfffffedf

08001afc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	603b      	str	r3, [r7, #0]
 8001b08:	1dfb      	adds	r3, r7, #7
 8001b0a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b0c:	e04b      	b.n	8001ba6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	3301      	adds	r3, #1
 8001b12:	d048      	beq.n	8001ba6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b14:	f7fe fe3e 	bl	8000794 <HAL_GetTick>
 8001b18:	0002      	movs	r2, r0
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d302      	bcc.n	8001b2a <UART_WaitOnFlagUntilTimeout+0x2e>
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e04b      	b.n	8001bc6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2204      	movs	r2, #4
 8001b36:	4013      	ands	r3, r2
 8001b38:	d035      	beq.n	8001ba6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	69db      	ldr	r3, [r3, #28]
 8001b40:	2208      	movs	r2, #8
 8001b42:	4013      	ands	r3, r2
 8001b44:	2b08      	cmp	r3, #8
 8001b46:	d111      	bne.n	8001b6c <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2208      	movs	r2, #8
 8001b4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	0018      	movs	r0, r3
 8001b54:	f000 f83c 	bl	8001bd0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2290      	movs	r2, #144	@ 0x90
 8001b5c:	2108      	movs	r1, #8
 8001b5e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2284      	movs	r2, #132	@ 0x84
 8001b64:	2100      	movs	r1, #0
 8001b66:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e02c      	b.n	8001bc6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	69da      	ldr	r2, [r3, #28]
 8001b72:	2380      	movs	r3, #128	@ 0x80
 8001b74:	011b      	lsls	r3, r3, #4
 8001b76:	401a      	ands	r2, r3
 8001b78:	2380      	movs	r3, #128	@ 0x80
 8001b7a:	011b      	lsls	r3, r3, #4
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d112      	bne.n	8001ba6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2280      	movs	r2, #128	@ 0x80
 8001b86:	0112      	lsls	r2, r2, #4
 8001b88:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	f000 f81f 	bl	8001bd0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2290      	movs	r2, #144	@ 0x90
 8001b96:	2120      	movs	r1, #32
 8001b98:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2284      	movs	r2, #132	@ 0x84
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e00f      	b.n	8001bc6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	69db      	ldr	r3, [r3, #28]
 8001bac:	68ba      	ldr	r2, [r7, #8]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	68ba      	ldr	r2, [r7, #8]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	425a      	negs	r2, r3
 8001bb6:	4153      	adcs	r3, r2
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	001a      	movs	r2, r3
 8001bbc:	1dfb      	adds	r3, r7, #7
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d0a4      	beq.n	8001b0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	b004      	add	sp, #16
 8001bcc:	bd80      	pop	{r7, pc}
	...

08001bd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08e      	sub	sp, #56	@ 0x38
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001bd8:	f3ef 8310 	mrs	r3, PRIMASK
 8001bdc:	617b      	str	r3, [r7, #20]
  return(result);
 8001bde:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8001be0:	637b      	str	r3, [r7, #52]	@ 0x34
 8001be2:	2301      	movs	r3, #1
 8001be4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	f383 8810 	msr	PRIMASK, r3
}
 8001bec:	46c0      	nop			@ (mov r8, r8)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4926      	ldr	r1, [pc, #152]	@ (8001c94 <UART_EndRxTransfer+0xc4>)
 8001bfa:	400a      	ands	r2, r1
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	f383 8810 	msr	PRIMASK, r3
}
 8001c08:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001c0a:	f3ef 8310 	mrs	r3, PRIMASK
 8001c0e:	623b      	str	r3, [r7, #32]
  return(result);
 8001c10:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8001c12:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c14:	2301      	movs	r3, #1
 8001c16:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1a:	f383 8810 	msr	PRIMASK, r3
}
 8001c1e:	46c0      	nop			@ (mov r8, r8)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	689a      	ldr	r2, [r3, #8]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	491b      	ldr	r1, [pc, #108]	@ (8001c98 <UART_EndRxTransfer+0xc8>)
 8001c2c:	400a      	ands	r2, r1
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c32:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c36:	f383 8810 	msr	PRIMASK, r3
}
 8001c3a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d118      	bne.n	8001c76 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001c44:	f3ef 8310 	mrs	r3, PRIMASK
 8001c48:	60bb      	str	r3, [r7, #8]
  return(result);
 8001c4a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c4e:	2301      	movs	r3, #1
 8001c50:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f383 8810 	msr	PRIMASK, r3
}
 8001c58:	46c0      	nop			@ (mov r8, r8)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2110      	movs	r1, #16
 8001c66:	438a      	bics	r2, r1
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	f383 8810 	msr	PRIMASK, r3
}
 8001c74:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	228c      	movs	r2, #140	@ 0x8c
 8001c7a:	2120      	movs	r1, #32
 8001c7c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8001c8a:	46c0      	nop			@ (mov r8, r8)
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	b00e      	add	sp, #56	@ 0x38
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	46c0      	nop			@ (mov r8, r8)
 8001c94:	fffffedf 	.word	0xfffffedf
 8001c98:	effffffe 	.word	0xeffffffe

08001c9c <std>:
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	b510      	push	{r4, lr}
 8001ca0:	0004      	movs	r4, r0
 8001ca2:	6003      	str	r3, [r0, #0]
 8001ca4:	6043      	str	r3, [r0, #4]
 8001ca6:	6083      	str	r3, [r0, #8]
 8001ca8:	8181      	strh	r1, [r0, #12]
 8001caa:	6643      	str	r3, [r0, #100]	@ 0x64
 8001cac:	81c2      	strh	r2, [r0, #14]
 8001cae:	6103      	str	r3, [r0, #16]
 8001cb0:	6143      	str	r3, [r0, #20]
 8001cb2:	6183      	str	r3, [r0, #24]
 8001cb4:	0019      	movs	r1, r3
 8001cb6:	2208      	movs	r2, #8
 8001cb8:	305c      	adds	r0, #92	@ 0x5c
 8001cba:	f000 f90f 	bl	8001edc <memset>
 8001cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8001cec <std+0x50>)
 8001cc0:	6224      	str	r4, [r4, #32]
 8001cc2:	6263      	str	r3, [r4, #36]	@ 0x24
 8001cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf0 <std+0x54>)
 8001cc6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf4 <std+0x58>)
 8001cca:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf8 <std+0x5c>)
 8001cce:	6323      	str	r3, [r4, #48]	@ 0x30
 8001cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8001cfc <std+0x60>)
 8001cd2:	429c      	cmp	r4, r3
 8001cd4:	d005      	beq.n	8001ce2 <std+0x46>
 8001cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001d00 <std+0x64>)
 8001cd8:	429c      	cmp	r4, r3
 8001cda:	d002      	beq.n	8001ce2 <std+0x46>
 8001cdc:	4b09      	ldr	r3, [pc, #36]	@ (8001d04 <std+0x68>)
 8001cde:	429c      	cmp	r4, r3
 8001ce0:	d103      	bne.n	8001cea <std+0x4e>
 8001ce2:	0020      	movs	r0, r4
 8001ce4:	3058      	adds	r0, #88	@ 0x58
 8001ce6:	f000 f979 	bl	8001fdc <__retarget_lock_init_recursive>
 8001cea:	bd10      	pop	{r4, pc}
 8001cec:	08001e45 	.word	0x08001e45
 8001cf0:	08001e6d 	.word	0x08001e6d
 8001cf4:	08001ea5 	.word	0x08001ea5
 8001cf8:	08001ed1 	.word	0x08001ed1
 8001cfc:	20000120 	.word	0x20000120
 8001d00:	20000188 	.word	0x20000188
 8001d04:	200001f0 	.word	0x200001f0

08001d08 <stdio_exit_handler>:
 8001d08:	b510      	push	{r4, lr}
 8001d0a:	4a03      	ldr	r2, [pc, #12]	@ (8001d18 <stdio_exit_handler+0x10>)
 8001d0c:	4903      	ldr	r1, [pc, #12]	@ (8001d1c <stdio_exit_handler+0x14>)
 8001d0e:	4804      	ldr	r0, [pc, #16]	@ (8001d20 <stdio_exit_handler+0x18>)
 8001d10:	f000 f86c 	bl	8001dec <_fwalk_sglue>
 8001d14:	bd10      	pop	{r4, pc}
 8001d16:	46c0      	nop			@ (mov r8, r8)
 8001d18:	2000000c 	.word	0x2000000c
 8001d1c:	0800286d 	.word	0x0800286d
 8001d20:	2000001c 	.word	0x2000001c

08001d24 <cleanup_stdio>:
 8001d24:	6841      	ldr	r1, [r0, #4]
 8001d26:	4b0b      	ldr	r3, [pc, #44]	@ (8001d54 <cleanup_stdio+0x30>)
 8001d28:	b510      	push	{r4, lr}
 8001d2a:	0004      	movs	r4, r0
 8001d2c:	4299      	cmp	r1, r3
 8001d2e:	d001      	beq.n	8001d34 <cleanup_stdio+0x10>
 8001d30:	f000 fd9c 	bl	800286c <_fflush_r>
 8001d34:	68a1      	ldr	r1, [r4, #8]
 8001d36:	4b08      	ldr	r3, [pc, #32]	@ (8001d58 <cleanup_stdio+0x34>)
 8001d38:	4299      	cmp	r1, r3
 8001d3a:	d002      	beq.n	8001d42 <cleanup_stdio+0x1e>
 8001d3c:	0020      	movs	r0, r4
 8001d3e:	f000 fd95 	bl	800286c <_fflush_r>
 8001d42:	68e1      	ldr	r1, [r4, #12]
 8001d44:	4b05      	ldr	r3, [pc, #20]	@ (8001d5c <cleanup_stdio+0x38>)
 8001d46:	4299      	cmp	r1, r3
 8001d48:	d002      	beq.n	8001d50 <cleanup_stdio+0x2c>
 8001d4a:	0020      	movs	r0, r4
 8001d4c:	f000 fd8e 	bl	800286c <_fflush_r>
 8001d50:	bd10      	pop	{r4, pc}
 8001d52:	46c0      	nop			@ (mov r8, r8)
 8001d54:	20000120 	.word	0x20000120
 8001d58:	20000188 	.word	0x20000188
 8001d5c:	200001f0 	.word	0x200001f0

08001d60 <global_stdio_init.part.0>:
 8001d60:	b510      	push	{r4, lr}
 8001d62:	4b09      	ldr	r3, [pc, #36]	@ (8001d88 <global_stdio_init.part.0+0x28>)
 8001d64:	4a09      	ldr	r2, [pc, #36]	@ (8001d8c <global_stdio_init.part.0+0x2c>)
 8001d66:	2104      	movs	r1, #4
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	4809      	ldr	r0, [pc, #36]	@ (8001d90 <global_stdio_init.part.0+0x30>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f7ff ff95 	bl	8001c9c <std>
 8001d72:	2201      	movs	r2, #1
 8001d74:	2109      	movs	r1, #9
 8001d76:	4807      	ldr	r0, [pc, #28]	@ (8001d94 <global_stdio_init.part.0+0x34>)
 8001d78:	f7ff ff90 	bl	8001c9c <std>
 8001d7c:	2202      	movs	r2, #2
 8001d7e:	2112      	movs	r1, #18
 8001d80:	4805      	ldr	r0, [pc, #20]	@ (8001d98 <global_stdio_init.part.0+0x38>)
 8001d82:	f7ff ff8b 	bl	8001c9c <std>
 8001d86:	bd10      	pop	{r4, pc}
 8001d88:	20000258 	.word	0x20000258
 8001d8c:	08001d09 	.word	0x08001d09
 8001d90:	20000120 	.word	0x20000120
 8001d94:	20000188 	.word	0x20000188
 8001d98:	200001f0 	.word	0x200001f0

08001d9c <__sfp_lock_acquire>:
 8001d9c:	b510      	push	{r4, lr}
 8001d9e:	4802      	ldr	r0, [pc, #8]	@ (8001da8 <__sfp_lock_acquire+0xc>)
 8001da0:	f000 f91d 	bl	8001fde <__retarget_lock_acquire_recursive>
 8001da4:	bd10      	pop	{r4, pc}
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	20000261 	.word	0x20000261

08001dac <__sfp_lock_release>:
 8001dac:	b510      	push	{r4, lr}
 8001dae:	4802      	ldr	r0, [pc, #8]	@ (8001db8 <__sfp_lock_release+0xc>)
 8001db0:	f000 f916 	bl	8001fe0 <__retarget_lock_release_recursive>
 8001db4:	bd10      	pop	{r4, pc}
 8001db6:	46c0      	nop			@ (mov r8, r8)
 8001db8:	20000261 	.word	0x20000261

08001dbc <__sinit>:
 8001dbc:	b510      	push	{r4, lr}
 8001dbe:	0004      	movs	r4, r0
 8001dc0:	f7ff ffec 	bl	8001d9c <__sfp_lock_acquire>
 8001dc4:	6a23      	ldr	r3, [r4, #32]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d002      	beq.n	8001dd0 <__sinit+0x14>
 8001dca:	f7ff ffef 	bl	8001dac <__sfp_lock_release>
 8001dce:	bd10      	pop	{r4, pc}
 8001dd0:	4b04      	ldr	r3, [pc, #16]	@ (8001de4 <__sinit+0x28>)
 8001dd2:	6223      	str	r3, [r4, #32]
 8001dd4:	4b04      	ldr	r3, [pc, #16]	@ (8001de8 <__sinit+0x2c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1f6      	bne.n	8001dca <__sinit+0xe>
 8001ddc:	f7ff ffc0 	bl	8001d60 <global_stdio_init.part.0>
 8001de0:	e7f3      	b.n	8001dca <__sinit+0xe>
 8001de2:	46c0      	nop			@ (mov r8, r8)
 8001de4:	08001d25 	.word	0x08001d25
 8001de8:	20000258 	.word	0x20000258

08001dec <_fwalk_sglue>:
 8001dec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001dee:	0014      	movs	r4, r2
 8001df0:	2600      	movs	r6, #0
 8001df2:	9000      	str	r0, [sp, #0]
 8001df4:	9101      	str	r1, [sp, #4]
 8001df6:	68a5      	ldr	r5, [r4, #8]
 8001df8:	6867      	ldr	r7, [r4, #4]
 8001dfa:	3f01      	subs	r7, #1
 8001dfc:	d504      	bpl.n	8001e08 <_fwalk_sglue+0x1c>
 8001dfe:	6824      	ldr	r4, [r4, #0]
 8001e00:	2c00      	cmp	r4, #0
 8001e02:	d1f8      	bne.n	8001df6 <_fwalk_sglue+0xa>
 8001e04:	0030      	movs	r0, r6
 8001e06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001e08:	89ab      	ldrh	r3, [r5, #12]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d908      	bls.n	8001e20 <_fwalk_sglue+0x34>
 8001e0e:	220e      	movs	r2, #14
 8001e10:	5eab      	ldrsh	r3, [r5, r2]
 8001e12:	3301      	adds	r3, #1
 8001e14:	d004      	beq.n	8001e20 <_fwalk_sglue+0x34>
 8001e16:	0029      	movs	r1, r5
 8001e18:	9800      	ldr	r0, [sp, #0]
 8001e1a:	9b01      	ldr	r3, [sp, #4]
 8001e1c:	4798      	blx	r3
 8001e1e:	4306      	orrs	r6, r0
 8001e20:	3568      	adds	r5, #104	@ 0x68
 8001e22:	e7ea      	b.n	8001dfa <_fwalk_sglue+0xe>

08001e24 <iprintf>:
 8001e24:	b40f      	push	{r0, r1, r2, r3}
 8001e26:	b507      	push	{r0, r1, r2, lr}
 8001e28:	4905      	ldr	r1, [pc, #20]	@ (8001e40 <iprintf+0x1c>)
 8001e2a:	ab04      	add	r3, sp, #16
 8001e2c:	6808      	ldr	r0, [r1, #0]
 8001e2e:	cb04      	ldmia	r3!, {r2}
 8001e30:	6881      	ldr	r1, [r0, #8]
 8001e32:	9301      	str	r3, [sp, #4]
 8001e34:	f000 f9fa 	bl	800222c <_vfiprintf_r>
 8001e38:	b003      	add	sp, #12
 8001e3a:	bc08      	pop	{r3}
 8001e3c:	b004      	add	sp, #16
 8001e3e:	4718      	bx	r3
 8001e40:	20000018 	.word	0x20000018

08001e44 <__sread>:
 8001e44:	b570      	push	{r4, r5, r6, lr}
 8001e46:	000c      	movs	r4, r1
 8001e48:	250e      	movs	r5, #14
 8001e4a:	5f49      	ldrsh	r1, [r1, r5]
 8001e4c:	f000 f874 	bl	8001f38 <_read_r>
 8001e50:	2800      	cmp	r0, #0
 8001e52:	db03      	blt.n	8001e5c <__sread+0x18>
 8001e54:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001e56:	181b      	adds	r3, r3, r0
 8001e58:	6563      	str	r3, [r4, #84]	@ 0x54
 8001e5a:	bd70      	pop	{r4, r5, r6, pc}
 8001e5c:	89a3      	ldrh	r3, [r4, #12]
 8001e5e:	4a02      	ldr	r2, [pc, #8]	@ (8001e68 <__sread+0x24>)
 8001e60:	4013      	ands	r3, r2
 8001e62:	81a3      	strh	r3, [r4, #12]
 8001e64:	e7f9      	b.n	8001e5a <__sread+0x16>
 8001e66:	46c0      	nop			@ (mov r8, r8)
 8001e68:	ffffefff 	.word	0xffffefff

08001e6c <__swrite>:
 8001e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e6e:	001f      	movs	r7, r3
 8001e70:	898b      	ldrh	r3, [r1, #12]
 8001e72:	0005      	movs	r5, r0
 8001e74:	000c      	movs	r4, r1
 8001e76:	0016      	movs	r6, r2
 8001e78:	05db      	lsls	r3, r3, #23
 8001e7a:	d505      	bpl.n	8001e88 <__swrite+0x1c>
 8001e7c:	230e      	movs	r3, #14
 8001e7e:	5ec9      	ldrsh	r1, [r1, r3]
 8001e80:	2200      	movs	r2, #0
 8001e82:	2302      	movs	r3, #2
 8001e84:	f000 f844 	bl	8001f10 <_lseek_r>
 8001e88:	89a3      	ldrh	r3, [r4, #12]
 8001e8a:	4a05      	ldr	r2, [pc, #20]	@ (8001ea0 <__swrite+0x34>)
 8001e8c:	0028      	movs	r0, r5
 8001e8e:	4013      	ands	r3, r2
 8001e90:	81a3      	strh	r3, [r4, #12]
 8001e92:	0032      	movs	r2, r6
 8001e94:	230e      	movs	r3, #14
 8001e96:	5ee1      	ldrsh	r1, [r4, r3]
 8001e98:	003b      	movs	r3, r7
 8001e9a:	f000 f861 	bl	8001f60 <_write_r>
 8001e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ea0:	ffffefff 	.word	0xffffefff

08001ea4 <__sseek>:
 8001ea4:	b570      	push	{r4, r5, r6, lr}
 8001ea6:	000c      	movs	r4, r1
 8001ea8:	250e      	movs	r5, #14
 8001eaa:	5f49      	ldrsh	r1, [r1, r5]
 8001eac:	f000 f830 	bl	8001f10 <_lseek_r>
 8001eb0:	89a3      	ldrh	r3, [r4, #12]
 8001eb2:	1c42      	adds	r2, r0, #1
 8001eb4:	d103      	bne.n	8001ebe <__sseek+0x1a>
 8001eb6:	4a05      	ldr	r2, [pc, #20]	@ (8001ecc <__sseek+0x28>)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	81a3      	strh	r3, [r4, #12]
 8001ebc:	bd70      	pop	{r4, r5, r6, pc}
 8001ebe:	2280      	movs	r2, #128	@ 0x80
 8001ec0:	0152      	lsls	r2, r2, #5
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	81a3      	strh	r3, [r4, #12]
 8001ec6:	6560      	str	r0, [r4, #84]	@ 0x54
 8001ec8:	e7f8      	b.n	8001ebc <__sseek+0x18>
 8001eca:	46c0      	nop			@ (mov r8, r8)
 8001ecc:	ffffefff 	.word	0xffffefff

08001ed0 <__sclose>:
 8001ed0:	b510      	push	{r4, lr}
 8001ed2:	230e      	movs	r3, #14
 8001ed4:	5ec9      	ldrsh	r1, [r1, r3]
 8001ed6:	f000 f809 	bl	8001eec <_close_r>
 8001eda:	bd10      	pop	{r4, pc}

08001edc <memset>:
 8001edc:	0003      	movs	r3, r0
 8001ede:	1882      	adds	r2, r0, r2
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d100      	bne.n	8001ee6 <memset+0xa>
 8001ee4:	4770      	bx	lr
 8001ee6:	7019      	strb	r1, [r3, #0]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	e7f9      	b.n	8001ee0 <memset+0x4>

08001eec <_close_r>:
 8001eec:	2300      	movs	r3, #0
 8001eee:	b570      	push	{r4, r5, r6, lr}
 8001ef0:	4d06      	ldr	r5, [pc, #24]	@ (8001f0c <_close_r+0x20>)
 8001ef2:	0004      	movs	r4, r0
 8001ef4:	0008      	movs	r0, r1
 8001ef6:	602b      	str	r3, [r5, #0]
 8001ef8:	f7fe fb42 	bl	8000580 <_close>
 8001efc:	1c43      	adds	r3, r0, #1
 8001efe:	d103      	bne.n	8001f08 <_close_r+0x1c>
 8001f00:	682b      	ldr	r3, [r5, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d000      	beq.n	8001f08 <_close_r+0x1c>
 8001f06:	6023      	str	r3, [r4, #0]
 8001f08:	bd70      	pop	{r4, r5, r6, pc}
 8001f0a:	46c0      	nop			@ (mov r8, r8)
 8001f0c:	2000025c 	.word	0x2000025c

08001f10 <_lseek_r>:
 8001f10:	b570      	push	{r4, r5, r6, lr}
 8001f12:	0004      	movs	r4, r0
 8001f14:	0008      	movs	r0, r1
 8001f16:	0011      	movs	r1, r2
 8001f18:	001a      	movs	r2, r3
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	4d05      	ldr	r5, [pc, #20]	@ (8001f34 <_lseek_r+0x24>)
 8001f1e:	602b      	str	r3, [r5, #0]
 8001f20:	f7fe fb4f 	bl	80005c2 <_lseek>
 8001f24:	1c43      	adds	r3, r0, #1
 8001f26:	d103      	bne.n	8001f30 <_lseek_r+0x20>
 8001f28:	682b      	ldr	r3, [r5, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d000      	beq.n	8001f30 <_lseek_r+0x20>
 8001f2e:	6023      	str	r3, [r4, #0]
 8001f30:	bd70      	pop	{r4, r5, r6, pc}
 8001f32:	46c0      	nop			@ (mov r8, r8)
 8001f34:	2000025c 	.word	0x2000025c

08001f38 <_read_r>:
 8001f38:	b570      	push	{r4, r5, r6, lr}
 8001f3a:	0004      	movs	r4, r0
 8001f3c:	0008      	movs	r0, r1
 8001f3e:	0011      	movs	r1, r2
 8001f40:	001a      	movs	r2, r3
 8001f42:	2300      	movs	r3, #0
 8001f44:	4d05      	ldr	r5, [pc, #20]	@ (8001f5c <_read_r+0x24>)
 8001f46:	602b      	str	r3, [r5, #0]
 8001f48:	f7fe fae1 	bl	800050e <_read>
 8001f4c:	1c43      	adds	r3, r0, #1
 8001f4e:	d103      	bne.n	8001f58 <_read_r+0x20>
 8001f50:	682b      	ldr	r3, [r5, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d000      	beq.n	8001f58 <_read_r+0x20>
 8001f56:	6023      	str	r3, [r4, #0]
 8001f58:	bd70      	pop	{r4, r5, r6, pc}
 8001f5a:	46c0      	nop			@ (mov r8, r8)
 8001f5c:	2000025c 	.word	0x2000025c

08001f60 <_write_r>:
 8001f60:	b570      	push	{r4, r5, r6, lr}
 8001f62:	0004      	movs	r4, r0
 8001f64:	0008      	movs	r0, r1
 8001f66:	0011      	movs	r1, r2
 8001f68:	001a      	movs	r2, r3
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	4d05      	ldr	r5, [pc, #20]	@ (8001f84 <_write_r+0x24>)
 8001f6e:	602b      	str	r3, [r5, #0]
 8001f70:	f7fe faea 	bl	8000548 <_write>
 8001f74:	1c43      	adds	r3, r0, #1
 8001f76:	d103      	bne.n	8001f80 <_write_r+0x20>
 8001f78:	682b      	ldr	r3, [r5, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d000      	beq.n	8001f80 <_write_r+0x20>
 8001f7e:	6023      	str	r3, [r4, #0]
 8001f80:	bd70      	pop	{r4, r5, r6, pc}
 8001f82:	46c0      	nop			@ (mov r8, r8)
 8001f84:	2000025c 	.word	0x2000025c

08001f88 <__errno>:
 8001f88:	4b01      	ldr	r3, [pc, #4]	@ (8001f90 <__errno+0x8>)
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	4770      	bx	lr
 8001f8e:	46c0      	nop			@ (mov r8, r8)
 8001f90:	20000018 	.word	0x20000018

08001f94 <__libc_init_array>:
 8001f94:	b570      	push	{r4, r5, r6, lr}
 8001f96:	2600      	movs	r6, #0
 8001f98:	4c0c      	ldr	r4, [pc, #48]	@ (8001fcc <__libc_init_array+0x38>)
 8001f9a:	4d0d      	ldr	r5, [pc, #52]	@ (8001fd0 <__libc_init_array+0x3c>)
 8001f9c:	1b64      	subs	r4, r4, r5
 8001f9e:	10a4      	asrs	r4, r4, #2
 8001fa0:	42a6      	cmp	r6, r4
 8001fa2:	d109      	bne.n	8001fb8 <__libc_init_array+0x24>
 8001fa4:	2600      	movs	r6, #0
 8001fa6:	f000 fddb 	bl	8002b60 <_init>
 8001faa:	4c0a      	ldr	r4, [pc, #40]	@ (8001fd4 <__libc_init_array+0x40>)
 8001fac:	4d0a      	ldr	r5, [pc, #40]	@ (8001fd8 <__libc_init_array+0x44>)
 8001fae:	1b64      	subs	r4, r4, r5
 8001fb0:	10a4      	asrs	r4, r4, #2
 8001fb2:	42a6      	cmp	r6, r4
 8001fb4:	d105      	bne.n	8001fc2 <__libc_init_array+0x2e>
 8001fb6:	bd70      	pop	{r4, r5, r6, pc}
 8001fb8:	00b3      	lsls	r3, r6, #2
 8001fba:	58eb      	ldr	r3, [r5, r3]
 8001fbc:	4798      	blx	r3
 8001fbe:	3601      	adds	r6, #1
 8001fc0:	e7ee      	b.n	8001fa0 <__libc_init_array+0xc>
 8001fc2:	00b3      	lsls	r3, r6, #2
 8001fc4:	58eb      	ldr	r3, [r5, r3]
 8001fc6:	4798      	blx	r3
 8001fc8:	3601      	adds	r6, #1
 8001fca:	e7f2      	b.n	8001fb2 <__libc_init_array+0x1e>
 8001fcc:	08002c38 	.word	0x08002c38
 8001fd0:	08002c38 	.word	0x08002c38
 8001fd4:	08002c3c 	.word	0x08002c3c
 8001fd8:	08002c38 	.word	0x08002c38

08001fdc <__retarget_lock_init_recursive>:
 8001fdc:	4770      	bx	lr

08001fde <__retarget_lock_acquire_recursive>:
 8001fde:	4770      	bx	lr

08001fe0 <__retarget_lock_release_recursive>:
 8001fe0:	4770      	bx	lr
	...

08001fe4 <_free_r>:
 8001fe4:	b570      	push	{r4, r5, r6, lr}
 8001fe6:	0005      	movs	r5, r0
 8001fe8:	1e0c      	subs	r4, r1, #0
 8001fea:	d010      	beq.n	800200e <_free_r+0x2a>
 8001fec:	3c04      	subs	r4, #4
 8001fee:	6823      	ldr	r3, [r4, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	da00      	bge.n	8001ff6 <_free_r+0x12>
 8001ff4:	18e4      	adds	r4, r4, r3
 8001ff6:	0028      	movs	r0, r5
 8001ff8:	f000 f8e0 	bl	80021bc <__malloc_lock>
 8001ffc:	4a1d      	ldr	r2, [pc, #116]	@ (8002074 <_free_r+0x90>)
 8001ffe:	6813      	ldr	r3, [r2, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d105      	bne.n	8002010 <_free_r+0x2c>
 8002004:	6063      	str	r3, [r4, #4]
 8002006:	6014      	str	r4, [r2, #0]
 8002008:	0028      	movs	r0, r5
 800200a:	f000 f8df 	bl	80021cc <__malloc_unlock>
 800200e:	bd70      	pop	{r4, r5, r6, pc}
 8002010:	42a3      	cmp	r3, r4
 8002012:	d908      	bls.n	8002026 <_free_r+0x42>
 8002014:	6820      	ldr	r0, [r4, #0]
 8002016:	1821      	adds	r1, r4, r0
 8002018:	428b      	cmp	r3, r1
 800201a:	d1f3      	bne.n	8002004 <_free_r+0x20>
 800201c:	6819      	ldr	r1, [r3, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	1809      	adds	r1, r1, r0
 8002022:	6021      	str	r1, [r4, #0]
 8002024:	e7ee      	b.n	8002004 <_free_r+0x20>
 8002026:	001a      	movs	r2, r3
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <_free_r+0x4e>
 800202e:	42a3      	cmp	r3, r4
 8002030:	d9f9      	bls.n	8002026 <_free_r+0x42>
 8002032:	6811      	ldr	r1, [r2, #0]
 8002034:	1850      	adds	r0, r2, r1
 8002036:	42a0      	cmp	r0, r4
 8002038:	d10b      	bne.n	8002052 <_free_r+0x6e>
 800203a:	6820      	ldr	r0, [r4, #0]
 800203c:	1809      	adds	r1, r1, r0
 800203e:	1850      	adds	r0, r2, r1
 8002040:	6011      	str	r1, [r2, #0]
 8002042:	4283      	cmp	r3, r0
 8002044:	d1e0      	bne.n	8002008 <_free_r+0x24>
 8002046:	6818      	ldr	r0, [r3, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	1841      	adds	r1, r0, r1
 800204c:	6011      	str	r1, [r2, #0]
 800204e:	6053      	str	r3, [r2, #4]
 8002050:	e7da      	b.n	8002008 <_free_r+0x24>
 8002052:	42a0      	cmp	r0, r4
 8002054:	d902      	bls.n	800205c <_free_r+0x78>
 8002056:	230c      	movs	r3, #12
 8002058:	602b      	str	r3, [r5, #0]
 800205a:	e7d5      	b.n	8002008 <_free_r+0x24>
 800205c:	6820      	ldr	r0, [r4, #0]
 800205e:	1821      	adds	r1, r4, r0
 8002060:	428b      	cmp	r3, r1
 8002062:	d103      	bne.n	800206c <_free_r+0x88>
 8002064:	6819      	ldr	r1, [r3, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	1809      	adds	r1, r1, r0
 800206a:	6021      	str	r1, [r4, #0]
 800206c:	6063      	str	r3, [r4, #4]
 800206e:	6054      	str	r4, [r2, #4]
 8002070:	e7ca      	b.n	8002008 <_free_r+0x24>
 8002072:	46c0      	nop			@ (mov r8, r8)
 8002074:	20000268 	.word	0x20000268

08002078 <sbrk_aligned>:
 8002078:	b570      	push	{r4, r5, r6, lr}
 800207a:	4e0f      	ldr	r6, [pc, #60]	@ (80020b8 <sbrk_aligned+0x40>)
 800207c:	000d      	movs	r5, r1
 800207e:	6831      	ldr	r1, [r6, #0]
 8002080:	0004      	movs	r4, r0
 8002082:	2900      	cmp	r1, #0
 8002084:	d102      	bne.n	800208c <sbrk_aligned+0x14>
 8002086:	f000 fcbd 	bl	8002a04 <_sbrk_r>
 800208a:	6030      	str	r0, [r6, #0]
 800208c:	0029      	movs	r1, r5
 800208e:	0020      	movs	r0, r4
 8002090:	f000 fcb8 	bl	8002a04 <_sbrk_r>
 8002094:	1c43      	adds	r3, r0, #1
 8002096:	d103      	bne.n	80020a0 <sbrk_aligned+0x28>
 8002098:	2501      	movs	r5, #1
 800209a:	426d      	negs	r5, r5
 800209c:	0028      	movs	r0, r5
 800209e:	bd70      	pop	{r4, r5, r6, pc}
 80020a0:	2303      	movs	r3, #3
 80020a2:	1cc5      	adds	r5, r0, #3
 80020a4:	439d      	bics	r5, r3
 80020a6:	42a8      	cmp	r0, r5
 80020a8:	d0f8      	beq.n	800209c <sbrk_aligned+0x24>
 80020aa:	1a29      	subs	r1, r5, r0
 80020ac:	0020      	movs	r0, r4
 80020ae:	f000 fca9 	bl	8002a04 <_sbrk_r>
 80020b2:	3001      	adds	r0, #1
 80020b4:	d1f2      	bne.n	800209c <sbrk_aligned+0x24>
 80020b6:	e7ef      	b.n	8002098 <sbrk_aligned+0x20>
 80020b8:	20000264 	.word	0x20000264

080020bc <_malloc_r>:
 80020bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80020be:	2203      	movs	r2, #3
 80020c0:	1ccb      	adds	r3, r1, #3
 80020c2:	4393      	bics	r3, r2
 80020c4:	3308      	adds	r3, #8
 80020c6:	0005      	movs	r5, r0
 80020c8:	001f      	movs	r7, r3
 80020ca:	2b0c      	cmp	r3, #12
 80020cc:	d234      	bcs.n	8002138 <_malloc_r+0x7c>
 80020ce:	270c      	movs	r7, #12
 80020d0:	42b9      	cmp	r1, r7
 80020d2:	d833      	bhi.n	800213c <_malloc_r+0x80>
 80020d4:	0028      	movs	r0, r5
 80020d6:	f000 f871 	bl	80021bc <__malloc_lock>
 80020da:	4e37      	ldr	r6, [pc, #220]	@ (80021b8 <_malloc_r+0xfc>)
 80020dc:	6833      	ldr	r3, [r6, #0]
 80020de:	001c      	movs	r4, r3
 80020e0:	2c00      	cmp	r4, #0
 80020e2:	d12f      	bne.n	8002144 <_malloc_r+0x88>
 80020e4:	0039      	movs	r1, r7
 80020e6:	0028      	movs	r0, r5
 80020e8:	f7ff ffc6 	bl	8002078 <sbrk_aligned>
 80020ec:	0004      	movs	r4, r0
 80020ee:	1c43      	adds	r3, r0, #1
 80020f0:	d15f      	bne.n	80021b2 <_malloc_r+0xf6>
 80020f2:	6834      	ldr	r4, [r6, #0]
 80020f4:	9400      	str	r4, [sp, #0]
 80020f6:	9b00      	ldr	r3, [sp, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d14a      	bne.n	8002192 <_malloc_r+0xd6>
 80020fc:	2c00      	cmp	r4, #0
 80020fe:	d052      	beq.n	80021a6 <_malloc_r+0xea>
 8002100:	6823      	ldr	r3, [r4, #0]
 8002102:	0028      	movs	r0, r5
 8002104:	18e3      	adds	r3, r4, r3
 8002106:	9900      	ldr	r1, [sp, #0]
 8002108:	9301      	str	r3, [sp, #4]
 800210a:	f000 fc7b 	bl	8002a04 <_sbrk_r>
 800210e:	9b01      	ldr	r3, [sp, #4]
 8002110:	4283      	cmp	r3, r0
 8002112:	d148      	bne.n	80021a6 <_malloc_r+0xea>
 8002114:	6823      	ldr	r3, [r4, #0]
 8002116:	0028      	movs	r0, r5
 8002118:	1aff      	subs	r7, r7, r3
 800211a:	0039      	movs	r1, r7
 800211c:	f7ff ffac 	bl	8002078 <sbrk_aligned>
 8002120:	3001      	adds	r0, #1
 8002122:	d040      	beq.n	80021a6 <_malloc_r+0xea>
 8002124:	6823      	ldr	r3, [r4, #0]
 8002126:	19db      	adds	r3, r3, r7
 8002128:	6023      	str	r3, [r4, #0]
 800212a:	6833      	ldr	r3, [r6, #0]
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	2a00      	cmp	r2, #0
 8002130:	d133      	bne.n	800219a <_malloc_r+0xde>
 8002132:	9b00      	ldr	r3, [sp, #0]
 8002134:	6033      	str	r3, [r6, #0]
 8002136:	e019      	b.n	800216c <_malloc_r+0xb0>
 8002138:	2b00      	cmp	r3, #0
 800213a:	dac9      	bge.n	80020d0 <_malloc_r+0x14>
 800213c:	230c      	movs	r3, #12
 800213e:	602b      	str	r3, [r5, #0]
 8002140:	2000      	movs	r0, #0
 8002142:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002144:	6821      	ldr	r1, [r4, #0]
 8002146:	1bc9      	subs	r1, r1, r7
 8002148:	d420      	bmi.n	800218c <_malloc_r+0xd0>
 800214a:	290b      	cmp	r1, #11
 800214c:	d90a      	bls.n	8002164 <_malloc_r+0xa8>
 800214e:	19e2      	adds	r2, r4, r7
 8002150:	6027      	str	r7, [r4, #0]
 8002152:	42a3      	cmp	r3, r4
 8002154:	d104      	bne.n	8002160 <_malloc_r+0xa4>
 8002156:	6032      	str	r2, [r6, #0]
 8002158:	6863      	ldr	r3, [r4, #4]
 800215a:	6011      	str	r1, [r2, #0]
 800215c:	6053      	str	r3, [r2, #4]
 800215e:	e005      	b.n	800216c <_malloc_r+0xb0>
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	e7f9      	b.n	8002158 <_malloc_r+0x9c>
 8002164:	6862      	ldr	r2, [r4, #4]
 8002166:	42a3      	cmp	r3, r4
 8002168:	d10e      	bne.n	8002188 <_malloc_r+0xcc>
 800216a:	6032      	str	r2, [r6, #0]
 800216c:	0028      	movs	r0, r5
 800216e:	f000 f82d 	bl	80021cc <__malloc_unlock>
 8002172:	0020      	movs	r0, r4
 8002174:	2207      	movs	r2, #7
 8002176:	300b      	adds	r0, #11
 8002178:	1d23      	adds	r3, r4, #4
 800217a:	4390      	bics	r0, r2
 800217c:	1ac2      	subs	r2, r0, r3
 800217e:	4298      	cmp	r0, r3
 8002180:	d0df      	beq.n	8002142 <_malloc_r+0x86>
 8002182:	1a1b      	subs	r3, r3, r0
 8002184:	50a3      	str	r3, [r4, r2]
 8002186:	e7dc      	b.n	8002142 <_malloc_r+0x86>
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	e7ef      	b.n	800216c <_malloc_r+0xb0>
 800218c:	0023      	movs	r3, r4
 800218e:	6864      	ldr	r4, [r4, #4]
 8002190:	e7a6      	b.n	80020e0 <_malloc_r+0x24>
 8002192:	9c00      	ldr	r4, [sp, #0]
 8002194:	6863      	ldr	r3, [r4, #4]
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	e7ad      	b.n	80020f6 <_malloc_r+0x3a>
 800219a:	001a      	movs	r2, r3
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	42a3      	cmp	r3, r4
 80021a0:	d1fb      	bne.n	800219a <_malloc_r+0xde>
 80021a2:	2300      	movs	r3, #0
 80021a4:	e7da      	b.n	800215c <_malloc_r+0xa0>
 80021a6:	230c      	movs	r3, #12
 80021a8:	0028      	movs	r0, r5
 80021aa:	602b      	str	r3, [r5, #0]
 80021ac:	f000 f80e 	bl	80021cc <__malloc_unlock>
 80021b0:	e7c6      	b.n	8002140 <_malloc_r+0x84>
 80021b2:	6007      	str	r7, [r0, #0]
 80021b4:	e7da      	b.n	800216c <_malloc_r+0xb0>
 80021b6:	46c0      	nop			@ (mov r8, r8)
 80021b8:	20000268 	.word	0x20000268

080021bc <__malloc_lock>:
 80021bc:	b510      	push	{r4, lr}
 80021be:	4802      	ldr	r0, [pc, #8]	@ (80021c8 <__malloc_lock+0xc>)
 80021c0:	f7ff ff0d 	bl	8001fde <__retarget_lock_acquire_recursive>
 80021c4:	bd10      	pop	{r4, pc}
 80021c6:	46c0      	nop			@ (mov r8, r8)
 80021c8:	20000260 	.word	0x20000260

080021cc <__malloc_unlock>:
 80021cc:	b510      	push	{r4, lr}
 80021ce:	4802      	ldr	r0, [pc, #8]	@ (80021d8 <__malloc_unlock+0xc>)
 80021d0:	f7ff ff06 	bl	8001fe0 <__retarget_lock_release_recursive>
 80021d4:	bd10      	pop	{r4, pc}
 80021d6:	46c0      	nop			@ (mov r8, r8)
 80021d8:	20000260 	.word	0x20000260

080021dc <__sfputc_r>:
 80021dc:	6893      	ldr	r3, [r2, #8]
 80021de:	b510      	push	{r4, lr}
 80021e0:	3b01      	subs	r3, #1
 80021e2:	6093      	str	r3, [r2, #8]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	da04      	bge.n	80021f2 <__sfputc_r+0x16>
 80021e8:	6994      	ldr	r4, [r2, #24]
 80021ea:	42a3      	cmp	r3, r4
 80021ec:	db07      	blt.n	80021fe <__sfputc_r+0x22>
 80021ee:	290a      	cmp	r1, #10
 80021f0:	d005      	beq.n	80021fe <__sfputc_r+0x22>
 80021f2:	6813      	ldr	r3, [r2, #0]
 80021f4:	1c58      	adds	r0, r3, #1
 80021f6:	6010      	str	r0, [r2, #0]
 80021f8:	7019      	strb	r1, [r3, #0]
 80021fa:	0008      	movs	r0, r1
 80021fc:	bd10      	pop	{r4, pc}
 80021fe:	f000 fb60 	bl	80028c2 <__swbuf_r>
 8002202:	0001      	movs	r1, r0
 8002204:	e7f9      	b.n	80021fa <__sfputc_r+0x1e>

08002206 <__sfputs_r>:
 8002206:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002208:	0006      	movs	r6, r0
 800220a:	000f      	movs	r7, r1
 800220c:	0014      	movs	r4, r2
 800220e:	18d5      	adds	r5, r2, r3
 8002210:	42ac      	cmp	r4, r5
 8002212:	d101      	bne.n	8002218 <__sfputs_r+0x12>
 8002214:	2000      	movs	r0, #0
 8002216:	e007      	b.n	8002228 <__sfputs_r+0x22>
 8002218:	7821      	ldrb	r1, [r4, #0]
 800221a:	003a      	movs	r2, r7
 800221c:	0030      	movs	r0, r6
 800221e:	f7ff ffdd 	bl	80021dc <__sfputc_r>
 8002222:	3401      	adds	r4, #1
 8002224:	1c43      	adds	r3, r0, #1
 8002226:	d1f3      	bne.n	8002210 <__sfputs_r+0xa>
 8002228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800222c <_vfiprintf_r>:
 800222c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800222e:	b0a1      	sub	sp, #132	@ 0x84
 8002230:	000f      	movs	r7, r1
 8002232:	0015      	movs	r5, r2
 8002234:	001e      	movs	r6, r3
 8002236:	9003      	str	r0, [sp, #12]
 8002238:	2800      	cmp	r0, #0
 800223a:	d004      	beq.n	8002246 <_vfiprintf_r+0x1a>
 800223c:	6a03      	ldr	r3, [r0, #32]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <_vfiprintf_r+0x1a>
 8002242:	f7ff fdbb 	bl	8001dbc <__sinit>
 8002246:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002248:	07db      	lsls	r3, r3, #31
 800224a:	d405      	bmi.n	8002258 <_vfiprintf_r+0x2c>
 800224c:	89bb      	ldrh	r3, [r7, #12]
 800224e:	059b      	lsls	r3, r3, #22
 8002250:	d402      	bmi.n	8002258 <_vfiprintf_r+0x2c>
 8002252:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002254:	f7ff fec3 	bl	8001fde <__retarget_lock_acquire_recursive>
 8002258:	89bb      	ldrh	r3, [r7, #12]
 800225a:	071b      	lsls	r3, r3, #28
 800225c:	d502      	bpl.n	8002264 <_vfiprintf_r+0x38>
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d113      	bne.n	800228c <_vfiprintf_r+0x60>
 8002264:	0039      	movs	r1, r7
 8002266:	9803      	ldr	r0, [sp, #12]
 8002268:	f000 fb6e 	bl	8002948 <__swsetup_r>
 800226c:	2800      	cmp	r0, #0
 800226e:	d00d      	beq.n	800228c <_vfiprintf_r+0x60>
 8002270:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002272:	07db      	lsls	r3, r3, #31
 8002274:	d503      	bpl.n	800227e <_vfiprintf_r+0x52>
 8002276:	2001      	movs	r0, #1
 8002278:	4240      	negs	r0, r0
 800227a:	b021      	add	sp, #132	@ 0x84
 800227c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800227e:	89bb      	ldrh	r3, [r7, #12]
 8002280:	059b      	lsls	r3, r3, #22
 8002282:	d4f8      	bmi.n	8002276 <_vfiprintf_r+0x4a>
 8002284:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002286:	f7ff feab 	bl	8001fe0 <__retarget_lock_release_recursive>
 800228a:	e7f4      	b.n	8002276 <_vfiprintf_r+0x4a>
 800228c:	2300      	movs	r3, #0
 800228e:	ac08      	add	r4, sp, #32
 8002290:	6163      	str	r3, [r4, #20]
 8002292:	3320      	adds	r3, #32
 8002294:	7663      	strb	r3, [r4, #25]
 8002296:	3310      	adds	r3, #16
 8002298:	76a3      	strb	r3, [r4, #26]
 800229a:	9607      	str	r6, [sp, #28]
 800229c:	002e      	movs	r6, r5
 800229e:	7833      	ldrb	r3, [r6, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <_vfiprintf_r+0x7c>
 80022a4:	2b25      	cmp	r3, #37	@ 0x25
 80022a6:	d148      	bne.n	800233a <_vfiprintf_r+0x10e>
 80022a8:	1b73      	subs	r3, r6, r5
 80022aa:	9305      	str	r3, [sp, #20]
 80022ac:	42ae      	cmp	r6, r5
 80022ae:	d00b      	beq.n	80022c8 <_vfiprintf_r+0x9c>
 80022b0:	002a      	movs	r2, r5
 80022b2:	0039      	movs	r1, r7
 80022b4:	9803      	ldr	r0, [sp, #12]
 80022b6:	f7ff ffa6 	bl	8002206 <__sfputs_r>
 80022ba:	3001      	adds	r0, #1
 80022bc:	d100      	bne.n	80022c0 <_vfiprintf_r+0x94>
 80022be:	e0ae      	b.n	800241e <_vfiprintf_r+0x1f2>
 80022c0:	6963      	ldr	r3, [r4, #20]
 80022c2:	9a05      	ldr	r2, [sp, #20]
 80022c4:	189b      	adds	r3, r3, r2
 80022c6:	6163      	str	r3, [r4, #20]
 80022c8:	7833      	ldrb	r3, [r6, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d100      	bne.n	80022d0 <_vfiprintf_r+0xa4>
 80022ce:	e0a6      	b.n	800241e <_vfiprintf_r+0x1f2>
 80022d0:	2201      	movs	r2, #1
 80022d2:	2300      	movs	r3, #0
 80022d4:	4252      	negs	r2, r2
 80022d6:	6062      	str	r2, [r4, #4]
 80022d8:	a904      	add	r1, sp, #16
 80022da:	3254      	adds	r2, #84	@ 0x54
 80022dc:	1852      	adds	r2, r2, r1
 80022de:	1c75      	adds	r5, r6, #1
 80022e0:	6023      	str	r3, [r4, #0]
 80022e2:	60e3      	str	r3, [r4, #12]
 80022e4:	60a3      	str	r3, [r4, #8]
 80022e6:	7013      	strb	r3, [r2, #0]
 80022e8:	65a3      	str	r3, [r4, #88]	@ 0x58
 80022ea:	4b59      	ldr	r3, [pc, #356]	@ (8002450 <_vfiprintf_r+0x224>)
 80022ec:	2205      	movs	r2, #5
 80022ee:	0018      	movs	r0, r3
 80022f0:	7829      	ldrb	r1, [r5, #0]
 80022f2:	9305      	str	r3, [sp, #20]
 80022f4:	f000 fb98 	bl	8002a28 <memchr>
 80022f8:	1c6e      	adds	r6, r5, #1
 80022fa:	2800      	cmp	r0, #0
 80022fc:	d11f      	bne.n	800233e <_vfiprintf_r+0x112>
 80022fe:	6822      	ldr	r2, [r4, #0]
 8002300:	06d3      	lsls	r3, r2, #27
 8002302:	d504      	bpl.n	800230e <_vfiprintf_r+0xe2>
 8002304:	2353      	movs	r3, #83	@ 0x53
 8002306:	a904      	add	r1, sp, #16
 8002308:	185b      	adds	r3, r3, r1
 800230a:	2120      	movs	r1, #32
 800230c:	7019      	strb	r1, [r3, #0]
 800230e:	0713      	lsls	r3, r2, #28
 8002310:	d504      	bpl.n	800231c <_vfiprintf_r+0xf0>
 8002312:	2353      	movs	r3, #83	@ 0x53
 8002314:	a904      	add	r1, sp, #16
 8002316:	185b      	adds	r3, r3, r1
 8002318:	212b      	movs	r1, #43	@ 0x2b
 800231a:	7019      	strb	r1, [r3, #0]
 800231c:	782b      	ldrb	r3, [r5, #0]
 800231e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002320:	d016      	beq.n	8002350 <_vfiprintf_r+0x124>
 8002322:	002e      	movs	r6, r5
 8002324:	2100      	movs	r1, #0
 8002326:	200a      	movs	r0, #10
 8002328:	68e3      	ldr	r3, [r4, #12]
 800232a:	7832      	ldrb	r2, [r6, #0]
 800232c:	1c75      	adds	r5, r6, #1
 800232e:	3a30      	subs	r2, #48	@ 0x30
 8002330:	2a09      	cmp	r2, #9
 8002332:	d950      	bls.n	80023d6 <_vfiprintf_r+0x1aa>
 8002334:	2900      	cmp	r1, #0
 8002336:	d111      	bne.n	800235c <_vfiprintf_r+0x130>
 8002338:	e017      	b.n	800236a <_vfiprintf_r+0x13e>
 800233a:	3601      	adds	r6, #1
 800233c:	e7af      	b.n	800229e <_vfiprintf_r+0x72>
 800233e:	9b05      	ldr	r3, [sp, #20]
 8002340:	6822      	ldr	r2, [r4, #0]
 8002342:	1ac0      	subs	r0, r0, r3
 8002344:	2301      	movs	r3, #1
 8002346:	4083      	lsls	r3, r0
 8002348:	4313      	orrs	r3, r2
 800234a:	0035      	movs	r5, r6
 800234c:	6023      	str	r3, [r4, #0]
 800234e:	e7cc      	b.n	80022ea <_vfiprintf_r+0xbe>
 8002350:	9b07      	ldr	r3, [sp, #28]
 8002352:	1d19      	adds	r1, r3, #4
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	9107      	str	r1, [sp, #28]
 8002358:	2b00      	cmp	r3, #0
 800235a:	db01      	blt.n	8002360 <_vfiprintf_r+0x134>
 800235c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800235e:	e004      	b.n	800236a <_vfiprintf_r+0x13e>
 8002360:	425b      	negs	r3, r3
 8002362:	60e3      	str	r3, [r4, #12]
 8002364:	2302      	movs	r3, #2
 8002366:	4313      	orrs	r3, r2
 8002368:	6023      	str	r3, [r4, #0]
 800236a:	7833      	ldrb	r3, [r6, #0]
 800236c:	2b2e      	cmp	r3, #46	@ 0x2e
 800236e:	d10c      	bne.n	800238a <_vfiprintf_r+0x15e>
 8002370:	7873      	ldrb	r3, [r6, #1]
 8002372:	2b2a      	cmp	r3, #42	@ 0x2a
 8002374:	d134      	bne.n	80023e0 <_vfiprintf_r+0x1b4>
 8002376:	9b07      	ldr	r3, [sp, #28]
 8002378:	3602      	adds	r6, #2
 800237a:	1d1a      	adds	r2, r3, #4
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	9207      	str	r2, [sp, #28]
 8002380:	2b00      	cmp	r3, #0
 8002382:	da01      	bge.n	8002388 <_vfiprintf_r+0x15c>
 8002384:	2301      	movs	r3, #1
 8002386:	425b      	negs	r3, r3
 8002388:	9309      	str	r3, [sp, #36]	@ 0x24
 800238a:	4d32      	ldr	r5, [pc, #200]	@ (8002454 <_vfiprintf_r+0x228>)
 800238c:	2203      	movs	r2, #3
 800238e:	0028      	movs	r0, r5
 8002390:	7831      	ldrb	r1, [r6, #0]
 8002392:	f000 fb49 	bl	8002a28 <memchr>
 8002396:	2800      	cmp	r0, #0
 8002398:	d006      	beq.n	80023a8 <_vfiprintf_r+0x17c>
 800239a:	2340      	movs	r3, #64	@ 0x40
 800239c:	1b40      	subs	r0, r0, r5
 800239e:	4083      	lsls	r3, r0
 80023a0:	6822      	ldr	r2, [r4, #0]
 80023a2:	3601      	adds	r6, #1
 80023a4:	4313      	orrs	r3, r2
 80023a6:	6023      	str	r3, [r4, #0]
 80023a8:	7831      	ldrb	r1, [r6, #0]
 80023aa:	2206      	movs	r2, #6
 80023ac:	482a      	ldr	r0, [pc, #168]	@ (8002458 <_vfiprintf_r+0x22c>)
 80023ae:	1c75      	adds	r5, r6, #1
 80023b0:	7621      	strb	r1, [r4, #24]
 80023b2:	f000 fb39 	bl	8002a28 <memchr>
 80023b6:	2800      	cmp	r0, #0
 80023b8:	d040      	beq.n	800243c <_vfiprintf_r+0x210>
 80023ba:	4b28      	ldr	r3, [pc, #160]	@ (800245c <_vfiprintf_r+0x230>)
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d122      	bne.n	8002406 <_vfiprintf_r+0x1da>
 80023c0:	2207      	movs	r2, #7
 80023c2:	9b07      	ldr	r3, [sp, #28]
 80023c4:	3307      	adds	r3, #7
 80023c6:	4393      	bics	r3, r2
 80023c8:	3308      	adds	r3, #8
 80023ca:	9307      	str	r3, [sp, #28]
 80023cc:	6963      	ldr	r3, [r4, #20]
 80023ce:	9a04      	ldr	r2, [sp, #16]
 80023d0:	189b      	adds	r3, r3, r2
 80023d2:	6163      	str	r3, [r4, #20]
 80023d4:	e762      	b.n	800229c <_vfiprintf_r+0x70>
 80023d6:	4343      	muls	r3, r0
 80023d8:	002e      	movs	r6, r5
 80023da:	2101      	movs	r1, #1
 80023dc:	189b      	adds	r3, r3, r2
 80023de:	e7a4      	b.n	800232a <_vfiprintf_r+0xfe>
 80023e0:	2300      	movs	r3, #0
 80023e2:	200a      	movs	r0, #10
 80023e4:	0019      	movs	r1, r3
 80023e6:	3601      	adds	r6, #1
 80023e8:	6063      	str	r3, [r4, #4]
 80023ea:	7832      	ldrb	r2, [r6, #0]
 80023ec:	1c75      	adds	r5, r6, #1
 80023ee:	3a30      	subs	r2, #48	@ 0x30
 80023f0:	2a09      	cmp	r2, #9
 80023f2:	d903      	bls.n	80023fc <_vfiprintf_r+0x1d0>
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0c8      	beq.n	800238a <_vfiprintf_r+0x15e>
 80023f8:	9109      	str	r1, [sp, #36]	@ 0x24
 80023fa:	e7c6      	b.n	800238a <_vfiprintf_r+0x15e>
 80023fc:	4341      	muls	r1, r0
 80023fe:	002e      	movs	r6, r5
 8002400:	2301      	movs	r3, #1
 8002402:	1889      	adds	r1, r1, r2
 8002404:	e7f1      	b.n	80023ea <_vfiprintf_r+0x1be>
 8002406:	aa07      	add	r2, sp, #28
 8002408:	9200      	str	r2, [sp, #0]
 800240a:	0021      	movs	r1, r4
 800240c:	003a      	movs	r2, r7
 800240e:	4b14      	ldr	r3, [pc, #80]	@ (8002460 <_vfiprintf_r+0x234>)
 8002410:	9803      	ldr	r0, [sp, #12]
 8002412:	e000      	b.n	8002416 <_vfiprintf_r+0x1ea>
 8002414:	bf00      	nop
 8002416:	9004      	str	r0, [sp, #16]
 8002418:	9b04      	ldr	r3, [sp, #16]
 800241a:	3301      	adds	r3, #1
 800241c:	d1d6      	bne.n	80023cc <_vfiprintf_r+0x1a0>
 800241e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002420:	07db      	lsls	r3, r3, #31
 8002422:	d405      	bmi.n	8002430 <_vfiprintf_r+0x204>
 8002424:	89bb      	ldrh	r3, [r7, #12]
 8002426:	059b      	lsls	r3, r3, #22
 8002428:	d402      	bmi.n	8002430 <_vfiprintf_r+0x204>
 800242a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800242c:	f7ff fdd8 	bl	8001fe0 <__retarget_lock_release_recursive>
 8002430:	89bb      	ldrh	r3, [r7, #12]
 8002432:	065b      	lsls	r3, r3, #25
 8002434:	d500      	bpl.n	8002438 <_vfiprintf_r+0x20c>
 8002436:	e71e      	b.n	8002276 <_vfiprintf_r+0x4a>
 8002438:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800243a:	e71e      	b.n	800227a <_vfiprintf_r+0x4e>
 800243c:	aa07      	add	r2, sp, #28
 800243e:	9200      	str	r2, [sp, #0]
 8002440:	0021      	movs	r1, r4
 8002442:	003a      	movs	r2, r7
 8002444:	4b06      	ldr	r3, [pc, #24]	@ (8002460 <_vfiprintf_r+0x234>)
 8002446:	9803      	ldr	r0, [sp, #12]
 8002448:	f000 f87c 	bl	8002544 <_printf_i>
 800244c:	e7e3      	b.n	8002416 <_vfiprintf_r+0x1ea>
 800244e:	46c0      	nop			@ (mov r8, r8)
 8002450:	08002c04 	.word	0x08002c04
 8002454:	08002c0a 	.word	0x08002c0a
 8002458:	08002c0e 	.word	0x08002c0e
 800245c:	00000000 	.word	0x00000000
 8002460:	08002207 	.word	0x08002207

08002464 <_printf_common>:
 8002464:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002466:	0016      	movs	r6, r2
 8002468:	9301      	str	r3, [sp, #4]
 800246a:	688a      	ldr	r2, [r1, #8]
 800246c:	690b      	ldr	r3, [r1, #16]
 800246e:	000c      	movs	r4, r1
 8002470:	9000      	str	r0, [sp, #0]
 8002472:	4293      	cmp	r3, r2
 8002474:	da00      	bge.n	8002478 <_printf_common+0x14>
 8002476:	0013      	movs	r3, r2
 8002478:	0022      	movs	r2, r4
 800247a:	6033      	str	r3, [r6, #0]
 800247c:	3243      	adds	r2, #67	@ 0x43
 800247e:	7812      	ldrb	r2, [r2, #0]
 8002480:	2a00      	cmp	r2, #0
 8002482:	d001      	beq.n	8002488 <_printf_common+0x24>
 8002484:	3301      	adds	r3, #1
 8002486:	6033      	str	r3, [r6, #0]
 8002488:	6823      	ldr	r3, [r4, #0]
 800248a:	069b      	lsls	r3, r3, #26
 800248c:	d502      	bpl.n	8002494 <_printf_common+0x30>
 800248e:	6833      	ldr	r3, [r6, #0]
 8002490:	3302      	adds	r3, #2
 8002492:	6033      	str	r3, [r6, #0]
 8002494:	6822      	ldr	r2, [r4, #0]
 8002496:	2306      	movs	r3, #6
 8002498:	0015      	movs	r5, r2
 800249a:	401d      	ands	r5, r3
 800249c:	421a      	tst	r2, r3
 800249e:	d027      	beq.n	80024f0 <_printf_common+0x8c>
 80024a0:	0023      	movs	r3, r4
 80024a2:	3343      	adds	r3, #67	@ 0x43
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	1e5a      	subs	r2, r3, #1
 80024a8:	4193      	sbcs	r3, r2
 80024aa:	6822      	ldr	r2, [r4, #0]
 80024ac:	0692      	lsls	r2, r2, #26
 80024ae:	d430      	bmi.n	8002512 <_printf_common+0xae>
 80024b0:	0022      	movs	r2, r4
 80024b2:	9901      	ldr	r1, [sp, #4]
 80024b4:	9800      	ldr	r0, [sp, #0]
 80024b6:	9d08      	ldr	r5, [sp, #32]
 80024b8:	3243      	adds	r2, #67	@ 0x43
 80024ba:	47a8      	blx	r5
 80024bc:	3001      	adds	r0, #1
 80024be:	d025      	beq.n	800250c <_printf_common+0xa8>
 80024c0:	2206      	movs	r2, #6
 80024c2:	6823      	ldr	r3, [r4, #0]
 80024c4:	2500      	movs	r5, #0
 80024c6:	4013      	ands	r3, r2
 80024c8:	2b04      	cmp	r3, #4
 80024ca:	d105      	bne.n	80024d8 <_printf_common+0x74>
 80024cc:	6833      	ldr	r3, [r6, #0]
 80024ce:	68e5      	ldr	r5, [r4, #12]
 80024d0:	1aed      	subs	r5, r5, r3
 80024d2:	43eb      	mvns	r3, r5
 80024d4:	17db      	asrs	r3, r3, #31
 80024d6:	401d      	ands	r5, r3
 80024d8:	68a3      	ldr	r3, [r4, #8]
 80024da:	6922      	ldr	r2, [r4, #16]
 80024dc:	4293      	cmp	r3, r2
 80024de:	dd01      	ble.n	80024e4 <_printf_common+0x80>
 80024e0:	1a9b      	subs	r3, r3, r2
 80024e2:	18ed      	adds	r5, r5, r3
 80024e4:	2600      	movs	r6, #0
 80024e6:	42b5      	cmp	r5, r6
 80024e8:	d120      	bne.n	800252c <_printf_common+0xc8>
 80024ea:	2000      	movs	r0, #0
 80024ec:	e010      	b.n	8002510 <_printf_common+0xac>
 80024ee:	3501      	adds	r5, #1
 80024f0:	68e3      	ldr	r3, [r4, #12]
 80024f2:	6832      	ldr	r2, [r6, #0]
 80024f4:	1a9b      	subs	r3, r3, r2
 80024f6:	42ab      	cmp	r3, r5
 80024f8:	ddd2      	ble.n	80024a0 <_printf_common+0x3c>
 80024fa:	0022      	movs	r2, r4
 80024fc:	2301      	movs	r3, #1
 80024fe:	9901      	ldr	r1, [sp, #4]
 8002500:	9800      	ldr	r0, [sp, #0]
 8002502:	9f08      	ldr	r7, [sp, #32]
 8002504:	3219      	adds	r2, #25
 8002506:	47b8      	blx	r7
 8002508:	3001      	adds	r0, #1
 800250a:	d1f0      	bne.n	80024ee <_printf_common+0x8a>
 800250c:	2001      	movs	r0, #1
 800250e:	4240      	negs	r0, r0
 8002510:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002512:	2030      	movs	r0, #48	@ 0x30
 8002514:	18e1      	adds	r1, r4, r3
 8002516:	3143      	adds	r1, #67	@ 0x43
 8002518:	7008      	strb	r0, [r1, #0]
 800251a:	0021      	movs	r1, r4
 800251c:	1c5a      	adds	r2, r3, #1
 800251e:	3145      	adds	r1, #69	@ 0x45
 8002520:	7809      	ldrb	r1, [r1, #0]
 8002522:	18a2      	adds	r2, r4, r2
 8002524:	3243      	adds	r2, #67	@ 0x43
 8002526:	3302      	adds	r3, #2
 8002528:	7011      	strb	r1, [r2, #0]
 800252a:	e7c1      	b.n	80024b0 <_printf_common+0x4c>
 800252c:	0022      	movs	r2, r4
 800252e:	2301      	movs	r3, #1
 8002530:	9901      	ldr	r1, [sp, #4]
 8002532:	9800      	ldr	r0, [sp, #0]
 8002534:	9f08      	ldr	r7, [sp, #32]
 8002536:	321a      	adds	r2, #26
 8002538:	47b8      	blx	r7
 800253a:	3001      	adds	r0, #1
 800253c:	d0e6      	beq.n	800250c <_printf_common+0xa8>
 800253e:	3601      	adds	r6, #1
 8002540:	e7d1      	b.n	80024e6 <_printf_common+0x82>
	...

08002544 <_printf_i>:
 8002544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002546:	b08b      	sub	sp, #44	@ 0x2c
 8002548:	9206      	str	r2, [sp, #24]
 800254a:	000a      	movs	r2, r1
 800254c:	3243      	adds	r2, #67	@ 0x43
 800254e:	9307      	str	r3, [sp, #28]
 8002550:	9005      	str	r0, [sp, #20]
 8002552:	9203      	str	r2, [sp, #12]
 8002554:	7e0a      	ldrb	r2, [r1, #24]
 8002556:	000c      	movs	r4, r1
 8002558:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800255a:	2a78      	cmp	r2, #120	@ 0x78
 800255c:	d809      	bhi.n	8002572 <_printf_i+0x2e>
 800255e:	2a62      	cmp	r2, #98	@ 0x62
 8002560:	d80b      	bhi.n	800257a <_printf_i+0x36>
 8002562:	2a00      	cmp	r2, #0
 8002564:	d100      	bne.n	8002568 <_printf_i+0x24>
 8002566:	e0bc      	b.n	80026e2 <_printf_i+0x19e>
 8002568:	497b      	ldr	r1, [pc, #492]	@ (8002758 <_printf_i+0x214>)
 800256a:	9104      	str	r1, [sp, #16]
 800256c:	2a58      	cmp	r2, #88	@ 0x58
 800256e:	d100      	bne.n	8002572 <_printf_i+0x2e>
 8002570:	e090      	b.n	8002694 <_printf_i+0x150>
 8002572:	0025      	movs	r5, r4
 8002574:	3542      	adds	r5, #66	@ 0x42
 8002576:	702a      	strb	r2, [r5, #0]
 8002578:	e022      	b.n	80025c0 <_printf_i+0x7c>
 800257a:	0010      	movs	r0, r2
 800257c:	3863      	subs	r0, #99	@ 0x63
 800257e:	2815      	cmp	r0, #21
 8002580:	d8f7      	bhi.n	8002572 <_printf_i+0x2e>
 8002582:	f7fd fdc1 	bl	8000108 <__gnu_thumb1_case_shi>
 8002586:	0016      	.short	0x0016
 8002588:	fff6001f 	.word	0xfff6001f
 800258c:	fff6fff6 	.word	0xfff6fff6
 8002590:	001ffff6 	.word	0x001ffff6
 8002594:	fff6fff6 	.word	0xfff6fff6
 8002598:	fff6fff6 	.word	0xfff6fff6
 800259c:	003600a1 	.word	0x003600a1
 80025a0:	fff60080 	.word	0xfff60080
 80025a4:	00b2fff6 	.word	0x00b2fff6
 80025a8:	0036fff6 	.word	0x0036fff6
 80025ac:	fff6fff6 	.word	0xfff6fff6
 80025b0:	0084      	.short	0x0084
 80025b2:	0025      	movs	r5, r4
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	3542      	adds	r5, #66	@ 0x42
 80025b8:	1d11      	adds	r1, r2, #4
 80025ba:	6019      	str	r1, [r3, #0]
 80025bc:	6813      	ldr	r3, [r2, #0]
 80025be:	702b      	strb	r3, [r5, #0]
 80025c0:	2301      	movs	r3, #1
 80025c2:	e0a0      	b.n	8002706 <_printf_i+0x1c2>
 80025c4:	6818      	ldr	r0, [r3, #0]
 80025c6:	6809      	ldr	r1, [r1, #0]
 80025c8:	1d02      	adds	r2, r0, #4
 80025ca:	060d      	lsls	r5, r1, #24
 80025cc:	d50b      	bpl.n	80025e6 <_printf_i+0xa2>
 80025ce:	6806      	ldr	r6, [r0, #0]
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	2e00      	cmp	r6, #0
 80025d4:	da03      	bge.n	80025de <_printf_i+0x9a>
 80025d6:	232d      	movs	r3, #45	@ 0x2d
 80025d8:	9a03      	ldr	r2, [sp, #12]
 80025da:	4276      	negs	r6, r6
 80025dc:	7013      	strb	r3, [r2, #0]
 80025de:	4b5e      	ldr	r3, [pc, #376]	@ (8002758 <_printf_i+0x214>)
 80025e0:	270a      	movs	r7, #10
 80025e2:	9304      	str	r3, [sp, #16]
 80025e4:	e018      	b.n	8002618 <_printf_i+0xd4>
 80025e6:	6806      	ldr	r6, [r0, #0]
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	0649      	lsls	r1, r1, #25
 80025ec:	d5f1      	bpl.n	80025d2 <_printf_i+0x8e>
 80025ee:	b236      	sxth	r6, r6
 80025f0:	e7ef      	b.n	80025d2 <_printf_i+0x8e>
 80025f2:	6808      	ldr	r0, [r1, #0]
 80025f4:	6819      	ldr	r1, [r3, #0]
 80025f6:	c940      	ldmia	r1!, {r6}
 80025f8:	0605      	lsls	r5, r0, #24
 80025fa:	d402      	bmi.n	8002602 <_printf_i+0xbe>
 80025fc:	0640      	lsls	r0, r0, #25
 80025fe:	d500      	bpl.n	8002602 <_printf_i+0xbe>
 8002600:	b2b6      	uxth	r6, r6
 8002602:	6019      	str	r1, [r3, #0]
 8002604:	4b54      	ldr	r3, [pc, #336]	@ (8002758 <_printf_i+0x214>)
 8002606:	270a      	movs	r7, #10
 8002608:	9304      	str	r3, [sp, #16]
 800260a:	2a6f      	cmp	r2, #111	@ 0x6f
 800260c:	d100      	bne.n	8002610 <_printf_i+0xcc>
 800260e:	3f02      	subs	r7, #2
 8002610:	0023      	movs	r3, r4
 8002612:	2200      	movs	r2, #0
 8002614:	3343      	adds	r3, #67	@ 0x43
 8002616:	701a      	strb	r2, [r3, #0]
 8002618:	6863      	ldr	r3, [r4, #4]
 800261a:	60a3      	str	r3, [r4, #8]
 800261c:	2b00      	cmp	r3, #0
 800261e:	db03      	blt.n	8002628 <_printf_i+0xe4>
 8002620:	2104      	movs	r1, #4
 8002622:	6822      	ldr	r2, [r4, #0]
 8002624:	438a      	bics	r2, r1
 8002626:	6022      	str	r2, [r4, #0]
 8002628:	2e00      	cmp	r6, #0
 800262a:	d102      	bne.n	8002632 <_printf_i+0xee>
 800262c:	9d03      	ldr	r5, [sp, #12]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00c      	beq.n	800264c <_printf_i+0x108>
 8002632:	9d03      	ldr	r5, [sp, #12]
 8002634:	0030      	movs	r0, r6
 8002636:	0039      	movs	r1, r7
 8002638:	f7fd fdf6 	bl	8000228 <__aeabi_uidivmod>
 800263c:	9b04      	ldr	r3, [sp, #16]
 800263e:	3d01      	subs	r5, #1
 8002640:	5c5b      	ldrb	r3, [r3, r1]
 8002642:	702b      	strb	r3, [r5, #0]
 8002644:	0033      	movs	r3, r6
 8002646:	0006      	movs	r6, r0
 8002648:	429f      	cmp	r7, r3
 800264a:	d9f3      	bls.n	8002634 <_printf_i+0xf0>
 800264c:	2f08      	cmp	r7, #8
 800264e:	d109      	bne.n	8002664 <_printf_i+0x120>
 8002650:	6823      	ldr	r3, [r4, #0]
 8002652:	07db      	lsls	r3, r3, #31
 8002654:	d506      	bpl.n	8002664 <_printf_i+0x120>
 8002656:	6862      	ldr	r2, [r4, #4]
 8002658:	6923      	ldr	r3, [r4, #16]
 800265a:	429a      	cmp	r2, r3
 800265c:	dc02      	bgt.n	8002664 <_printf_i+0x120>
 800265e:	2330      	movs	r3, #48	@ 0x30
 8002660:	3d01      	subs	r5, #1
 8002662:	702b      	strb	r3, [r5, #0]
 8002664:	9b03      	ldr	r3, [sp, #12]
 8002666:	1b5b      	subs	r3, r3, r5
 8002668:	6123      	str	r3, [r4, #16]
 800266a:	9b07      	ldr	r3, [sp, #28]
 800266c:	0021      	movs	r1, r4
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	9805      	ldr	r0, [sp, #20]
 8002672:	9b06      	ldr	r3, [sp, #24]
 8002674:	aa09      	add	r2, sp, #36	@ 0x24
 8002676:	f7ff fef5 	bl	8002464 <_printf_common>
 800267a:	3001      	adds	r0, #1
 800267c:	d148      	bne.n	8002710 <_printf_i+0x1cc>
 800267e:	2001      	movs	r0, #1
 8002680:	4240      	negs	r0, r0
 8002682:	b00b      	add	sp, #44	@ 0x2c
 8002684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002686:	2220      	movs	r2, #32
 8002688:	6809      	ldr	r1, [r1, #0]
 800268a:	430a      	orrs	r2, r1
 800268c:	6022      	str	r2, [r4, #0]
 800268e:	2278      	movs	r2, #120	@ 0x78
 8002690:	4932      	ldr	r1, [pc, #200]	@ (800275c <_printf_i+0x218>)
 8002692:	9104      	str	r1, [sp, #16]
 8002694:	0021      	movs	r1, r4
 8002696:	3145      	adds	r1, #69	@ 0x45
 8002698:	700a      	strb	r2, [r1, #0]
 800269a:	6819      	ldr	r1, [r3, #0]
 800269c:	6822      	ldr	r2, [r4, #0]
 800269e:	c940      	ldmia	r1!, {r6}
 80026a0:	0610      	lsls	r0, r2, #24
 80026a2:	d402      	bmi.n	80026aa <_printf_i+0x166>
 80026a4:	0650      	lsls	r0, r2, #25
 80026a6:	d500      	bpl.n	80026aa <_printf_i+0x166>
 80026a8:	b2b6      	uxth	r6, r6
 80026aa:	6019      	str	r1, [r3, #0]
 80026ac:	07d3      	lsls	r3, r2, #31
 80026ae:	d502      	bpl.n	80026b6 <_printf_i+0x172>
 80026b0:	2320      	movs	r3, #32
 80026b2:	4313      	orrs	r3, r2
 80026b4:	6023      	str	r3, [r4, #0]
 80026b6:	2e00      	cmp	r6, #0
 80026b8:	d001      	beq.n	80026be <_printf_i+0x17a>
 80026ba:	2710      	movs	r7, #16
 80026bc:	e7a8      	b.n	8002610 <_printf_i+0xcc>
 80026be:	2220      	movs	r2, #32
 80026c0:	6823      	ldr	r3, [r4, #0]
 80026c2:	4393      	bics	r3, r2
 80026c4:	6023      	str	r3, [r4, #0]
 80026c6:	e7f8      	b.n	80026ba <_printf_i+0x176>
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	680d      	ldr	r5, [r1, #0]
 80026cc:	1d10      	adds	r0, r2, #4
 80026ce:	6949      	ldr	r1, [r1, #20]
 80026d0:	6018      	str	r0, [r3, #0]
 80026d2:	6813      	ldr	r3, [r2, #0]
 80026d4:	062e      	lsls	r6, r5, #24
 80026d6:	d501      	bpl.n	80026dc <_printf_i+0x198>
 80026d8:	6019      	str	r1, [r3, #0]
 80026da:	e002      	b.n	80026e2 <_printf_i+0x19e>
 80026dc:	066d      	lsls	r5, r5, #25
 80026de:	d5fb      	bpl.n	80026d8 <_printf_i+0x194>
 80026e0:	8019      	strh	r1, [r3, #0]
 80026e2:	2300      	movs	r3, #0
 80026e4:	9d03      	ldr	r5, [sp, #12]
 80026e6:	6123      	str	r3, [r4, #16]
 80026e8:	e7bf      	b.n	800266a <_printf_i+0x126>
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	1d11      	adds	r1, r2, #4
 80026ee:	6019      	str	r1, [r3, #0]
 80026f0:	6815      	ldr	r5, [r2, #0]
 80026f2:	2100      	movs	r1, #0
 80026f4:	0028      	movs	r0, r5
 80026f6:	6862      	ldr	r2, [r4, #4]
 80026f8:	f000 f996 	bl	8002a28 <memchr>
 80026fc:	2800      	cmp	r0, #0
 80026fe:	d001      	beq.n	8002704 <_printf_i+0x1c0>
 8002700:	1b40      	subs	r0, r0, r5
 8002702:	6060      	str	r0, [r4, #4]
 8002704:	6863      	ldr	r3, [r4, #4]
 8002706:	6123      	str	r3, [r4, #16]
 8002708:	2300      	movs	r3, #0
 800270a:	9a03      	ldr	r2, [sp, #12]
 800270c:	7013      	strb	r3, [r2, #0]
 800270e:	e7ac      	b.n	800266a <_printf_i+0x126>
 8002710:	002a      	movs	r2, r5
 8002712:	6923      	ldr	r3, [r4, #16]
 8002714:	9906      	ldr	r1, [sp, #24]
 8002716:	9805      	ldr	r0, [sp, #20]
 8002718:	9d07      	ldr	r5, [sp, #28]
 800271a:	47a8      	blx	r5
 800271c:	3001      	adds	r0, #1
 800271e:	d0ae      	beq.n	800267e <_printf_i+0x13a>
 8002720:	6823      	ldr	r3, [r4, #0]
 8002722:	079b      	lsls	r3, r3, #30
 8002724:	d415      	bmi.n	8002752 <_printf_i+0x20e>
 8002726:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002728:	68e0      	ldr	r0, [r4, #12]
 800272a:	4298      	cmp	r0, r3
 800272c:	daa9      	bge.n	8002682 <_printf_i+0x13e>
 800272e:	0018      	movs	r0, r3
 8002730:	e7a7      	b.n	8002682 <_printf_i+0x13e>
 8002732:	0022      	movs	r2, r4
 8002734:	2301      	movs	r3, #1
 8002736:	9906      	ldr	r1, [sp, #24]
 8002738:	9805      	ldr	r0, [sp, #20]
 800273a:	9e07      	ldr	r6, [sp, #28]
 800273c:	3219      	adds	r2, #25
 800273e:	47b0      	blx	r6
 8002740:	3001      	adds	r0, #1
 8002742:	d09c      	beq.n	800267e <_printf_i+0x13a>
 8002744:	3501      	adds	r5, #1
 8002746:	68e3      	ldr	r3, [r4, #12]
 8002748:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800274a:	1a9b      	subs	r3, r3, r2
 800274c:	42ab      	cmp	r3, r5
 800274e:	dcf0      	bgt.n	8002732 <_printf_i+0x1ee>
 8002750:	e7e9      	b.n	8002726 <_printf_i+0x1e2>
 8002752:	2500      	movs	r5, #0
 8002754:	e7f7      	b.n	8002746 <_printf_i+0x202>
 8002756:	46c0      	nop			@ (mov r8, r8)
 8002758:	08002c15 	.word	0x08002c15
 800275c:	08002c26 	.word	0x08002c26

08002760 <__sflush_r>:
 8002760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002762:	220c      	movs	r2, #12
 8002764:	5e8b      	ldrsh	r3, [r1, r2]
 8002766:	0005      	movs	r5, r0
 8002768:	000c      	movs	r4, r1
 800276a:	071a      	lsls	r2, r3, #28
 800276c:	d456      	bmi.n	800281c <__sflush_r+0xbc>
 800276e:	684a      	ldr	r2, [r1, #4]
 8002770:	2a00      	cmp	r2, #0
 8002772:	dc02      	bgt.n	800277a <__sflush_r+0x1a>
 8002774:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8002776:	2a00      	cmp	r2, #0
 8002778:	dd4e      	ble.n	8002818 <__sflush_r+0xb8>
 800277a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800277c:	2f00      	cmp	r7, #0
 800277e:	d04b      	beq.n	8002818 <__sflush_r+0xb8>
 8002780:	2200      	movs	r2, #0
 8002782:	2080      	movs	r0, #128	@ 0x80
 8002784:	682e      	ldr	r6, [r5, #0]
 8002786:	602a      	str	r2, [r5, #0]
 8002788:	001a      	movs	r2, r3
 800278a:	0140      	lsls	r0, r0, #5
 800278c:	6a21      	ldr	r1, [r4, #32]
 800278e:	4002      	ands	r2, r0
 8002790:	4203      	tst	r3, r0
 8002792:	d033      	beq.n	80027fc <__sflush_r+0x9c>
 8002794:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002796:	89a3      	ldrh	r3, [r4, #12]
 8002798:	075b      	lsls	r3, r3, #29
 800279a:	d506      	bpl.n	80027aa <__sflush_r+0x4a>
 800279c:	6863      	ldr	r3, [r4, #4]
 800279e:	1ad2      	subs	r2, r2, r3
 80027a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <__sflush_r+0x4a>
 80027a6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80027a8:	1ad2      	subs	r2, r2, r3
 80027aa:	2300      	movs	r3, #0
 80027ac:	0028      	movs	r0, r5
 80027ae:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80027b0:	6a21      	ldr	r1, [r4, #32]
 80027b2:	47b8      	blx	r7
 80027b4:	89a2      	ldrh	r2, [r4, #12]
 80027b6:	1c43      	adds	r3, r0, #1
 80027b8:	d106      	bne.n	80027c8 <__sflush_r+0x68>
 80027ba:	6829      	ldr	r1, [r5, #0]
 80027bc:	291d      	cmp	r1, #29
 80027be:	d846      	bhi.n	800284e <__sflush_r+0xee>
 80027c0:	4b29      	ldr	r3, [pc, #164]	@ (8002868 <__sflush_r+0x108>)
 80027c2:	410b      	asrs	r3, r1
 80027c4:	07db      	lsls	r3, r3, #31
 80027c6:	d442      	bmi.n	800284e <__sflush_r+0xee>
 80027c8:	2300      	movs	r3, #0
 80027ca:	6063      	str	r3, [r4, #4]
 80027cc:	6923      	ldr	r3, [r4, #16]
 80027ce:	6023      	str	r3, [r4, #0]
 80027d0:	04d2      	lsls	r2, r2, #19
 80027d2:	d505      	bpl.n	80027e0 <__sflush_r+0x80>
 80027d4:	1c43      	adds	r3, r0, #1
 80027d6:	d102      	bne.n	80027de <__sflush_r+0x7e>
 80027d8:	682b      	ldr	r3, [r5, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d100      	bne.n	80027e0 <__sflush_r+0x80>
 80027de:	6560      	str	r0, [r4, #84]	@ 0x54
 80027e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80027e2:	602e      	str	r6, [r5, #0]
 80027e4:	2900      	cmp	r1, #0
 80027e6:	d017      	beq.n	8002818 <__sflush_r+0xb8>
 80027e8:	0023      	movs	r3, r4
 80027ea:	3344      	adds	r3, #68	@ 0x44
 80027ec:	4299      	cmp	r1, r3
 80027ee:	d002      	beq.n	80027f6 <__sflush_r+0x96>
 80027f0:	0028      	movs	r0, r5
 80027f2:	f7ff fbf7 	bl	8001fe4 <_free_r>
 80027f6:	2300      	movs	r3, #0
 80027f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80027fa:	e00d      	b.n	8002818 <__sflush_r+0xb8>
 80027fc:	2301      	movs	r3, #1
 80027fe:	0028      	movs	r0, r5
 8002800:	47b8      	blx	r7
 8002802:	0002      	movs	r2, r0
 8002804:	1c43      	adds	r3, r0, #1
 8002806:	d1c6      	bne.n	8002796 <__sflush_r+0x36>
 8002808:	682b      	ldr	r3, [r5, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0c3      	beq.n	8002796 <__sflush_r+0x36>
 800280e:	2b1d      	cmp	r3, #29
 8002810:	d001      	beq.n	8002816 <__sflush_r+0xb6>
 8002812:	2b16      	cmp	r3, #22
 8002814:	d11a      	bne.n	800284c <__sflush_r+0xec>
 8002816:	602e      	str	r6, [r5, #0]
 8002818:	2000      	movs	r0, #0
 800281a:	e01e      	b.n	800285a <__sflush_r+0xfa>
 800281c:	690e      	ldr	r6, [r1, #16]
 800281e:	2e00      	cmp	r6, #0
 8002820:	d0fa      	beq.n	8002818 <__sflush_r+0xb8>
 8002822:	680f      	ldr	r7, [r1, #0]
 8002824:	600e      	str	r6, [r1, #0]
 8002826:	1bba      	subs	r2, r7, r6
 8002828:	9201      	str	r2, [sp, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	079b      	lsls	r3, r3, #30
 800282e:	d100      	bne.n	8002832 <__sflush_r+0xd2>
 8002830:	694a      	ldr	r2, [r1, #20]
 8002832:	60a2      	str	r2, [r4, #8]
 8002834:	9b01      	ldr	r3, [sp, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	ddee      	ble.n	8002818 <__sflush_r+0xb8>
 800283a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800283c:	0032      	movs	r2, r6
 800283e:	001f      	movs	r7, r3
 8002840:	0028      	movs	r0, r5
 8002842:	9b01      	ldr	r3, [sp, #4]
 8002844:	6a21      	ldr	r1, [r4, #32]
 8002846:	47b8      	blx	r7
 8002848:	2800      	cmp	r0, #0
 800284a:	dc07      	bgt.n	800285c <__sflush_r+0xfc>
 800284c:	89a2      	ldrh	r2, [r4, #12]
 800284e:	2340      	movs	r3, #64	@ 0x40
 8002850:	2001      	movs	r0, #1
 8002852:	4313      	orrs	r3, r2
 8002854:	b21b      	sxth	r3, r3
 8002856:	81a3      	strh	r3, [r4, #12]
 8002858:	4240      	negs	r0, r0
 800285a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800285c:	9b01      	ldr	r3, [sp, #4]
 800285e:	1836      	adds	r6, r6, r0
 8002860:	1a1b      	subs	r3, r3, r0
 8002862:	9301      	str	r3, [sp, #4]
 8002864:	e7e6      	b.n	8002834 <__sflush_r+0xd4>
 8002866:	46c0      	nop			@ (mov r8, r8)
 8002868:	dfbffffe 	.word	0xdfbffffe

0800286c <_fflush_r>:
 800286c:	690b      	ldr	r3, [r1, #16]
 800286e:	b570      	push	{r4, r5, r6, lr}
 8002870:	0005      	movs	r5, r0
 8002872:	000c      	movs	r4, r1
 8002874:	2b00      	cmp	r3, #0
 8002876:	d102      	bne.n	800287e <_fflush_r+0x12>
 8002878:	2500      	movs	r5, #0
 800287a:	0028      	movs	r0, r5
 800287c:	bd70      	pop	{r4, r5, r6, pc}
 800287e:	2800      	cmp	r0, #0
 8002880:	d004      	beq.n	800288c <_fflush_r+0x20>
 8002882:	6a03      	ldr	r3, [r0, #32]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <_fflush_r+0x20>
 8002888:	f7ff fa98 	bl	8001dbc <__sinit>
 800288c:	220c      	movs	r2, #12
 800288e:	5ea3      	ldrsh	r3, [r4, r2]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0f1      	beq.n	8002878 <_fflush_r+0xc>
 8002894:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002896:	07d2      	lsls	r2, r2, #31
 8002898:	d404      	bmi.n	80028a4 <_fflush_r+0x38>
 800289a:	059b      	lsls	r3, r3, #22
 800289c:	d402      	bmi.n	80028a4 <_fflush_r+0x38>
 800289e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80028a0:	f7ff fb9d 	bl	8001fde <__retarget_lock_acquire_recursive>
 80028a4:	0028      	movs	r0, r5
 80028a6:	0021      	movs	r1, r4
 80028a8:	f7ff ff5a 	bl	8002760 <__sflush_r>
 80028ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80028ae:	0005      	movs	r5, r0
 80028b0:	07db      	lsls	r3, r3, #31
 80028b2:	d4e2      	bmi.n	800287a <_fflush_r+0xe>
 80028b4:	89a3      	ldrh	r3, [r4, #12]
 80028b6:	059b      	lsls	r3, r3, #22
 80028b8:	d4df      	bmi.n	800287a <_fflush_r+0xe>
 80028ba:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80028bc:	f7ff fb90 	bl	8001fe0 <__retarget_lock_release_recursive>
 80028c0:	e7db      	b.n	800287a <_fflush_r+0xe>

080028c2 <__swbuf_r>:
 80028c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028c4:	0006      	movs	r6, r0
 80028c6:	000d      	movs	r5, r1
 80028c8:	0014      	movs	r4, r2
 80028ca:	2800      	cmp	r0, #0
 80028cc:	d004      	beq.n	80028d8 <__swbuf_r+0x16>
 80028ce:	6a03      	ldr	r3, [r0, #32]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <__swbuf_r+0x16>
 80028d4:	f7ff fa72 	bl	8001dbc <__sinit>
 80028d8:	69a3      	ldr	r3, [r4, #24]
 80028da:	60a3      	str	r3, [r4, #8]
 80028dc:	89a3      	ldrh	r3, [r4, #12]
 80028de:	071b      	lsls	r3, r3, #28
 80028e0:	d502      	bpl.n	80028e8 <__swbuf_r+0x26>
 80028e2:	6923      	ldr	r3, [r4, #16]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d109      	bne.n	80028fc <__swbuf_r+0x3a>
 80028e8:	0021      	movs	r1, r4
 80028ea:	0030      	movs	r0, r6
 80028ec:	f000 f82c 	bl	8002948 <__swsetup_r>
 80028f0:	2800      	cmp	r0, #0
 80028f2:	d003      	beq.n	80028fc <__swbuf_r+0x3a>
 80028f4:	2501      	movs	r5, #1
 80028f6:	426d      	negs	r5, r5
 80028f8:	0028      	movs	r0, r5
 80028fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028fc:	6923      	ldr	r3, [r4, #16]
 80028fe:	6820      	ldr	r0, [r4, #0]
 8002900:	b2ef      	uxtb	r7, r5
 8002902:	1ac0      	subs	r0, r0, r3
 8002904:	6963      	ldr	r3, [r4, #20]
 8002906:	b2ed      	uxtb	r5, r5
 8002908:	4283      	cmp	r3, r0
 800290a:	dc05      	bgt.n	8002918 <__swbuf_r+0x56>
 800290c:	0021      	movs	r1, r4
 800290e:	0030      	movs	r0, r6
 8002910:	f7ff ffac 	bl	800286c <_fflush_r>
 8002914:	2800      	cmp	r0, #0
 8002916:	d1ed      	bne.n	80028f4 <__swbuf_r+0x32>
 8002918:	68a3      	ldr	r3, [r4, #8]
 800291a:	3001      	adds	r0, #1
 800291c:	3b01      	subs	r3, #1
 800291e:	60a3      	str	r3, [r4, #8]
 8002920:	6823      	ldr	r3, [r4, #0]
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	6022      	str	r2, [r4, #0]
 8002926:	701f      	strb	r7, [r3, #0]
 8002928:	6963      	ldr	r3, [r4, #20]
 800292a:	4283      	cmp	r3, r0
 800292c:	d004      	beq.n	8002938 <__swbuf_r+0x76>
 800292e:	89a3      	ldrh	r3, [r4, #12]
 8002930:	07db      	lsls	r3, r3, #31
 8002932:	d5e1      	bpl.n	80028f8 <__swbuf_r+0x36>
 8002934:	2d0a      	cmp	r5, #10
 8002936:	d1df      	bne.n	80028f8 <__swbuf_r+0x36>
 8002938:	0021      	movs	r1, r4
 800293a:	0030      	movs	r0, r6
 800293c:	f7ff ff96 	bl	800286c <_fflush_r>
 8002940:	2800      	cmp	r0, #0
 8002942:	d0d9      	beq.n	80028f8 <__swbuf_r+0x36>
 8002944:	e7d6      	b.n	80028f4 <__swbuf_r+0x32>
	...

08002948 <__swsetup_r>:
 8002948:	4b2d      	ldr	r3, [pc, #180]	@ (8002a00 <__swsetup_r+0xb8>)
 800294a:	b570      	push	{r4, r5, r6, lr}
 800294c:	0005      	movs	r5, r0
 800294e:	6818      	ldr	r0, [r3, #0]
 8002950:	000c      	movs	r4, r1
 8002952:	2800      	cmp	r0, #0
 8002954:	d004      	beq.n	8002960 <__swsetup_r+0x18>
 8002956:	6a03      	ldr	r3, [r0, #32]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <__swsetup_r+0x18>
 800295c:	f7ff fa2e 	bl	8001dbc <__sinit>
 8002960:	230c      	movs	r3, #12
 8002962:	5ee2      	ldrsh	r2, [r4, r3]
 8002964:	0713      	lsls	r3, r2, #28
 8002966:	d423      	bmi.n	80029b0 <__swsetup_r+0x68>
 8002968:	06d3      	lsls	r3, r2, #27
 800296a:	d407      	bmi.n	800297c <__swsetup_r+0x34>
 800296c:	2309      	movs	r3, #9
 800296e:	602b      	str	r3, [r5, #0]
 8002970:	2340      	movs	r3, #64	@ 0x40
 8002972:	2001      	movs	r0, #1
 8002974:	4313      	orrs	r3, r2
 8002976:	81a3      	strh	r3, [r4, #12]
 8002978:	4240      	negs	r0, r0
 800297a:	e03a      	b.n	80029f2 <__swsetup_r+0xaa>
 800297c:	0752      	lsls	r2, r2, #29
 800297e:	d513      	bpl.n	80029a8 <__swsetup_r+0x60>
 8002980:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002982:	2900      	cmp	r1, #0
 8002984:	d008      	beq.n	8002998 <__swsetup_r+0x50>
 8002986:	0023      	movs	r3, r4
 8002988:	3344      	adds	r3, #68	@ 0x44
 800298a:	4299      	cmp	r1, r3
 800298c:	d002      	beq.n	8002994 <__swsetup_r+0x4c>
 800298e:	0028      	movs	r0, r5
 8002990:	f7ff fb28 	bl	8001fe4 <_free_r>
 8002994:	2300      	movs	r3, #0
 8002996:	6363      	str	r3, [r4, #52]	@ 0x34
 8002998:	2224      	movs	r2, #36	@ 0x24
 800299a:	89a3      	ldrh	r3, [r4, #12]
 800299c:	4393      	bics	r3, r2
 800299e:	81a3      	strh	r3, [r4, #12]
 80029a0:	2300      	movs	r3, #0
 80029a2:	6063      	str	r3, [r4, #4]
 80029a4:	6923      	ldr	r3, [r4, #16]
 80029a6:	6023      	str	r3, [r4, #0]
 80029a8:	2308      	movs	r3, #8
 80029aa:	89a2      	ldrh	r2, [r4, #12]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	81a3      	strh	r3, [r4, #12]
 80029b0:	6923      	ldr	r3, [r4, #16]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10b      	bne.n	80029ce <__swsetup_r+0x86>
 80029b6:	21a0      	movs	r1, #160	@ 0xa0
 80029b8:	2280      	movs	r2, #128	@ 0x80
 80029ba:	89a3      	ldrh	r3, [r4, #12]
 80029bc:	0089      	lsls	r1, r1, #2
 80029be:	0092      	lsls	r2, r2, #2
 80029c0:	400b      	ands	r3, r1
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d003      	beq.n	80029ce <__swsetup_r+0x86>
 80029c6:	0021      	movs	r1, r4
 80029c8:	0028      	movs	r0, r5
 80029ca:	f000 f863 	bl	8002a94 <__smakebuf_r>
 80029ce:	230c      	movs	r3, #12
 80029d0:	5ee2      	ldrsh	r2, [r4, r3]
 80029d2:	2101      	movs	r1, #1
 80029d4:	0013      	movs	r3, r2
 80029d6:	400b      	ands	r3, r1
 80029d8:	420a      	tst	r2, r1
 80029da:	d00b      	beq.n	80029f4 <__swsetup_r+0xac>
 80029dc:	2300      	movs	r3, #0
 80029de:	60a3      	str	r3, [r4, #8]
 80029e0:	6963      	ldr	r3, [r4, #20]
 80029e2:	425b      	negs	r3, r3
 80029e4:	61a3      	str	r3, [r4, #24]
 80029e6:	2000      	movs	r0, #0
 80029e8:	6923      	ldr	r3, [r4, #16]
 80029ea:	4283      	cmp	r3, r0
 80029ec:	d101      	bne.n	80029f2 <__swsetup_r+0xaa>
 80029ee:	0613      	lsls	r3, r2, #24
 80029f0:	d4be      	bmi.n	8002970 <__swsetup_r+0x28>
 80029f2:	bd70      	pop	{r4, r5, r6, pc}
 80029f4:	0791      	lsls	r1, r2, #30
 80029f6:	d400      	bmi.n	80029fa <__swsetup_r+0xb2>
 80029f8:	6963      	ldr	r3, [r4, #20]
 80029fa:	60a3      	str	r3, [r4, #8]
 80029fc:	e7f3      	b.n	80029e6 <__swsetup_r+0x9e>
 80029fe:	46c0      	nop			@ (mov r8, r8)
 8002a00:	20000018 	.word	0x20000018

08002a04 <_sbrk_r>:
 8002a04:	2300      	movs	r3, #0
 8002a06:	b570      	push	{r4, r5, r6, lr}
 8002a08:	4d06      	ldr	r5, [pc, #24]	@ (8002a24 <_sbrk_r+0x20>)
 8002a0a:	0004      	movs	r4, r0
 8002a0c:	0008      	movs	r0, r1
 8002a0e:	602b      	str	r3, [r5, #0]
 8002a10:	f7fd fde2 	bl	80005d8 <_sbrk>
 8002a14:	1c43      	adds	r3, r0, #1
 8002a16:	d103      	bne.n	8002a20 <_sbrk_r+0x1c>
 8002a18:	682b      	ldr	r3, [r5, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d000      	beq.n	8002a20 <_sbrk_r+0x1c>
 8002a1e:	6023      	str	r3, [r4, #0]
 8002a20:	bd70      	pop	{r4, r5, r6, pc}
 8002a22:	46c0      	nop			@ (mov r8, r8)
 8002a24:	2000025c 	.word	0x2000025c

08002a28 <memchr>:
 8002a28:	b2c9      	uxtb	r1, r1
 8002a2a:	1882      	adds	r2, r0, r2
 8002a2c:	4290      	cmp	r0, r2
 8002a2e:	d101      	bne.n	8002a34 <memchr+0xc>
 8002a30:	2000      	movs	r0, #0
 8002a32:	4770      	bx	lr
 8002a34:	7803      	ldrb	r3, [r0, #0]
 8002a36:	428b      	cmp	r3, r1
 8002a38:	d0fb      	beq.n	8002a32 <memchr+0xa>
 8002a3a:	3001      	adds	r0, #1
 8002a3c:	e7f6      	b.n	8002a2c <memchr+0x4>
	...

08002a40 <__swhatbuf_r>:
 8002a40:	b570      	push	{r4, r5, r6, lr}
 8002a42:	000e      	movs	r6, r1
 8002a44:	001d      	movs	r5, r3
 8002a46:	230e      	movs	r3, #14
 8002a48:	5ec9      	ldrsh	r1, [r1, r3]
 8002a4a:	0014      	movs	r4, r2
 8002a4c:	b096      	sub	sp, #88	@ 0x58
 8002a4e:	2900      	cmp	r1, #0
 8002a50:	da0c      	bge.n	8002a6c <__swhatbuf_r+0x2c>
 8002a52:	89b2      	ldrh	r2, [r6, #12]
 8002a54:	2380      	movs	r3, #128	@ 0x80
 8002a56:	0011      	movs	r1, r2
 8002a58:	4019      	ands	r1, r3
 8002a5a:	421a      	tst	r2, r3
 8002a5c:	d114      	bne.n	8002a88 <__swhatbuf_r+0x48>
 8002a5e:	2380      	movs	r3, #128	@ 0x80
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	2000      	movs	r0, #0
 8002a64:	6029      	str	r1, [r5, #0]
 8002a66:	6023      	str	r3, [r4, #0]
 8002a68:	b016      	add	sp, #88	@ 0x58
 8002a6a:	bd70      	pop	{r4, r5, r6, pc}
 8002a6c:	466a      	mov	r2, sp
 8002a6e:	f000 f853 	bl	8002b18 <_fstat_r>
 8002a72:	2800      	cmp	r0, #0
 8002a74:	dbed      	blt.n	8002a52 <__swhatbuf_r+0x12>
 8002a76:	23f0      	movs	r3, #240	@ 0xf0
 8002a78:	9901      	ldr	r1, [sp, #4]
 8002a7a:	021b      	lsls	r3, r3, #8
 8002a7c:	4019      	ands	r1, r3
 8002a7e:	4b04      	ldr	r3, [pc, #16]	@ (8002a90 <__swhatbuf_r+0x50>)
 8002a80:	18c9      	adds	r1, r1, r3
 8002a82:	424b      	negs	r3, r1
 8002a84:	4159      	adcs	r1, r3
 8002a86:	e7ea      	b.n	8002a5e <__swhatbuf_r+0x1e>
 8002a88:	2100      	movs	r1, #0
 8002a8a:	2340      	movs	r3, #64	@ 0x40
 8002a8c:	e7e9      	b.n	8002a62 <__swhatbuf_r+0x22>
 8002a8e:	46c0      	nop			@ (mov r8, r8)
 8002a90:	ffffe000 	.word	0xffffe000

08002a94 <__smakebuf_r>:
 8002a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a96:	2602      	movs	r6, #2
 8002a98:	898b      	ldrh	r3, [r1, #12]
 8002a9a:	0005      	movs	r5, r0
 8002a9c:	000c      	movs	r4, r1
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	4233      	tst	r3, r6
 8002aa2:	d007      	beq.n	8002ab4 <__smakebuf_r+0x20>
 8002aa4:	0023      	movs	r3, r4
 8002aa6:	3347      	adds	r3, #71	@ 0x47
 8002aa8:	6023      	str	r3, [r4, #0]
 8002aaa:	6123      	str	r3, [r4, #16]
 8002aac:	2301      	movs	r3, #1
 8002aae:	6163      	str	r3, [r4, #20]
 8002ab0:	b005      	add	sp, #20
 8002ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ab4:	ab03      	add	r3, sp, #12
 8002ab6:	aa02      	add	r2, sp, #8
 8002ab8:	f7ff ffc2 	bl	8002a40 <__swhatbuf_r>
 8002abc:	9f02      	ldr	r7, [sp, #8]
 8002abe:	9001      	str	r0, [sp, #4]
 8002ac0:	0039      	movs	r1, r7
 8002ac2:	0028      	movs	r0, r5
 8002ac4:	f7ff fafa 	bl	80020bc <_malloc_r>
 8002ac8:	2800      	cmp	r0, #0
 8002aca:	d108      	bne.n	8002ade <__smakebuf_r+0x4a>
 8002acc:	220c      	movs	r2, #12
 8002ace:	5ea3      	ldrsh	r3, [r4, r2]
 8002ad0:	059a      	lsls	r2, r3, #22
 8002ad2:	d4ed      	bmi.n	8002ab0 <__smakebuf_r+0x1c>
 8002ad4:	2203      	movs	r2, #3
 8002ad6:	4393      	bics	r3, r2
 8002ad8:	431e      	orrs	r6, r3
 8002ada:	81a6      	strh	r6, [r4, #12]
 8002adc:	e7e2      	b.n	8002aa4 <__smakebuf_r+0x10>
 8002ade:	2380      	movs	r3, #128	@ 0x80
 8002ae0:	89a2      	ldrh	r2, [r4, #12]
 8002ae2:	6020      	str	r0, [r4, #0]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	81a3      	strh	r3, [r4, #12]
 8002ae8:	9b03      	ldr	r3, [sp, #12]
 8002aea:	6120      	str	r0, [r4, #16]
 8002aec:	6167      	str	r7, [r4, #20]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00c      	beq.n	8002b0c <__smakebuf_r+0x78>
 8002af2:	0028      	movs	r0, r5
 8002af4:	230e      	movs	r3, #14
 8002af6:	5ee1      	ldrsh	r1, [r4, r3]
 8002af8:	f000 f820 	bl	8002b3c <_isatty_r>
 8002afc:	2800      	cmp	r0, #0
 8002afe:	d005      	beq.n	8002b0c <__smakebuf_r+0x78>
 8002b00:	2303      	movs	r3, #3
 8002b02:	89a2      	ldrh	r2, [r4, #12]
 8002b04:	439a      	bics	r2, r3
 8002b06:	3b02      	subs	r3, #2
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	81a3      	strh	r3, [r4, #12]
 8002b0c:	89a3      	ldrh	r3, [r4, #12]
 8002b0e:	9a01      	ldr	r2, [sp, #4]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	81a3      	strh	r3, [r4, #12]
 8002b14:	e7cc      	b.n	8002ab0 <__smakebuf_r+0x1c>
	...

08002b18 <_fstat_r>:
 8002b18:	2300      	movs	r3, #0
 8002b1a:	b570      	push	{r4, r5, r6, lr}
 8002b1c:	4d06      	ldr	r5, [pc, #24]	@ (8002b38 <_fstat_r+0x20>)
 8002b1e:	0004      	movs	r4, r0
 8002b20:	0008      	movs	r0, r1
 8002b22:	0011      	movs	r1, r2
 8002b24:	602b      	str	r3, [r5, #0]
 8002b26:	f7fd fd35 	bl	8000594 <_fstat>
 8002b2a:	1c43      	adds	r3, r0, #1
 8002b2c:	d103      	bne.n	8002b36 <_fstat_r+0x1e>
 8002b2e:	682b      	ldr	r3, [r5, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d000      	beq.n	8002b36 <_fstat_r+0x1e>
 8002b34:	6023      	str	r3, [r4, #0]
 8002b36:	bd70      	pop	{r4, r5, r6, pc}
 8002b38:	2000025c 	.word	0x2000025c

08002b3c <_isatty_r>:
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	b570      	push	{r4, r5, r6, lr}
 8002b40:	4d06      	ldr	r5, [pc, #24]	@ (8002b5c <_isatty_r+0x20>)
 8002b42:	0004      	movs	r4, r0
 8002b44:	0008      	movs	r0, r1
 8002b46:	602b      	str	r3, [r5, #0]
 8002b48:	f7fd fd32 	bl	80005b0 <_isatty>
 8002b4c:	1c43      	adds	r3, r0, #1
 8002b4e:	d103      	bne.n	8002b58 <_isatty_r+0x1c>
 8002b50:	682b      	ldr	r3, [r5, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d000      	beq.n	8002b58 <_isatty_r+0x1c>
 8002b56:	6023      	str	r3, [r4, #0]
 8002b58:	bd70      	pop	{r4, r5, r6, pc}
 8002b5a:	46c0      	nop			@ (mov r8, r8)
 8002b5c:	2000025c 	.word	0x2000025c

08002b60 <_init>:
 8002b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b62:	46c0      	nop			@ (mov r8, r8)
 8002b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b66:	bc08      	pop	{r3}
 8002b68:	469e      	mov	lr, r3
 8002b6a:	4770      	bx	lr

08002b6c <_fini>:
 8002b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b6e:	46c0      	nop			@ (mov r8, r8)
 8002b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b72:	bc08      	pop	{r3}
 8002b74:	469e      	mov	lr, r3
 8002b76:	4770      	bx	lr
