
STM32C031.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025cc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800268c  0800268c  0000368c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002714  08002714  00004068  2**0
                  CONTENTS
  4 .ARM          00000000  08002714  08002714  00004068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002714  08002714  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002714  08002714  00003714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002718  08002718  00003718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800271c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000068  08002784  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08002784  0000426c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b05  00000000  00000000  00004090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000154b  00000000  00000000  0000cb95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000708  00000000  00000000  0000e0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000561  00000000  00000000  0000e7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013945  00000000  00000000  0000ed49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000916b  00000000  00000000  0002268e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00076f6b  00000000  00000000  0002b7f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a2764  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e28  00000000  00000000  000a27a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000a45d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002674 	.word	0x08002674

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08002674 	.word	0x08002674

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fa4d 	bl	80006c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f818 	bl	800025c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f888 	bl	8000340 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000230:	f000 f852 	bl	80002d8 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000234:	23a0      	movs	r3, #160	@ 0xa0
 8000236:	05db      	lsls	r3, r3, #23
 8000238:	2120      	movs	r1, #32
 800023a:	0018      	movs	r0, r3
 800023c:	f000 fd25 	bl	8000c8a <HAL_GPIO_TogglePin>
    printf("hello world \n");
 8000240:	4b05      	ldr	r3, [pc, #20]	@ (8000258 <main+0x38>)
 8000242:	0018      	movs	r0, r3
 8000244:	f001 fe4c 	bl	8001ee0 <puts>
    HAL_Delay(1000);
 8000248:	23fa      	movs	r3, #250	@ 0xfa
 800024a:	009b      	lsls	r3, r3, #2
 800024c:	0018      	movs	r0, r3
 800024e:	f000 fab5 	bl	80007bc <HAL_Delay>
  {
 8000252:	46c0      	nop			@ (mov r8, r8)
 8000254:	e7ee      	b.n	8000234 <main+0x14>
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	0800268c 	.word	0x0800268c

0800025c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800025c:	b590      	push	{r4, r7, lr}
 800025e:	b08d      	sub	sp, #52	@ 0x34
 8000260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000262:	2414      	movs	r4, #20
 8000264:	193b      	adds	r3, r7, r4
 8000266:	0018      	movs	r0, r3
 8000268:	231c      	movs	r3, #28
 800026a:	001a      	movs	r2, r3
 800026c:	2100      	movs	r1, #0
 800026e:	f001 ff2d 	bl	80020cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000272:	003b      	movs	r3, r7
 8000274:	0018      	movs	r0, r3
 8000276:	2314      	movs	r3, #20
 8000278:	001a      	movs	r2, r3
 800027a:	2100      	movs	r1, #0
 800027c:	f001 ff26 	bl	80020cc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000280:	193b      	adds	r3, r7, r4
 8000282:	2201      	movs	r2, #1
 8000284:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000286:	193b      	adds	r3, r7, r4
 8000288:	2280      	movs	r2, #128	@ 0x80
 800028a:	0252      	lsls	r2, r2, #9
 800028c:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028e:	193b      	adds	r3, r7, r4
 8000290:	0018      	movs	r0, r3
 8000292:	f000 fd15 	bl	8000cc0 <HAL_RCC_OscConfig>
 8000296:	1e03      	subs	r3, r0, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x42>
  {
    Error_Handler();
 800029a:	f000 f8b5 	bl	8000408 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029e:	003b      	movs	r3, r7
 80002a0:	2207      	movs	r2, #7
 80002a2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80002a4:	003b      	movs	r3, r7
 80002a6:	2201      	movs	r2, #1
 80002a8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80002aa:	003b      	movs	r3, r7
 80002ac:	2200      	movs	r2, #0
 80002ae:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80002b0:	003b      	movs	r3, r7
 80002b2:	2200      	movs	r2, #0
 80002b4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80002b6:	003b      	movs	r3, r7
 80002b8:	2200      	movs	r2, #0
 80002ba:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002bc:	003b      	movs	r3, r7
 80002be:	2101      	movs	r1, #1
 80002c0:	0018      	movs	r0, r3
 80002c2:	f000 fee1 	bl	8001088 <HAL_RCC_ClockConfig>
 80002c6:	1e03      	subs	r3, r0, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x72>
  {
    Error_Handler();
 80002ca:	f000 f89d 	bl	8000408 <Error_Handler>
  }
}
 80002ce:	46c0      	nop			@ (mov r8, r8)
 80002d0:	46bd      	mov	sp, r7
 80002d2:	b00d      	add	sp, #52	@ 0x34
 80002d4:	bd90      	pop	{r4, r7, pc}
	...

080002d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002dc:	4b16      	ldr	r3, [pc, #88]	@ (8000338 <MX_USART2_UART_Init+0x60>)
 80002de:	4a17      	ldr	r2, [pc, #92]	@ (800033c <MX_USART2_UART_Init+0x64>)
 80002e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002e2:	4b15      	ldr	r3, [pc, #84]	@ (8000338 <MX_USART2_UART_Init+0x60>)
 80002e4:	22e1      	movs	r2, #225	@ 0xe1
 80002e6:	0252      	lsls	r2, r2, #9
 80002e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002ea:	4b13      	ldr	r3, [pc, #76]	@ (8000338 <MX_USART2_UART_Init+0x60>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002f0:	4b11      	ldr	r3, [pc, #68]	@ (8000338 <MX_USART2_UART_Init+0x60>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80002f6:	4b10      	ldr	r3, [pc, #64]	@ (8000338 <MX_USART2_UART_Init+0x60>)
 80002f8:	2280      	movs	r2, #128	@ 0x80
 80002fa:	00d2      	lsls	r2, r2, #3
 80002fc:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000338 <MX_USART2_UART_Init+0x60>)
 8000300:	220c      	movs	r2, #12
 8000302:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000304:	4b0c      	ldr	r3, [pc, #48]	@ (8000338 <MX_USART2_UART_Init+0x60>)
 8000306:	2200      	movs	r2, #0
 8000308:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800030a:	4b0b      	ldr	r3, [pc, #44]	@ (8000338 <MX_USART2_UART_Init+0x60>)
 800030c:	2200      	movs	r2, #0
 800030e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000310:	4b09      	ldr	r3, [pc, #36]	@ (8000338 <MX_USART2_UART_Init+0x60>)
 8000312:	2200      	movs	r2, #0
 8000314:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000316:	4b08      	ldr	r3, [pc, #32]	@ (8000338 <MX_USART2_UART_Init+0x60>)
 8000318:	2200      	movs	r2, #0
 800031a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800031c:	4b06      	ldr	r3, [pc, #24]	@ (8000338 <MX_USART2_UART_Init+0x60>)
 800031e:	2200      	movs	r2, #0
 8000320:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000322:	4b05      	ldr	r3, [pc, #20]	@ (8000338 <MX_USART2_UART_Init+0x60>)
 8000324:	0018      	movs	r0, r3
 8000326:	f001 f81b 	bl	8001360 <HAL_UART_Init>
 800032a:	1e03      	subs	r3, r0, #0
 800032c:	d001      	beq.n	8000332 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800032e:	f000 f86b 	bl	8000408 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000332:	46c0      	nop			@ (mov r8, r8)
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	20000084 	.word	0x20000084
 800033c:	40004400 	.word	0x40004400

08000340 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000340:	b590      	push	{r4, r7, lr}
 8000342:	b089      	sub	sp, #36	@ 0x24
 8000344:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000346:	240c      	movs	r4, #12
 8000348:	193b      	adds	r3, r7, r4
 800034a:	0018      	movs	r0, r3
 800034c:	2314      	movs	r3, #20
 800034e:	001a      	movs	r2, r3
 8000350:	2100      	movs	r1, #0
 8000352:	f001 febb 	bl	80020cc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000356:	4b21      	ldr	r3, [pc, #132]	@ (80003dc <MX_GPIO_Init+0x9c>)
 8000358:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800035a:	4b20      	ldr	r3, [pc, #128]	@ (80003dc <MX_GPIO_Init+0x9c>)
 800035c:	2104      	movs	r1, #4
 800035e:	430a      	orrs	r2, r1
 8000360:	635a      	str	r2, [r3, #52]	@ 0x34
 8000362:	4b1e      	ldr	r3, [pc, #120]	@ (80003dc <MX_GPIO_Init+0x9c>)
 8000364:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000366:	2204      	movs	r2, #4
 8000368:	4013      	ands	r3, r2
 800036a:	60bb      	str	r3, [r7, #8]
 800036c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800036e:	4b1b      	ldr	r3, [pc, #108]	@ (80003dc <MX_GPIO_Init+0x9c>)
 8000370:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000372:	4b1a      	ldr	r3, [pc, #104]	@ (80003dc <MX_GPIO_Init+0x9c>)
 8000374:	2120      	movs	r1, #32
 8000376:	430a      	orrs	r2, r1
 8000378:	635a      	str	r2, [r3, #52]	@ 0x34
 800037a:	4b18      	ldr	r3, [pc, #96]	@ (80003dc <MX_GPIO_Init+0x9c>)
 800037c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800037e:	2220      	movs	r2, #32
 8000380:	4013      	ands	r3, r2
 8000382:	607b      	str	r3, [r7, #4]
 8000384:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000386:	4b15      	ldr	r3, [pc, #84]	@ (80003dc <MX_GPIO_Init+0x9c>)
 8000388:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800038a:	4b14      	ldr	r3, [pc, #80]	@ (80003dc <MX_GPIO_Init+0x9c>)
 800038c:	2101      	movs	r1, #1
 800038e:	430a      	orrs	r2, r1
 8000390:	635a      	str	r2, [r3, #52]	@ 0x34
 8000392:	4b12      	ldr	r3, [pc, #72]	@ (80003dc <MX_GPIO_Init+0x9c>)
 8000394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000396:	2201      	movs	r2, #1
 8000398:	4013      	ands	r3, r2
 800039a:	603b      	str	r3, [r7, #0]
 800039c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800039e:	23a0      	movs	r3, #160	@ 0xa0
 80003a0:	05db      	lsls	r3, r3, #23
 80003a2:	2200      	movs	r2, #0
 80003a4:	2120      	movs	r1, #32
 80003a6:	0018      	movs	r0, r3
 80003a8:	f000 fc52 	bl	8000c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80003ac:	0021      	movs	r1, r4
 80003ae:	187b      	adds	r3, r7, r1
 80003b0:	2220      	movs	r2, #32
 80003b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b4:	187b      	adds	r3, r7, r1
 80003b6:	2201      	movs	r2, #1
 80003b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ba:	187b      	adds	r3, r7, r1
 80003bc:	2200      	movs	r2, #0
 80003be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c0:	187b      	adds	r3, r7, r1
 80003c2:	2200      	movs	r2, #0
 80003c4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003c6:	187a      	adds	r2, r7, r1
 80003c8:	23a0      	movs	r3, #160	@ 0xa0
 80003ca:	05db      	lsls	r3, r3, #23
 80003cc:	0011      	movs	r1, r2
 80003ce:	0018      	movs	r0, r3
 80003d0:	f000 facc 	bl	800096c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003d4:	46c0      	nop			@ (mov r8, r8)
 80003d6:	46bd      	mov	sp, r7
 80003d8:	b009      	add	sp, #36	@ 0x24
 80003da:	bd90      	pop	{r4, r7, pc}
 80003dc:	40021000 	.word	0x40021000

080003e0 <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80003e8:	4b05      	ldr	r3, [pc, #20]	@ (8000400 <__io_putchar+0x20>)
 80003ea:	1d39      	adds	r1, r7, #4
 80003ec:	4805      	ldr	r0, [pc, #20]	@ (8000404 <__io_putchar+0x24>)
 80003ee:	2201      	movs	r2, #1
 80003f0:	f001 f80c 	bl	800140c <HAL_UART_Transmit>

  return ch;
 80003f4:	687b      	ldr	r3, [r7, #4]
}
 80003f6:	0018      	movs	r0, r3
 80003f8:	46bd      	mov	sp, r7
 80003fa:	b002      	add	sp, #8
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	46c0      	nop			@ (mov r8, r8)
 8000400:	0000ffff 	.word	0x0000ffff
 8000404:	20000084 	.word	0x20000084

08000408 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800040c:	b672      	cpsid	i
}
 800040e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000410:	46c0      	nop			@ (mov r8, r8)
 8000412:	e7fd      	b.n	8000410 <Error_Handler+0x8>

08000414 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800041a:	4b0f      	ldr	r3, [pc, #60]	@ (8000458 <HAL_MspInit+0x44>)
 800041c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800041e:	4b0e      	ldr	r3, [pc, #56]	@ (8000458 <HAL_MspInit+0x44>)
 8000420:	2101      	movs	r1, #1
 8000422:	430a      	orrs	r2, r1
 8000424:	641a      	str	r2, [r3, #64]	@ 0x40
 8000426:	4b0c      	ldr	r3, [pc, #48]	@ (8000458 <HAL_MspInit+0x44>)
 8000428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800042a:	2201      	movs	r2, #1
 800042c:	4013      	ands	r3, r2
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000432:	4b09      	ldr	r3, [pc, #36]	@ (8000458 <HAL_MspInit+0x44>)
 8000434:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000436:	4b08      	ldr	r3, [pc, #32]	@ (8000458 <HAL_MspInit+0x44>)
 8000438:	2180      	movs	r1, #128	@ 0x80
 800043a:	0549      	lsls	r1, r1, #21
 800043c:	430a      	orrs	r2, r1
 800043e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000440:	4b05      	ldr	r3, [pc, #20]	@ (8000458 <HAL_MspInit+0x44>)
 8000442:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000444:	2380      	movs	r3, #128	@ 0x80
 8000446:	055b      	lsls	r3, r3, #21
 8000448:	4013      	ands	r3, r2
 800044a:	603b      	str	r3, [r7, #0]
 800044c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800044e:	46c0      	nop			@ (mov r8, r8)
 8000450:	46bd      	mov	sp, r7
 8000452:	b002      	add	sp, #8
 8000454:	bd80      	pop	{r7, pc}
 8000456:	46c0      	nop			@ (mov r8, r8)
 8000458:	40021000 	.word	0x40021000

0800045c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800045c:	b590      	push	{r4, r7, lr}
 800045e:	b08b      	sub	sp, #44	@ 0x2c
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000464:	2414      	movs	r4, #20
 8000466:	193b      	adds	r3, r7, r4
 8000468:	0018      	movs	r0, r3
 800046a:	2314      	movs	r3, #20
 800046c:	001a      	movs	r2, r3
 800046e:	2100      	movs	r1, #0
 8000470:	f001 fe2c 	bl	80020cc <memset>
  if(huart->Instance==USART2)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a1b      	ldr	r2, [pc, #108]	@ (80004e8 <HAL_UART_MspInit+0x8c>)
 800047a:	4293      	cmp	r3, r2
 800047c:	d130      	bne.n	80004e0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800047e:	4b1b      	ldr	r3, [pc, #108]	@ (80004ec <HAL_UART_MspInit+0x90>)
 8000480:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000482:	4b1a      	ldr	r3, [pc, #104]	@ (80004ec <HAL_UART_MspInit+0x90>)
 8000484:	2180      	movs	r1, #128	@ 0x80
 8000486:	0289      	lsls	r1, r1, #10
 8000488:	430a      	orrs	r2, r1
 800048a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800048c:	4b17      	ldr	r3, [pc, #92]	@ (80004ec <HAL_UART_MspInit+0x90>)
 800048e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000490:	2380      	movs	r3, #128	@ 0x80
 8000492:	029b      	lsls	r3, r3, #10
 8000494:	4013      	ands	r3, r2
 8000496:	613b      	str	r3, [r7, #16]
 8000498:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800049a:	4b14      	ldr	r3, [pc, #80]	@ (80004ec <HAL_UART_MspInit+0x90>)
 800049c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800049e:	4b13      	ldr	r3, [pc, #76]	@ (80004ec <HAL_UART_MspInit+0x90>)
 80004a0:	2101      	movs	r1, #1
 80004a2:	430a      	orrs	r2, r1
 80004a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80004a6:	4b11      	ldr	r3, [pc, #68]	@ (80004ec <HAL_UART_MspInit+0x90>)
 80004a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80004aa:	2201      	movs	r2, #1
 80004ac:	4013      	ands	r3, r2
 80004ae:	60fb      	str	r3, [r7, #12]
 80004b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80004b2:	0021      	movs	r1, r4
 80004b4:	187b      	adds	r3, r7, r1
 80004b6:	220c      	movs	r2, #12
 80004b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	2202      	movs	r2, #2
 80004be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c0:	187b      	adds	r3, r7, r1
 80004c2:	2200      	movs	r2, #0
 80004c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	2200      	movs	r2, #0
 80004ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	2201      	movs	r2, #1
 80004d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d2:	187a      	adds	r2, r7, r1
 80004d4:	23a0      	movs	r3, #160	@ 0xa0
 80004d6:	05db      	lsls	r3, r3, #23
 80004d8:	0011      	movs	r1, r2
 80004da:	0018      	movs	r0, r3
 80004dc:	f000 fa46 	bl	800096c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80004e0:	46c0      	nop			@ (mov r8, r8)
 80004e2:	46bd      	mov	sp, r7
 80004e4:	b00b      	add	sp, #44	@ 0x2c
 80004e6:	bd90      	pop	{r4, r7, pc}
 80004e8:	40004400 	.word	0x40004400
 80004ec:	40021000 	.word	0x40021000

080004f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004f4:	46c0      	nop			@ (mov r8, r8)
 80004f6:	e7fd      	b.n	80004f4 <NMI_Handler+0x4>

080004f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004fc:	46c0      	nop			@ (mov r8, r8)
 80004fe:	e7fd      	b.n	80004fc <HardFault_Handler+0x4>

08000500 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000504:	46c0      	nop			@ (mov r8, r8)
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}

0800050a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800050a:	b580      	push	{r7, lr}
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800050e:	46c0      	nop			@ (mov r8, r8)
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}

08000514 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000518:	f000 f934 	bl	8000784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800051c:	46c0      	nop			@ (mov r8, r8)
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}

08000522 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000522:	b580      	push	{r7, lr}
 8000524:	b086      	sub	sp, #24
 8000526:	af00      	add	r7, sp, #0
 8000528:	60f8      	str	r0, [r7, #12]
 800052a:	60b9      	str	r1, [r7, #8]
 800052c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800052e:	2300      	movs	r3, #0
 8000530:	617b      	str	r3, [r7, #20]
 8000532:	e00a      	b.n	800054a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000534:	e000      	b.n	8000538 <_read+0x16>
 8000536:	bf00      	nop
 8000538:	0001      	movs	r1, r0
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	1c5a      	adds	r2, r3, #1
 800053e:	60ba      	str	r2, [r7, #8]
 8000540:	b2ca      	uxtb	r2, r1
 8000542:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	3301      	adds	r3, #1
 8000548:	617b      	str	r3, [r7, #20]
 800054a:	697a      	ldr	r2, [r7, #20]
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	429a      	cmp	r2, r3
 8000550:	dbf0      	blt.n	8000534 <_read+0x12>
  }

  return len;
 8000552:	687b      	ldr	r3, [r7, #4]
}
 8000554:	0018      	movs	r0, r3
 8000556:	46bd      	mov	sp, r7
 8000558:	b006      	add	sp, #24
 800055a:	bd80      	pop	{r7, pc}

0800055c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b086      	sub	sp, #24
 8000560:	af00      	add	r7, sp, #0
 8000562:	60f8      	str	r0, [r7, #12]
 8000564:	60b9      	str	r1, [r7, #8]
 8000566:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000568:	2300      	movs	r3, #0
 800056a:	617b      	str	r3, [r7, #20]
 800056c:	e009      	b.n	8000582 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800056e:	68bb      	ldr	r3, [r7, #8]
 8000570:	1c5a      	adds	r2, r3, #1
 8000572:	60ba      	str	r2, [r7, #8]
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	0018      	movs	r0, r3
 8000578:	f7ff ff32 	bl	80003e0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800057c:	697b      	ldr	r3, [r7, #20]
 800057e:	3301      	adds	r3, #1
 8000580:	617b      	str	r3, [r7, #20]
 8000582:	697a      	ldr	r2, [r7, #20]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	429a      	cmp	r2, r3
 8000588:	dbf1      	blt.n	800056e <_write+0x12>
  }
  return len;
 800058a:	687b      	ldr	r3, [r7, #4]
}
 800058c:	0018      	movs	r0, r3
 800058e:	46bd      	mov	sp, r7
 8000590:	b006      	add	sp, #24
 8000592:	bd80      	pop	{r7, pc}

08000594 <_close>:

int _close(int file)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800059c:	2301      	movs	r3, #1
 800059e:	425b      	negs	r3, r3
}
 80005a0:	0018      	movs	r0, r3
 80005a2:	46bd      	mov	sp, r7
 80005a4:	b002      	add	sp, #8
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	2280      	movs	r2, #128	@ 0x80
 80005b6:	0192      	lsls	r2, r2, #6
 80005b8:	605a      	str	r2, [r3, #4]
  return 0;
 80005ba:	2300      	movs	r3, #0
}
 80005bc:	0018      	movs	r0, r3
 80005be:	46bd      	mov	sp, r7
 80005c0:	b002      	add	sp, #8
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <_isatty>:

int _isatty(int file)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005cc:	2301      	movs	r3, #1
}
 80005ce:	0018      	movs	r0, r3
 80005d0:	46bd      	mov	sp, r7
 80005d2:	b002      	add	sp, #8
 80005d4:	bd80      	pop	{r7, pc}

080005d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	b084      	sub	sp, #16
 80005da:	af00      	add	r7, sp, #0
 80005dc:	60f8      	str	r0, [r7, #12]
 80005de:	60b9      	str	r1, [r7, #8]
 80005e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005e2:	2300      	movs	r3, #0
}
 80005e4:	0018      	movs	r0, r3
 80005e6:	46bd      	mov	sp, r7
 80005e8:	b004      	add	sp, #16
 80005ea:	bd80      	pop	{r7, pc}

080005ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005f4:	4a14      	ldr	r2, [pc, #80]	@ (8000648 <_sbrk+0x5c>)
 80005f6:	4b15      	ldr	r3, [pc, #84]	@ (800064c <_sbrk+0x60>)
 80005f8:	1ad3      	subs	r3, r2, r3
 80005fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005fc:	697b      	ldr	r3, [r7, #20]
 80005fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000600:	4b13      	ldr	r3, [pc, #76]	@ (8000650 <_sbrk+0x64>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d102      	bne.n	800060e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000608:	4b11      	ldr	r3, [pc, #68]	@ (8000650 <_sbrk+0x64>)
 800060a:	4a12      	ldr	r2, [pc, #72]	@ (8000654 <_sbrk+0x68>)
 800060c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800060e:	4b10      	ldr	r3, [pc, #64]	@ (8000650 <_sbrk+0x64>)
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	18d3      	adds	r3, r2, r3
 8000616:	693a      	ldr	r2, [r7, #16]
 8000618:	429a      	cmp	r2, r3
 800061a:	d207      	bcs.n	800062c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800061c:	f001 fdac 	bl	8002178 <__errno>
 8000620:	0003      	movs	r3, r0
 8000622:	220c      	movs	r2, #12
 8000624:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000626:	2301      	movs	r3, #1
 8000628:	425b      	negs	r3, r3
 800062a:	e009      	b.n	8000640 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800062c:	4b08      	ldr	r3, [pc, #32]	@ (8000650 <_sbrk+0x64>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000632:	4b07      	ldr	r3, [pc, #28]	@ (8000650 <_sbrk+0x64>)
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	18d2      	adds	r2, r2, r3
 800063a:	4b05      	ldr	r3, [pc, #20]	@ (8000650 <_sbrk+0x64>)
 800063c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800063e:	68fb      	ldr	r3, [r7, #12]
}
 8000640:	0018      	movs	r0, r3
 8000642:	46bd      	mov	sp, r7
 8000644:	b006      	add	sp, #24
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20003000 	.word	0x20003000
 800064c:	00000400 	.word	0x00000400
 8000650:	20000118 	.word	0x20000118
 8000654:	20000270 	.word	0x20000270

08000658 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800065c:	4b03      	ldr	r3, [pc, #12]	@ (800066c <SystemInit+0x14>)
 800065e:	2280      	movs	r2, #128	@ 0x80
 8000660:	0512      	lsls	r2, r2, #20
 8000662:	609a      	str	r2, [r3, #8]
#endif
}
 8000664:	46c0      	nop			@ (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	46c0      	nop			@ (mov r8, r8)
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000670:	480d      	ldr	r0, [pc, #52]	@ (80006a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000672:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000674:	f7ff fff0 	bl	8000658 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000678:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800067a:	e003      	b.n	8000684 <LoopCopyDataInit>

0800067c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800067c:	4b0b      	ldr	r3, [pc, #44]	@ (80006ac <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800067e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000680:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000682:	3104      	adds	r1, #4

08000684 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000684:	480a      	ldr	r0, [pc, #40]	@ (80006b0 <LoopForever+0xa>)
  ldr r3, =_edata
 8000686:	4b0b      	ldr	r3, [pc, #44]	@ (80006b4 <LoopForever+0xe>)
  adds r2, r0, r1
 8000688:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800068a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800068c:	d3f6      	bcc.n	800067c <CopyDataInit>
  ldr r2, =_sbss
 800068e:	4a0a      	ldr	r2, [pc, #40]	@ (80006b8 <LoopForever+0x12>)
  b LoopFillZerobss
 8000690:	e002      	b.n	8000698 <LoopFillZerobss>

08000692 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000692:	2300      	movs	r3, #0
  str  r3, [r2]
 8000694:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000696:	3204      	adds	r2, #4

08000698 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000698:	4b08      	ldr	r3, [pc, #32]	@ (80006bc <LoopForever+0x16>)
  cmp r2, r3
 800069a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800069c:	d3f9      	bcc.n	8000692 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800069e:	f001 fd71 	bl	8002184 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006a2:	f7ff fdbd 	bl	8000220 <main>

080006a6 <LoopForever>:

LoopForever:
    b LoopForever
 80006a6:	e7fe      	b.n	80006a6 <LoopForever>
  ldr   r0, =_estack
 80006a8:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 80006ac:	0800271c 	.word	0x0800271c
  ldr r0, =_sdata
 80006b0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80006b4:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 80006b8:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 80006bc:	2000026c 	.word	0x2000026c

080006c0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006c0:	e7fe      	b.n	80006c0 <ADC1_IRQHandler>

080006c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006c2:	b580      	push	{r7, lr}
 80006c4:	b082      	sub	sp, #8
 80006c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006c8:	1dfb      	adds	r3, r7, #7
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006ce:	2003      	movs	r0, #3
 80006d0:	f000 f80e 	bl	80006f0 <HAL_InitTick>
 80006d4:	1e03      	subs	r3, r0, #0
 80006d6:	d003      	beq.n	80006e0 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80006d8:	1dfb      	adds	r3, r7, #7
 80006da:	2201      	movs	r2, #1
 80006dc:	701a      	strb	r2, [r3, #0]
 80006de:	e001      	b.n	80006e4 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006e0:	f7ff fe98 	bl	8000414 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006e4:	1dfb      	adds	r3, r7, #7
 80006e6:	781b      	ldrb	r3, [r3, #0]
}
 80006e8:	0018      	movs	r0, r3
 80006ea:	46bd      	mov	sp, r7
 80006ec:	b002      	add	sp, #8
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f0:	b590      	push	{r4, r7, lr}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006f8:	230f      	movs	r3, #15
 80006fa:	18fb      	adds	r3, r7, r3
 80006fc:	2200      	movs	r2, #0
 80006fe:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000700:	4b1d      	ldr	r3, [pc, #116]	@ (8000778 <HAL_InitTick+0x88>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d02b      	beq.n	8000760 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000708:	4b1c      	ldr	r3, [pc, #112]	@ (800077c <HAL_InitTick+0x8c>)
 800070a:	681c      	ldr	r4, [r3, #0]
 800070c:	4b1a      	ldr	r3, [pc, #104]	@ (8000778 <HAL_InitTick+0x88>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	0019      	movs	r1, r3
 8000712:	23fa      	movs	r3, #250	@ 0xfa
 8000714:	0098      	lsls	r0, r3, #2
 8000716:	f7ff fcf7 	bl	8000108 <__udivsi3>
 800071a:	0003      	movs	r3, r0
 800071c:	0019      	movs	r1, r3
 800071e:	0020      	movs	r0, r4
 8000720:	f7ff fcf2 	bl	8000108 <__udivsi3>
 8000724:	0003      	movs	r3, r0
 8000726:	0018      	movs	r0, r3
 8000728:	f000 f913 	bl	8000952 <HAL_SYSTICK_Config>
 800072c:	1e03      	subs	r3, r0, #0
 800072e:	d112      	bne.n	8000756 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2b03      	cmp	r3, #3
 8000734:	d80a      	bhi.n	800074c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000736:	6879      	ldr	r1, [r7, #4]
 8000738:	2301      	movs	r3, #1
 800073a:	425b      	negs	r3, r3
 800073c:	2200      	movs	r2, #0
 800073e:	0018      	movs	r0, r3
 8000740:	f000 f8f2 	bl	8000928 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000744:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <HAL_InitTick+0x90>)
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	e00d      	b.n	8000768 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800074c:	230f      	movs	r3, #15
 800074e:	18fb      	adds	r3, r7, r3
 8000750:	2201      	movs	r2, #1
 8000752:	701a      	strb	r2, [r3, #0]
 8000754:	e008      	b.n	8000768 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000756:	230f      	movs	r3, #15
 8000758:	18fb      	adds	r3, r7, r3
 800075a:	2201      	movs	r2, #1
 800075c:	701a      	strb	r2, [r3, #0]
 800075e:	e003      	b.n	8000768 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000760:	230f      	movs	r3, #15
 8000762:	18fb      	adds	r3, r7, r3
 8000764:	2201      	movs	r2, #1
 8000766:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000768:	230f      	movs	r3, #15
 800076a:	18fb      	adds	r3, r7, r3
 800076c:	781b      	ldrb	r3, [r3, #0]
}
 800076e:	0018      	movs	r0, r3
 8000770:	46bd      	mov	sp, r7
 8000772:	b005      	add	sp, #20
 8000774:	bd90      	pop	{r4, r7, pc}
 8000776:	46c0      	nop			@ (mov r8, r8)
 8000778:	20000008 	.word	0x20000008
 800077c:	20000000 	.word	0x20000000
 8000780:	20000004 	.word	0x20000004

08000784 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000788:	4b05      	ldr	r3, [pc, #20]	@ (80007a0 <HAL_IncTick+0x1c>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	001a      	movs	r2, r3
 800078e:	4b05      	ldr	r3, [pc, #20]	@ (80007a4 <HAL_IncTick+0x20>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	18d2      	adds	r2, r2, r3
 8000794:	4b03      	ldr	r3, [pc, #12]	@ (80007a4 <HAL_IncTick+0x20>)
 8000796:	601a      	str	r2, [r3, #0]
}
 8000798:	46c0      	nop			@ (mov r8, r8)
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	46c0      	nop			@ (mov r8, r8)
 80007a0:	20000008 	.word	0x20000008
 80007a4:	2000011c 	.word	0x2000011c

080007a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  return uwTick;
 80007ac:	4b02      	ldr	r3, [pc, #8]	@ (80007b8 <HAL_GetTick+0x10>)
 80007ae:	681b      	ldr	r3, [r3, #0]
}
 80007b0:	0018      	movs	r0, r3
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	46c0      	nop			@ (mov r8, r8)
 80007b8:	2000011c 	.word	0x2000011c

080007bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007c4:	f7ff fff0 	bl	80007a8 <HAL_GetTick>
 80007c8:	0003      	movs	r3, r0
 80007ca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	3301      	adds	r3, #1
 80007d4:	d005      	beq.n	80007e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000800 <HAL_Delay+0x44>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	001a      	movs	r2, r3
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	189b      	adds	r3, r3, r2
 80007e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007e2:	46c0      	nop			@ (mov r8, r8)
 80007e4:	f7ff ffe0 	bl	80007a8 <HAL_GetTick>
 80007e8:	0002      	movs	r2, r0
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	1ad3      	subs	r3, r2, r3
 80007ee:	68fa      	ldr	r2, [r7, #12]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d8f7      	bhi.n	80007e4 <HAL_Delay+0x28>
  {
  }
}
 80007f4:	46c0      	nop			@ (mov r8, r8)
 80007f6:	46c0      	nop			@ (mov r8, r8)
 80007f8:	46bd      	mov	sp, r7
 80007fa:	b004      	add	sp, #16
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	46c0      	nop			@ (mov r8, r8)
 8000800:	20000008 	.word	0x20000008

08000804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000804:	b590      	push	{r4, r7, lr}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	0002      	movs	r2, r0
 800080c:	6039      	str	r1, [r7, #0]
 800080e:	1dfb      	adds	r3, r7, #7
 8000810:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000812:	1dfb      	adds	r3, r7, #7
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b7f      	cmp	r3, #127	@ 0x7f
 8000818:	d828      	bhi.n	800086c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800081a:	4a2f      	ldr	r2, [pc, #188]	@ (80008d8 <__NVIC_SetPriority+0xd4>)
 800081c:	1dfb      	adds	r3, r7, #7
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	b25b      	sxtb	r3, r3
 8000822:	089b      	lsrs	r3, r3, #2
 8000824:	33c0      	adds	r3, #192	@ 0xc0
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	589b      	ldr	r3, [r3, r2]
 800082a:	1dfa      	adds	r2, r7, #7
 800082c:	7812      	ldrb	r2, [r2, #0]
 800082e:	0011      	movs	r1, r2
 8000830:	2203      	movs	r2, #3
 8000832:	400a      	ands	r2, r1
 8000834:	00d2      	lsls	r2, r2, #3
 8000836:	21ff      	movs	r1, #255	@ 0xff
 8000838:	4091      	lsls	r1, r2
 800083a:	000a      	movs	r2, r1
 800083c:	43d2      	mvns	r2, r2
 800083e:	401a      	ands	r2, r3
 8000840:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	019b      	lsls	r3, r3, #6
 8000846:	22ff      	movs	r2, #255	@ 0xff
 8000848:	401a      	ands	r2, r3
 800084a:	1dfb      	adds	r3, r7, #7
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	0018      	movs	r0, r3
 8000850:	2303      	movs	r3, #3
 8000852:	4003      	ands	r3, r0
 8000854:	00db      	lsls	r3, r3, #3
 8000856:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000858:	481f      	ldr	r0, [pc, #124]	@ (80008d8 <__NVIC_SetPriority+0xd4>)
 800085a:	1dfb      	adds	r3, r7, #7
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	b25b      	sxtb	r3, r3
 8000860:	089b      	lsrs	r3, r3, #2
 8000862:	430a      	orrs	r2, r1
 8000864:	33c0      	adds	r3, #192	@ 0xc0
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800086a:	e031      	b.n	80008d0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800086c:	4a1b      	ldr	r2, [pc, #108]	@ (80008dc <__NVIC_SetPriority+0xd8>)
 800086e:	1dfb      	adds	r3, r7, #7
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	0019      	movs	r1, r3
 8000874:	230f      	movs	r3, #15
 8000876:	400b      	ands	r3, r1
 8000878:	3b08      	subs	r3, #8
 800087a:	089b      	lsrs	r3, r3, #2
 800087c:	3306      	adds	r3, #6
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	18d3      	adds	r3, r2, r3
 8000882:	3304      	adds	r3, #4
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	1dfa      	adds	r2, r7, #7
 8000888:	7812      	ldrb	r2, [r2, #0]
 800088a:	0011      	movs	r1, r2
 800088c:	2203      	movs	r2, #3
 800088e:	400a      	ands	r2, r1
 8000890:	00d2      	lsls	r2, r2, #3
 8000892:	21ff      	movs	r1, #255	@ 0xff
 8000894:	4091      	lsls	r1, r2
 8000896:	000a      	movs	r2, r1
 8000898:	43d2      	mvns	r2, r2
 800089a:	401a      	ands	r2, r3
 800089c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	019b      	lsls	r3, r3, #6
 80008a2:	22ff      	movs	r2, #255	@ 0xff
 80008a4:	401a      	ands	r2, r3
 80008a6:	1dfb      	adds	r3, r7, #7
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	0018      	movs	r0, r3
 80008ac:	2303      	movs	r3, #3
 80008ae:	4003      	ands	r3, r0
 80008b0:	00db      	lsls	r3, r3, #3
 80008b2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008b4:	4809      	ldr	r0, [pc, #36]	@ (80008dc <__NVIC_SetPriority+0xd8>)
 80008b6:	1dfb      	adds	r3, r7, #7
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	001c      	movs	r4, r3
 80008bc:	230f      	movs	r3, #15
 80008be:	4023      	ands	r3, r4
 80008c0:	3b08      	subs	r3, #8
 80008c2:	089b      	lsrs	r3, r3, #2
 80008c4:	430a      	orrs	r2, r1
 80008c6:	3306      	adds	r3, #6
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	18c3      	adds	r3, r0, r3
 80008cc:	3304      	adds	r3, #4
 80008ce:	601a      	str	r2, [r3, #0]
}
 80008d0:	46c0      	nop			@ (mov r8, r8)
 80008d2:	46bd      	mov	sp, r7
 80008d4:	b003      	add	sp, #12
 80008d6:	bd90      	pop	{r4, r7, pc}
 80008d8:	e000e100 	.word	0xe000e100
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	1e5a      	subs	r2, r3, #1
 80008ec:	2380      	movs	r3, #128	@ 0x80
 80008ee:	045b      	lsls	r3, r3, #17
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d301      	bcc.n	80008f8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008f4:	2301      	movs	r3, #1
 80008f6:	e010      	b.n	800091a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000924 <SysTick_Config+0x44>)
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	3a01      	subs	r2, #1
 80008fe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000900:	2301      	movs	r3, #1
 8000902:	425b      	negs	r3, r3
 8000904:	2103      	movs	r1, #3
 8000906:	0018      	movs	r0, r3
 8000908:	f7ff ff7c 	bl	8000804 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800090c:	4b05      	ldr	r3, [pc, #20]	@ (8000924 <SysTick_Config+0x44>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000912:	4b04      	ldr	r3, [pc, #16]	@ (8000924 <SysTick_Config+0x44>)
 8000914:	2207      	movs	r2, #7
 8000916:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000918:	2300      	movs	r3, #0
}
 800091a:	0018      	movs	r0, r3
 800091c:	46bd      	mov	sp, r7
 800091e:	b002      	add	sp, #8
 8000920:	bd80      	pop	{r7, pc}
 8000922:	46c0      	nop			@ (mov r8, r8)
 8000924:	e000e010 	.word	0xe000e010

08000928 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	60b9      	str	r1, [r7, #8]
 8000930:	607a      	str	r2, [r7, #4]
 8000932:	210f      	movs	r1, #15
 8000934:	187b      	adds	r3, r7, r1
 8000936:	1c02      	adds	r2, r0, #0
 8000938:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800093a:	68ba      	ldr	r2, [r7, #8]
 800093c:	187b      	adds	r3, r7, r1
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	b25b      	sxtb	r3, r3
 8000942:	0011      	movs	r1, r2
 8000944:	0018      	movs	r0, r3
 8000946:	f7ff ff5d 	bl	8000804 <__NVIC_SetPriority>
}
 800094a:	46c0      	nop			@ (mov r8, r8)
 800094c:	46bd      	mov	sp, r7
 800094e:	b004      	add	sp, #16
 8000950:	bd80      	pop	{r7, pc}

08000952 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	b082      	sub	sp, #8
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	0018      	movs	r0, r3
 800095e:	f7ff ffbf 	bl	80008e0 <SysTick_Config>
 8000962:	0003      	movs	r3, r0
}
 8000964:	0018      	movs	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	b002      	add	sp, #8
 800096a:	bd80      	pop	{r7, pc}

0800096c <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000976:	2300      	movs	r3, #0
 8000978:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800097a:	e153      	b.n	8000c24 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2101      	movs	r1, #1
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	4091      	lsls	r1, r2
 8000986:	000a      	movs	r2, r1
 8000988:	4013      	ands	r3, r2
 800098a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d100      	bne.n	8000994 <HAL_GPIO_Init+0x28>
 8000992:	e144      	b.n	8000c1e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	2b02      	cmp	r3, #2
 800099a:	d003      	beq.n	80009a4 <HAL_GPIO_Init+0x38>
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	2b12      	cmp	r3, #18
 80009a2:	d125      	bne.n	80009f0 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80009a4:	693b      	ldr	r3, [r7, #16]
 80009a6:	08da      	lsrs	r2, r3, #3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3208      	adds	r2, #8
 80009ac:	0092      	lsls	r2, r2, #2
 80009ae:	58d3      	ldr	r3, [r2, r3]
 80009b0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	2207      	movs	r2, #7
 80009b6:	4013      	ands	r3, r2
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	220f      	movs	r2, #15
 80009bc:	409a      	lsls	r2, r3
 80009be:	0013      	movs	r3, r2
 80009c0:	43da      	mvns	r2, r3
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	4013      	ands	r3, r2
 80009c6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	691b      	ldr	r3, [r3, #16]
 80009cc:	220f      	movs	r2, #15
 80009ce:	401a      	ands	r2, r3
 80009d0:	693b      	ldr	r3, [r7, #16]
 80009d2:	2107      	movs	r1, #7
 80009d4:	400b      	ands	r3, r1
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	409a      	lsls	r2, r3
 80009da:	0013      	movs	r3, r2
 80009dc:	697a      	ldr	r2, [r7, #20]
 80009de:	4313      	orrs	r3, r2
 80009e0:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80009e2:	693b      	ldr	r3, [r7, #16]
 80009e4:	08da      	lsrs	r2, r3, #3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	3208      	adds	r2, #8
 80009ea:	0092      	lsls	r2, r2, #2
 80009ec:	6979      	ldr	r1, [r7, #20]
 80009ee:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80009f6:	693b      	ldr	r3, [r7, #16]
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	2203      	movs	r2, #3
 80009fc:	409a      	lsls	r2, r3
 80009fe:	0013      	movs	r3, r2
 8000a00:	43da      	mvns	r2, r3
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	4013      	ands	r3, r2
 8000a06:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	2203      	movs	r2, #3
 8000a0e:	401a      	ands	r2, r3
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	409a      	lsls	r2, r3
 8000a16:	0013      	movs	r3, r2
 8000a18:	697a      	ldr	r2, [r7, #20]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	697a      	ldr	r2, [r7, #20]
 8000a22:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d00b      	beq.n	8000a44 <HAL_GPIO_Init+0xd8>
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	2b02      	cmp	r3, #2
 8000a32:	d007      	beq.n	8000a44 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a38:	2b11      	cmp	r3, #17
 8000a3a:	d003      	beq.n	8000a44 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	2b12      	cmp	r3, #18
 8000a42:	d130      	bne.n	8000aa6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	689b      	ldr	r3, [r3, #8]
 8000a48:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	005b      	lsls	r3, r3, #1
 8000a4e:	2203      	movs	r2, #3
 8000a50:	409a      	lsls	r2, r3
 8000a52:	0013      	movs	r3, r2
 8000a54:	43da      	mvns	r2, r3
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	4013      	ands	r3, r2
 8000a5a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	68da      	ldr	r2, [r3, #12]
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	409a      	lsls	r2, r3
 8000a66:	0013      	movs	r3, r2
 8000a68:	697a      	ldr	r2, [r7, #20]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	697a      	ldr	r2, [r7, #20]
 8000a72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	409a      	lsls	r2, r3
 8000a80:	0013      	movs	r3, r2
 8000a82:	43da      	mvns	r2, r3
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	4013      	ands	r3, r2
 8000a88:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	091b      	lsrs	r3, r3, #4
 8000a90:	2201      	movs	r2, #1
 8000a92:	401a      	ands	r2, r3
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	409a      	lsls	r2, r3
 8000a98:	0013      	movs	r3, r2
 8000a9a:	697a      	ldr	r2, [r7, #20]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	697a      	ldr	r2, [r7, #20]
 8000aa4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	2b03      	cmp	r3, #3
 8000aac:	d017      	beq.n	8000ade <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	68db      	ldr	r3, [r3, #12]
 8000ab2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	2203      	movs	r2, #3
 8000aba:	409a      	lsls	r2, r3
 8000abc:	0013      	movs	r3, r2
 8000abe:	43da      	mvns	r2, r3
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	689a      	ldr	r2, [r3, #8]
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	409a      	lsls	r2, r3
 8000ad0:	0013      	movs	r3, r2
 8000ad2:	697a      	ldr	r2, [r7, #20]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	697a      	ldr	r2, [r7, #20]
 8000adc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685a      	ldr	r2, [r3, #4]
 8000ae2:	2380      	movs	r3, #128	@ 0x80
 8000ae4:	055b      	lsls	r3, r3, #21
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	d100      	bne.n	8000aec <HAL_GPIO_Init+0x180>
 8000aea:	e098      	b.n	8000c1e <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000aec:	4a53      	ldr	r2, [pc, #332]	@ (8000c3c <HAL_GPIO_Init+0x2d0>)
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	089b      	lsrs	r3, r3, #2
 8000af2:	3318      	adds	r3, #24
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	589b      	ldr	r3, [r3, r2]
 8000af8:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	2203      	movs	r2, #3
 8000afe:	4013      	ands	r3, r2
 8000b00:	00db      	lsls	r3, r3, #3
 8000b02:	220f      	movs	r2, #15
 8000b04:	409a      	lsls	r2, r3
 8000b06:	0013      	movs	r3, r2
 8000b08:	43da      	mvns	r2, r3
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	23a0      	movs	r3, #160	@ 0xa0
 8000b14:	05db      	lsls	r3, r3, #23
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d019      	beq.n	8000b4e <HAL_GPIO_Init+0x1e2>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4a48      	ldr	r2, [pc, #288]	@ (8000c40 <HAL_GPIO_Init+0x2d4>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d013      	beq.n	8000b4a <HAL_GPIO_Init+0x1de>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4a47      	ldr	r2, [pc, #284]	@ (8000c44 <HAL_GPIO_Init+0x2d8>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d00d      	beq.n	8000b46 <HAL_GPIO_Init+0x1da>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a46      	ldr	r2, [pc, #280]	@ (8000c48 <HAL_GPIO_Init+0x2dc>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d007      	beq.n	8000b42 <HAL_GPIO_Init+0x1d6>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4a45      	ldr	r2, [pc, #276]	@ (8000c4c <HAL_GPIO_Init+0x2e0>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d101      	bne.n	8000b3e <HAL_GPIO_Init+0x1d2>
 8000b3a:	2305      	movs	r3, #5
 8000b3c:	e008      	b.n	8000b50 <HAL_GPIO_Init+0x1e4>
 8000b3e:	2306      	movs	r3, #6
 8000b40:	e006      	b.n	8000b50 <HAL_GPIO_Init+0x1e4>
 8000b42:	2303      	movs	r3, #3
 8000b44:	e004      	b.n	8000b50 <HAL_GPIO_Init+0x1e4>
 8000b46:	2302      	movs	r3, #2
 8000b48:	e002      	b.n	8000b50 <HAL_GPIO_Init+0x1e4>
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e000      	b.n	8000b50 <HAL_GPIO_Init+0x1e4>
 8000b4e:	2300      	movs	r3, #0
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	2103      	movs	r1, #3
 8000b54:	400a      	ands	r2, r1
 8000b56:	00d2      	lsls	r2, r2, #3
 8000b58:	4093      	lsls	r3, r2
 8000b5a:	697a      	ldr	r2, [r7, #20]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000b60:	4936      	ldr	r1, [pc, #216]	@ (8000c3c <HAL_GPIO_Init+0x2d0>)
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	089b      	lsrs	r3, r3, #2
 8000b66:	3318      	adds	r3, #24
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	697a      	ldr	r2, [r7, #20]
 8000b6c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8000b6e:	4a33      	ldr	r2, [pc, #204]	@ (8000c3c <HAL_GPIO_Init+0x2d0>)
 8000b70:	2380      	movs	r3, #128	@ 0x80
 8000b72:	58d3      	ldr	r3, [r2, r3]
 8000b74:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	43da      	mvns	r2, r3
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685a      	ldr	r2, [r3, #4]
 8000b84:	2380      	movs	r3, #128	@ 0x80
 8000b86:	025b      	lsls	r3, r3, #9
 8000b88:	4013      	ands	r3, r2
 8000b8a:	d003      	beq.n	8000b94 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8000b8c:	697a      	ldr	r2, [r7, #20]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8000b94:	4929      	ldr	r1, [pc, #164]	@ (8000c3c <HAL_GPIO_Init+0x2d0>)
 8000b96:	2280      	movs	r2, #128	@ 0x80
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8000b9c:	4a27      	ldr	r2, [pc, #156]	@ (8000c3c <HAL_GPIO_Init+0x2d0>)
 8000b9e:	2384      	movs	r3, #132	@ 0x84
 8000ba0:	58d3      	ldr	r3, [r2, r3]
 8000ba2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	43da      	mvns	r2, r3
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	4013      	ands	r3, r2
 8000bac:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685a      	ldr	r2, [r3, #4]
 8000bb2:	2380      	movs	r3, #128	@ 0x80
 8000bb4:	029b      	lsls	r3, r3, #10
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	d003      	beq.n	8000bc2 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8000bba:	697a      	ldr	r2, [r7, #20]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8000bc2:	491e      	ldr	r1, [pc, #120]	@ (8000c3c <HAL_GPIO_Init+0x2d0>)
 8000bc4:	2284      	movs	r2, #132	@ 0x84
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000bca:	4b1c      	ldr	r3, [pc, #112]	@ (8000c3c <HAL_GPIO_Init+0x2d0>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	43da      	mvns	r2, r3
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685a      	ldr	r2, [r3, #4]
 8000bde:	2380      	movs	r3, #128	@ 0x80
 8000be0:	035b      	lsls	r3, r3, #13
 8000be2:	4013      	ands	r3, r2
 8000be4:	d003      	beq.n	8000bee <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8000be6:	697a      	ldr	r2, [r7, #20]
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000bee:	4b13      	ldr	r3, [pc, #76]	@ (8000c3c <HAL_GPIO_Init+0x2d0>)
 8000bf0:	697a      	ldr	r2, [r7, #20]
 8000bf2:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8000bf4:	4b11      	ldr	r3, [pc, #68]	@ (8000c3c <HAL_GPIO_Init+0x2d0>)
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	43da      	mvns	r2, r3
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	4013      	ands	r3, r2
 8000c02:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685a      	ldr	r2, [r3, #4]
 8000c08:	2380      	movs	r3, #128	@ 0x80
 8000c0a:	039b      	lsls	r3, r3, #14
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	d003      	beq.n	8000c18 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8000c10:	697a      	ldr	r2, [r7, #20]
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8000c18:	4b08      	ldr	r3, [pc, #32]	@ (8000c3c <HAL_GPIO_Init+0x2d0>)
 8000c1a:	697a      	ldr	r2, [r7, #20]
 8000c1c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	3301      	adds	r3, #1
 8000c22:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	40da      	lsrs	r2, r3
 8000c2c:	1e13      	subs	r3, r2, #0
 8000c2e:	d000      	beq.n	8000c32 <HAL_GPIO_Init+0x2c6>
 8000c30:	e6a4      	b.n	800097c <HAL_GPIO_Init+0x10>
  }
}
 8000c32:	46c0      	nop			@ (mov r8, r8)
 8000c34:	46c0      	nop			@ (mov r8, r8)
 8000c36:	46bd      	mov	sp, r7
 8000c38:	b006      	add	sp, #24
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40021800 	.word	0x40021800
 8000c40:	50000400 	.word	0x50000400
 8000c44:	50000800 	.word	0x50000800
 8000c48:	50000c00 	.word	0x50000c00
 8000c4c:	50001400 	.word	0x50001400

08000c50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	0008      	movs	r0, r1
 8000c5a:	0011      	movs	r1, r2
 8000c5c:	1cbb      	adds	r3, r7, #2
 8000c5e:	1c02      	adds	r2, r0, #0
 8000c60:	801a      	strh	r2, [r3, #0]
 8000c62:	1c7b      	adds	r3, r7, #1
 8000c64:	1c0a      	adds	r2, r1, #0
 8000c66:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c68:	1c7b      	adds	r3, r7, #1
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d004      	beq.n	8000c7a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c70:	1cbb      	adds	r3, r7, #2
 8000c72:	881a      	ldrh	r2, [r3, #0]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c78:	e003      	b.n	8000c82 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c7a:	1cbb      	adds	r3, r7, #2
 8000c7c:	881a      	ldrh	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000c82:	46c0      	nop			@ (mov r8, r8)
 8000c84:	46bd      	mov	sp, r7
 8000c86:	b002      	add	sp, #8
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32C0 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b084      	sub	sp, #16
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
 8000c92:	000a      	movs	r2, r1
 8000c94:	1cbb      	adds	r3, r7, #2
 8000c96:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	695b      	ldr	r3, [r3, #20]
 8000c9c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c9e:	1cbb      	adds	r3, r7, #2
 8000ca0:	881b      	ldrh	r3, [r3, #0]
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	041a      	lsls	r2, r3, #16
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	43db      	mvns	r3, r3
 8000cac:	1cb9      	adds	r1, r7, #2
 8000cae:	8809      	ldrh	r1, [r1, #0]
 8000cb0:	400b      	ands	r3, r1
 8000cb2:	431a      	orrs	r2, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	619a      	str	r2, [r3, #24]
}
 8000cb8:	46c0      	nop			@ (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	b004      	add	sp, #16
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d101      	bne.n	8000cd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e1d0      	b.n	8001074 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	4013      	ands	r3, r2
 8000cda:	d100      	bne.n	8000cde <HAL_RCC_OscConfig+0x1e>
 8000cdc:	e069      	b.n	8000db2 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000cde:	4bc8      	ldr	r3, [pc, #800]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	2238      	movs	r2, #56	@ 0x38
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	2b08      	cmp	r3, #8
 8000cec:	d105      	bne.n	8000cfa <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d15d      	bne.n	8000db2 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e1bc      	b.n	8001074 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	685a      	ldr	r2, [r3, #4]
 8000cfe:	2380      	movs	r3, #128	@ 0x80
 8000d00:	025b      	lsls	r3, r3, #9
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d107      	bne.n	8000d16 <HAL_RCC_OscConfig+0x56>
 8000d06:	4bbe      	ldr	r3, [pc, #760]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	4bbd      	ldr	r3, [pc, #756]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000d0c:	2180      	movs	r1, #128	@ 0x80
 8000d0e:	0249      	lsls	r1, r1, #9
 8000d10:	430a      	orrs	r2, r1
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	e020      	b.n	8000d58 <HAL_RCC_OscConfig+0x98>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685a      	ldr	r2, [r3, #4]
 8000d1a:	23a0      	movs	r3, #160	@ 0xa0
 8000d1c:	02db      	lsls	r3, r3, #11
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d10e      	bne.n	8000d40 <HAL_RCC_OscConfig+0x80>
 8000d22:	4bb7      	ldr	r3, [pc, #732]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	4bb6      	ldr	r3, [pc, #728]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000d28:	2180      	movs	r1, #128	@ 0x80
 8000d2a:	02c9      	lsls	r1, r1, #11
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	4bb3      	ldr	r3, [pc, #716]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	4bb2      	ldr	r3, [pc, #712]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000d36:	2180      	movs	r1, #128	@ 0x80
 8000d38:	0249      	lsls	r1, r1, #9
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	e00b      	b.n	8000d58 <HAL_RCC_OscConfig+0x98>
 8000d40:	4baf      	ldr	r3, [pc, #700]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4bae      	ldr	r3, [pc, #696]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000d46:	49af      	ldr	r1, [pc, #700]	@ (8001004 <HAL_RCC_OscConfig+0x344>)
 8000d48:	400a      	ands	r2, r1
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	4bac      	ldr	r3, [pc, #688]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	4bab      	ldr	r3, [pc, #684]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000d52:	49ad      	ldr	r1, [pc, #692]	@ (8001008 <HAL_RCC_OscConfig+0x348>)
 8000d54:	400a      	ands	r2, r1
 8000d56:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d014      	beq.n	8000d8a <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d60:	f7ff fd22 	bl	80007a8 <HAL_GetTick>
 8000d64:	0003      	movs	r3, r0
 8000d66:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d68:	e008      	b.n	8000d7c <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8000d6a:	f7ff fd1d 	bl	80007a8 <HAL_GetTick>
 8000d6e:	0002      	movs	r2, r0
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	2b64      	cmp	r3, #100	@ 0x64
 8000d76:	d901      	bls.n	8000d7c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	e17b      	b.n	8001074 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d7c:	4ba0      	ldr	r3, [pc, #640]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	2380      	movs	r3, #128	@ 0x80
 8000d82:	029b      	lsls	r3, r3, #10
 8000d84:	4013      	ands	r3, r2
 8000d86:	d0f0      	beq.n	8000d6a <HAL_RCC_OscConfig+0xaa>
 8000d88:	e013      	b.n	8000db2 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d8a:	f7ff fd0d 	bl	80007a8 <HAL_GetTick>
 8000d8e:	0003      	movs	r3, r0
 8000d90:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d92:	e008      	b.n	8000da6 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8000d94:	f7ff fd08 	bl	80007a8 <HAL_GetTick>
 8000d98:	0002      	movs	r2, r0
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	2b64      	cmp	r3, #100	@ 0x64
 8000da0:	d901      	bls.n	8000da6 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8000da2:	2303      	movs	r3, #3
 8000da4:	e166      	b.n	8001074 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000da6:	4b96      	ldr	r3, [pc, #600]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	2380      	movs	r3, #128	@ 0x80
 8000dac:	029b      	lsls	r3, r3, #10
 8000dae:	4013      	ands	r3, r2
 8000db0:	d1f0      	bne.n	8000d94 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2202      	movs	r2, #2
 8000db8:	4013      	ands	r3, r2
 8000dba:	d100      	bne.n	8000dbe <HAL_RCC_OscConfig+0xfe>
 8000dbc:	e086      	b.n	8000ecc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000dbe:	4b90      	ldr	r3, [pc, #576]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	2238      	movs	r2, #56	@ 0x38
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d12f      	bne.n	8000e2e <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d101      	bne.n	8000dda <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e14c      	b.n	8001074 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dda:	4b89      	ldr	r3, [pc, #548]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	4a8b      	ldr	r2, [pc, #556]	@ (800100c <HAL_RCC_OscConfig+0x34c>)
 8000de0:	4013      	ands	r3, r2
 8000de2:	0019      	movs	r1, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	695b      	ldr	r3, [r3, #20]
 8000de8:	021a      	lsls	r2, r3, #8
 8000dea:	4b85      	ldr	r3, [pc, #532]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000dec:	430a      	orrs	r2, r1
 8000dee:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d112      	bne.n	8000e1c <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000df6:	4b82      	ldr	r3, [pc, #520]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a85      	ldr	r2, [pc, #532]	@ (8001010 <HAL_RCC_OscConfig+0x350>)
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	0019      	movs	r1, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	691a      	ldr	r2, [r3, #16]
 8000e04:	4b7e      	ldr	r3, [pc, #504]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000e06:	430a      	orrs	r2, r1
 8000e08:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000e0a:	4b7d      	ldr	r3, [pc, #500]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	0adb      	lsrs	r3, r3, #11
 8000e10:	2207      	movs	r2, #7
 8000e12:	4013      	ands	r3, r2
 8000e14:	4a7f      	ldr	r2, [pc, #508]	@ (8001014 <HAL_RCC_OscConfig+0x354>)
 8000e16:	40da      	lsrs	r2, r3
 8000e18:	4b7f      	ldr	r3, [pc, #508]	@ (8001018 <HAL_RCC_OscConfig+0x358>)
 8000e1a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000e1c:	4b7f      	ldr	r3, [pc, #508]	@ (800101c <HAL_RCC_OscConfig+0x35c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	0018      	movs	r0, r3
 8000e22:	f7ff fc65 	bl	80006f0 <HAL_InitTick>
 8000e26:	1e03      	subs	r3, r0, #0
 8000e28:	d050      	beq.n	8000ecc <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e122      	b.n	8001074 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d030      	beq.n	8000e98 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000e36:	4b72      	ldr	r3, [pc, #456]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a75      	ldr	r2, [pc, #468]	@ (8001010 <HAL_RCC_OscConfig+0x350>)
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	0019      	movs	r1, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	691a      	ldr	r2, [r3, #16]
 8000e44:	4b6e      	ldr	r3, [pc, #440]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000e46:	430a      	orrs	r2, r1
 8000e48:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8000e4a:	4b6d      	ldr	r3, [pc, #436]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	4b6c      	ldr	r3, [pc, #432]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000e50:	2180      	movs	r1, #128	@ 0x80
 8000e52:	0049      	lsls	r1, r1, #1
 8000e54:	430a      	orrs	r2, r1
 8000e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e58:	f7ff fca6 	bl	80007a8 <HAL_GetTick>
 8000e5c:	0003      	movs	r3, r0
 8000e5e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e60:	e008      	b.n	8000e74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8000e62:	f7ff fca1 	bl	80007a8 <HAL_GetTick>
 8000e66:	0002      	movs	r2, r0
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d901      	bls.n	8000e74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e70:	2303      	movs	r3, #3
 8000e72:	e0ff      	b.n	8001074 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e74:	4b62      	ldr	r3, [pc, #392]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	2380      	movs	r3, #128	@ 0x80
 8000e7a:	00db      	lsls	r3, r3, #3
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	d0f0      	beq.n	8000e62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e80:	4b5f      	ldr	r3, [pc, #380]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	4a61      	ldr	r2, [pc, #388]	@ (800100c <HAL_RCC_OscConfig+0x34c>)
 8000e86:	4013      	ands	r3, r2
 8000e88:	0019      	movs	r1, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	021a      	lsls	r2, r3, #8
 8000e90:	4b5b      	ldr	r3, [pc, #364]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000e92:	430a      	orrs	r2, r1
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	e019      	b.n	8000ecc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8000e98:	4b59      	ldr	r3, [pc, #356]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b58      	ldr	r3, [pc, #352]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000e9e:	4960      	ldr	r1, [pc, #384]	@ (8001020 <HAL_RCC_OscConfig+0x360>)
 8000ea0:	400a      	ands	r2, r1
 8000ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ea4:	f7ff fc80 	bl	80007a8 <HAL_GetTick>
 8000ea8:	0003      	movs	r3, r0
 8000eaa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000eac:	e008      	b.n	8000ec0 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8000eae:	f7ff fc7b 	bl	80007a8 <HAL_GetTick>
 8000eb2:	0002      	movs	r2, r0
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d901      	bls.n	8000ec0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	e0d9      	b.n	8001074 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ec0:	4b4f      	ldr	r3, [pc, #316]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	2380      	movs	r3, #128	@ 0x80
 8000ec6:	00db      	lsls	r3, r3, #3
 8000ec8:	4013      	ands	r3, r2
 8000eca:	d1f0      	bne.n	8000eae <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2208      	movs	r2, #8
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	d042      	beq.n	8000f5c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8000ed6:	4b4a      	ldr	r3, [pc, #296]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	2238      	movs	r2, #56	@ 0x38
 8000edc:	4013      	ands	r3, r2
 8000ede:	2b18      	cmp	r3, #24
 8000ee0:	d105      	bne.n	8000eee <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d138      	bne.n	8000f5c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e0c2      	b.n	8001074 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	699b      	ldr	r3, [r3, #24]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d019      	beq.n	8000f2a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000ef6:	4b42      	ldr	r3, [pc, #264]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000ef8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000efa:	4b41      	ldr	r3, [pc, #260]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000efc:	2101      	movs	r1, #1
 8000efe:	430a      	orrs	r2, r1
 8000f00:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f02:	f7ff fc51 	bl	80007a8 <HAL_GetTick>
 8000f06:	0003      	movs	r3, r0
 8000f08:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8000f0a:	e008      	b.n	8000f1e <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8000f0c:	f7ff fc4c 	bl	80007a8 <HAL_GetTick>
 8000f10:	0002      	movs	r2, r0
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d901      	bls.n	8000f1e <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	e0aa      	b.n	8001074 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8000f1e:	4b38      	ldr	r3, [pc, #224]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000f20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f22:	2202      	movs	r2, #2
 8000f24:	4013      	ands	r3, r2
 8000f26:	d0f1      	beq.n	8000f0c <HAL_RCC_OscConfig+0x24c>
 8000f28:	e018      	b.n	8000f5c <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8000f2a:	4b35      	ldr	r3, [pc, #212]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000f2c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000f2e:	4b34      	ldr	r3, [pc, #208]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000f30:	2101      	movs	r1, #1
 8000f32:	438a      	bics	r2, r1
 8000f34:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f36:	f7ff fc37 	bl	80007a8 <HAL_GetTick>
 8000f3a:	0003      	movs	r3, r0
 8000f3c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8000f3e:	e008      	b.n	8000f52 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8000f40:	f7ff fc32 	bl	80007a8 <HAL_GetTick>
 8000f44:	0002      	movs	r2, r0
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d901      	bls.n	8000f52 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e090      	b.n	8001074 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8000f52:	4b2b      	ldr	r3, [pc, #172]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000f54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f56:	2202      	movs	r2, #2
 8000f58:	4013      	ands	r3, r2
 8000f5a:	d1f1      	bne.n	8000f40 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2204      	movs	r2, #4
 8000f62:	4013      	ands	r3, r2
 8000f64:	d100      	bne.n	8000f68 <HAL_RCC_OscConfig+0x2a8>
 8000f66:	e084      	b.n	8001072 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f68:	230f      	movs	r3, #15
 8000f6a:	18fb      	adds	r3, r7, r3
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8000f70:	4b23      	ldr	r3, [pc, #140]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	2238      	movs	r2, #56	@ 0x38
 8000f76:	4013      	ands	r3, r2
 8000f78:	2b20      	cmp	r3, #32
 8000f7a:	d106      	bne.n	8000f8a <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d000      	beq.n	8000f86 <HAL_RCC_OscConfig+0x2c6>
 8000f84:	e075      	b.n	8001072 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e074      	b.n	8001074 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d106      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x2e0>
 8000f92:	4b1b      	ldr	r3, [pc, #108]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000f94:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000f96:	4b1a      	ldr	r3, [pc, #104]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000f98:	2101      	movs	r1, #1
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000f9e:	e01c      	b.n	8000fda <HAL_RCC_OscConfig+0x31a>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	2b05      	cmp	r3, #5
 8000fa6:	d10c      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x302>
 8000fa8:	4b15      	ldr	r3, [pc, #84]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000faa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000fac:	4b14      	ldr	r3, [pc, #80]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000fae:	2104      	movs	r1, #4
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000fb4:	4b12      	ldr	r3, [pc, #72]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000fb6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000fb8:	4b11      	ldr	r3, [pc, #68]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000fba:	2101      	movs	r1, #1
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000fc0:	e00b      	b.n	8000fda <HAL_RCC_OscConfig+0x31a>
 8000fc2:	4b0f      	ldr	r3, [pc, #60]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000fc4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000fc8:	2101      	movs	r1, #1
 8000fca:	438a      	bics	r2, r1
 8000fcc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000fce:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000fd0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001000 <HAL_RCC_OscConfig+0x340>)
 8000fd4:	2104      	movs	r1, #4
 8000fd6:	438a      	bics	r2, r1
 8000fd8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d028      	beq.n	8001034 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fe2:	f7ff fbe1 	bl	80007a8 <HAL_GetTick>
 8000fe6:	0003      	movs	r3, r0
 8000fe8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8000fea:	e01d      	b.n	8001028 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fec:	f7ff fbdc 	bl	80007a8 <HAL_GetTick>
 8000ff0:	0002      	movs	r2, r0
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	4a0b      	ldr	r2, [pc, #44]	@ (8001024 <HAL_RCC_OscConfig+0x364>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d915      	bls.n	8001028 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e039      	b.n	8001074 <HAL_RCC_OscConfig+0x3b4>
 8001000:	40021000 	.word	0x40021000
 8001004:	fffeffff 	.word	0xfffeffff
 8001008:	fffbffff 	.word	0xfffbffff
 800100c:	ffff80ff 	.word	0xffff80ff
 8001010:	ffffc7ff 	.word	0xffffc7ff
 8001014:	02dc6c00 	.word	0x02dc6c00
 8001018:	20000000 	.word	0x20000000
 800101c:	20000004 	.word	0x20000004
 8001020:	fffffeff 	.word	0xfffffeff
 8001024:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001028:	4b14      	ldr	r3, [pc, #80]	@ (800107c <HAL_RCC_OscConfig+0x3bc>)
 800102a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800102c:	2202      	movs	r2, #2
 800102e:	4013      	ands	r3, r2
 8001030:	d0dc      	beq.n	8000fec <HAL_RCC_OscConfig+0x32c>
 8001032:	e013      	b.n	800105c <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001034:	f7ff fbb8 	bl	80007a8 <HAL_GetTick>
 8001038:	0003      	movs	r3, r0
 800103a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800103c:	e009      	b.n	8001052 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800103e:	f7ff fbb3 	bl	80007a8 <HAL_GetTick>
 8001042:	0002      	movs	r2, r0
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	4a0d      	ldr	r2, [pc, #52]	@ (8001080 <HAL_RCC_OscConfig+0x3c0>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d901      	bls.n	8001052 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	e010      	b.n	8001074 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001052:	4b0a      	ldr	r3, [pc, #40]	@ (800107c <HAL_RCC_OscConfig+0x3bc>)
 8001054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001056:	2202      	movs	r2, #2
 8001058:	4013      	ands	r3, r2
 800105a:	d1f0      	bne.n	800103e <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800105c:	230f      	movs	r3, #15
 800105e:	18fb      	adds	r3, r7, r3
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d105      	bne.n	8001072 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001066:	4b05      	ldr	r3, [pc, #20]	@ (800107c <HAL_RCC_OscConfig+0x3bc>)
 8001068:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800106a:	4b04      	ldr	r3, [pc, #16]	@ (800107c <HAL_RCC_OscConfig+0x3bc>)
 800106c:	4905      	ldr	r1, [pc, #20]	@ (8001084 <HAL_RCC_OscConfig+0x3c4>)
 800106e:	400a      	ands	r2, r1
 8001070:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 8001072:	2300      	movs	r3, #0
}
 8001074:	0018      	movs	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	b006      	add	sp, #24
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40021000 	.word	0x40021000
 8001080:	00001388 	.word	0x00001388
 8001084:	efffffff 	.word	0xefffffff

08001088 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d101      	bne.n	800109c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e0e9      	b.n	8001270 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800109c:	4b76      	ldr	r3, [pc, #472]	@ (8001278 <HAL_RCC_ClockConfig+0x1f0>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2207      	movs	r2, #7
 80010a2:	4013      	ands	r3, r2
 80010a4:	683a      	ldr	r2, [r7, #0]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d91e      	bls.n	80010e8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010aa:	4b73      	ldr	r3, [pc, #460]	@ (8001278 <HAL_RCC_ClockConfig+0x1f0>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2207      	movs	r2, #7
 80010b0:	4393      	bics	r3, r2
 80010b2:	0019      	movs	r1, r3
 80010b4:	4b70      	ldr	r3, [pc, #448]	@ (8001278 <HAL_RCC_ClockConfig+0x1f0>)
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	430a      	orrs	r2, r1
 80010ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80010bc:	f7ff fb74 	bl	80007a8 <HAL_GetTick>
 80010c0:	0003      	movs	r3, r0
 80010c2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80010c4:	e009      	b.n	80010da <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80010c6:	f7ff fb6f 	bl	80007a8 <HAL_GetTick>
 80010ca:	0002      	movs	r2, r0
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	4a6a      	ldr	r2, [pc, #424]	@ (800127c <HAL_RCC_ClockConfig+0x1f4>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d901      	bls.n	80010da <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e0ca      	b.n	8001270 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80010da:	4b67      	ldr	r3, [pc, #412]	@ (8001278 <HAL_RCC_ClockConfig+0x1f0>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2207      	movs	r2, #7
 80010e0:	4013      	ands	r3, r2
 80010e2:	683a      	ldr	r2, [r7, #0]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d1ee      	bne.n	80010c6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2202      	movs	r2, #2
 80010ee:	4013      	ands	r3, r2
 80010f0:	d017      	beq.n	8001122 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2204      	movs	r2, #4
 80010f8:	4013      	ands	r3, r2
 80010fa:	d008      	beq.n	800110e <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80010fc:	4b60      	ldr	r3, [pc, #384]	@ (8001280 <HAL_RCC_ClockConfig+0x1f8>)
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	4a60      	ldr	r2, [pc, #384]	@ (8001284 <HAL_RCC_ClockConfig+0x1fc>)
 8001102:	401a      	ands	r2, r3
 8001104:	4b5e      	ldr	r3, [pc, #376]	@ (8001280 <HAL_RCC_ClockConfig+0x1f8>)
 8001106:	21b0      	movs	r1, #176	@ 0xb0
 8001108:	0109      	lsls	r1, r1, #4
 800110a:	430a      	orrs	r2, r1
 800110c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800110e:	4b5c      	ldr	r3, [pc, #368]	@ (8001280 <HAL_RCC_ClockConfig+0x1f8>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	4a5d      	ldr	r2, [pc, #372]	@ (8001288 <HAL_RCC_ClockConfig+0x200>)
 8001114:	4013      	ands	r3, r2
 8001116:	0019      	movs	r1, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	68da      	ldr	r2, [r3, #12]
 800111c:	4b58      	ldr	r3, [pc, #352]	@ (8001280 <HAL_RCC_ClockConfig+0x1f8>)
 800111e:	430a      	orrs	r2, r1
 8001120:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2201      	movs	r2, #1
 8001128:	4013      	ands	r3, r2
 800112a:	d055      	beq.n	80011d8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 800112c:	4b54      	ldr	r3, [pc, #336]	@ (8001280 <HAL_RCC_ClockConfig+0x1f8>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	221c      	movs	r2, #28
 8001132:	4393      	bics	r3, r2
 8001134:	0019      	movs	r1, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	689a      	ldr	r2, [r3, #8]
 800113a:	4b51      	ldr	r3, [pc, #324]	@ (8001280 <HAL_RCC_ClockConfig+0x1f8>)
 800113c:	430a      	orrs	r2, r1
 800113e:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d107      	bne.n	8001158 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001148:	4b4d      	ldr	r3, [pc, #308]	@ (8001280 <HAL_RCC_ClockConfig+0x1f8>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	2380      	movs	r3, #128	@ 0x80
 800114e:	029b      	lsls	r3, r3, #10
 8001150:	4013      	ands	r3, r2
 8001152:	d11f      	bne.n	8001194 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e08b      	b.n	8001270 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d107      	bne.n	8001170 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001160:	4b47      	ldr	r3, [pc, #284]	@ (8001280 <HAL_RCC_ClockConfig+0x1f8>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	2380      	movs	r3, #128	@ 0x80
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	4013      	ands	r3, r2
 800116a:	d113      	bne.n	8001194 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e07f      	b.n	8001270 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2b03      	cmp	r3, #3
 8001176:	d106      	bne.n	8001186 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001178:	4b41      	ldr	r3, [pc, #260]	@ (8001280 <HAL_RCC_ClockConfig+0x1f8>)
 800117a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800117c:	2202      	movs	r2, #2
 800117e:	4013      	ands	r3, r2
 8001180:	d108      	bne.n	8001194 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e074      	b.n	8001270 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001186:	4b3e      	ldr	r3, [pc, #248]	@ (8001280 <HAL_RCC_ClockConfig+0x1f8>)
 8001188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800118a:	2202      	movs	r2, #2
 800118c:	4013      	ands	r3, r2
 800118e:	d101      	bne.n	8001194 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e06d      	b.n	8001270 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001194:	4b3a      	ldr	r3, [pc, #232]	@ (8001280 <HAL_RCC_ClockConfig+0x1f8>)
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	2207      	movs	r2, #7
 800119a:	4393      	bics	r3, r2
 800119c:	0019      	movs	r1, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	4b37      	ldr	r3, [pc, #220]	@ (8001280 <HAL_RCC_ClockConfig+0x1f8>)
 80011a4:	430a      	orrs	r2, r1
 80011a6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80011a8:	f7ff fafe 	bl	80007a8 <HAL_GetTick>
 80011ac:	0003      	movs	r3, r0
 80011ae:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011b0:	e009      	b.n	80011c6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80011b2:	f7ff faf9 	bl	80007a8 <HAL_GetTick>
 80011b6:	0002      	movs	r2, r0
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	4a2f      	ldr	r2, [pc, #188]	@ (800127c <HAL_RCC_ClockConfig+0x1f4>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e054      	b.n	8001270 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001280 <HAL_RCC_ClockConfig+0x1f8>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	2238      	movs	r2, #56	@ 0x38
 80011cc:	401a      	ands	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d1ec      	bne.n	80011b2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011d8:	4b27      	ldr	r3, [pc, #156]	@ (8001278 <HAL_RCC_ClockConfig+0x1f0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2207      	movs	r2, #7
 80011de:	4013      	ands	r3, r2
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d21e      	bcs.n	8001224 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011e6:	4b24      	ldr	r3, [pc, #144]	@ (8001278 <HAL_RCC_ClockConfig+0x1f0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2207      	movs	r2, #7
 80011ec:	4393      	bics	r3, r2
 80011ee:	0019      	movs	r1, r3
 80011f0:	4b21      	ldr	r3, [pc, #132]	@ (8001278 <HAL_RCC_ClockConfig+0x1f0>)
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	430a      	orrs	r2, r1
 80011f6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80011f8:	f7ff fad6 	bl	80007a8 <HAL_GetTick>
 80011fc:	0003      	movs	r3, r0
 80011fe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001200:	e009      	b.n	8001216 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001202:	f7ff fad1 	bl	80007a8 <HAL_GetTick>
 8001206:	0002      	movs	r2, r0
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	4a1b      	ldr	r2, [pc, #108]	@ (800127c <HAL_RCC_ClockConfig+0x1f4>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e02c      	b.n	8001270 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001216:	4b18      	ldr	r3, [pc, #96]	@ (8001278 <HAL_RCC_ClockConfig+0x1f0>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2207      	movs	r2, #7
 800121c:	4013      	ands	r3, r2
 800121e:	683a      	ldr	r2, [r7, #0]
 8001220:	429a      	cmp	r2, r3
 8001222:	d1ee      	bne.n	8001202 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2204      	movs	r2, #4
 800122a:	4013      	ands	r3, r2
 800122c:	d009      	beq.n	8001242 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800122e:	4b14      	ldr	r3, [pc, #80]	@ (8001280 <HAL_RCC_ClockConfig+0x1f8>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	4a16      	ldr	r2, [pc, #88]	@ (800128c <HAL_RCC_ClockConfig+0x204>)
 8001234:	4013      	ands	r3, r2
 8001236:	0019      	movs	r1, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	691a      	ldr	r2, [r3, #16]
 800123c:	4b10      	ldr	r3, [pc, #64]	@ (8001280 <HAL_RCC_ClockConfig+0x1f8>)
 800123e:	430a      	orrs	r2, r1
 8001240:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001242:	f000 f82b 	bl	800129c <HAL_RCC_GetSysClockFreq>
 8001246:	0001      	movs	r1, r0
 8001248:	4b0d      	ldr	r3, [pc, #52]	@ (8001280 <HAL_RCC_ClockConfig+0x1f8>)
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	0a1b      	lsrs	r3, r3, #8
 800124e:	220f      	movs	r2, #15
 8001250:	401a      	ands	r2, r3
 8001252:	4b0f      	ldr	r3, [pc, #60]	@ (8001290 <HAL_RCC_ClockConfig+0x208>)
 8001254:	0092      	lsls	r2, r2, #2
 8001256:	58d3      	ldr	r3, [r2, r3]
 8001258:	221f      	movs	r2, #31
 800125a:	4013      	ands	r3, r2
 800125c:	000a      	movs	r2, r1
 800125e:	40da      	lsrs	r2, r3
 8001260:	4b0c      	ldr	r3, [pc, #48]	@ (8001294 <HAL_RCC_ClockConfig+0x20c>)
 8001262:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001264:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <HAL_RCC_ClockConfig+0x210>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	0018      	movs	r0, r3
 800126a:	f7ff fa41 	bl	80006f0 <HAL_InitTick>
 800126e:	0003      	movs	r3, r0
}
 8001270:	0018      	movs	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	b004      	add	sp, #16
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40022000 	.word	0x40022000
 800127c:	00001388 	.word	0x00001388
 8001280:	40021000 	.word	0x40021000
 8001284:	ffff84ff 	.word	0xffff84ff
 8001288:	fffff0ff 	.word	0xfffff0ff
 800128c:	ffff8fff 	.word	0xffff8fff
 8001290:	0800269c 	.word	0x0800269c
 8001294:	20000000 	.word	0x20000000
 8001298:	20000004 	.word	0x20000004

0800129c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80012a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001314 <HAL_RCC_GetSysClockFreq+0x78>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	2238      	movs	r2, #56	@ 0x38
 80012a8:	4013      	ands	r3, r2
 80012aa:	d10f      	bne.n	80012cc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80012ac:	4b19      	ldr	r3, [pc, #100]	@ (8001314 <HAL_RCC_GetSysClockFreq+0x78>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	0adb      	lsrs	r3, r3, #11
 80012b2:	2207      	movs	r2, #7
 80012b4:	4013      	ands	r3, r2
 80012b6:	2201      	movs	r2, #1
 80012b8:	409a      	lsls	r2, r3
 80012ba:	0013      	movs	r3, r2
 80012bc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80012be:	6839      	ldr	r1, [r7, #0]
 80012c0:	4815      	ldr	r0, [pc, #84]	@ (8001318 <HAL_RCC_GetSysClockFreq+0x7c>)
 80012c2:	f7fe ff21 	bl	8000108 <__udivsi3>
 80012c6:	0003      	movs	r3, r0
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	e01e      	b.n	800130a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80012cc:	4b11      	ldr	r3, [pc, #68]	@ (8001314 <HAL_RCC_GetSysClockFreq+0x78>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	2238      	movs	r2, #56	@ 0x38
 80012d2:	4013      	ands	r3, r2
 80012d4:	2b08      	cmp	r3, #8
 80012d6:	d102      	bne.n	80012de <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80012d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001318 <HAL_RCC_GetSysClockFreq+0x7c>)
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	e015      	b.n	800130a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80012de:	4b0d      	ldr	r3, [pc, #52]	@ (8001314 <HAL_RCC_GetSysClockFreq+0x78>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	2238      	movs	r2, #56	@ 0x38
 80012e4:	4013      	ands	r3, r2
 80012e6:	2b20      	cmp	r3, #32
 80012e8:	d103      	bne.n	80012f2 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80012ea:	2380      	movs	r3, #128	@ 0x80
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	e00b      	b.n	800130a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80012f2:	4b08      	ldr	r3, [pc, #32]	@ (8001314 <HAL_RCC_GetSysClockFreq+0x78>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	2238      	movs	r2, #56	@ 0x38
 80012f8:	4013      	ands	r3, r2
 80012fa:	2b18      	cmp	r3, #24
 80012fc:	d103      	bne.n	8001306 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80012fe:	23fa      	movs	r3, #250	@ 0xfa
 8001300:	01db      	lsls	r3, r3, #7
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	e001      	b.n	800130a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8001306:	2300      	movs	r3, #0
 8001308:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 800130a:	687b      	ldr	r3, [r7, #4]
}
 800130c:	0018      	movs	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	b002      	add	sp, #8
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40021000 	.word	0x40021000
 8001318:	02dc6c00 	.word	0x02dc6c00

0800131c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001320:	4b02      	ldr	r3, [pc, #8]	@ (800132c <HAL_RCC_GetHCLKFreq+0x10>)
 8001322:	681b      	ldr	r3, [r3, #0]
}
 8001324:	0018      	movs	r0, r3
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	46c0      	nop			@ (mov r8, r8)
 800132c:	20000000 	.word	0x20000000

08001330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001334:	f7ff fff2 	bl	800131c <HAL_RCC_GetHCLKFreq>
 8001338:	0001      	movs	r1, r0
 800133a:	4b07      	ldr	r3, [pc, #28]	@ (8001358 <HAL_RCC_GetPCLK1Freq+0x28>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	0b1b      	lsrs	r3, r3, #12
 8001340:	2207      	movs	r2, #7
 8001342:	401a      	ands	r2, r3
 8001344:	4b05      	ldr	r3, [pc, #20]	@ (800135c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001346:	0092      	lsls	r2, r2, #2
 8001348:	58d3      	ldr	r3, [r2, r3]
 800134a:	221f      	movs	r2, #31
 800134c:	4013      	ands	r3, r2
 800134e:	40d9      	lsrs	r1, r3
 8001350:	000b      	movs	r3, r1
}
 8001352:	0018      	movs	r0, r3
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40021000 	.word	0x40021000
 800135c:	080026dc 	.word	0x080026dc

08001360 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e046      	b.n	8001400 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2288      	movs	r2, #136	@ 0x88
 8001376:	589b      	ldr	r3, [r3, r2]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d107      	bne.n	800138c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2284      	movs	r2, #132	@ 0x84
 8001380:	2100      	movs	r1, #0
 8001382:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	0018      	movs	r0, r3
 8001388:	f7ff f868 	bl	800045c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2288      	movs	r2, #136	@ 0x88
 8001390:	2124      	movs	r1, #36	@ 0x24
 8001392:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2101      	movs	r1, #1
 80013a0:	438a      	bics	r2, r1
 80013a2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	0018      	movs	r0, r3
 80013b0:	f000 fa4e 	bl	8001850 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	0018      	movs	r0, r3
 80013b8:	f000 f8cc 	bl	8001554 <UART_SetConfig>
 80013bc:	0003      	movs	r3, r0
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d101      	bne.n	80013c6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e01c      	b.n	8001400 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	490d      	ldr	r1, [pc, #52]	@ (8001408 <HAL_UART_Init+0xa8>)
 80013d2:	400a      	ands	r2, r1
 80013d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	689a      	ldr	r2, [r3, #8]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	212a      	movs	r1, #42	@ 0x2a
 80013e2:	438a      	bics	r2, r1
 80013e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2101      	movs	r1, #1
 80013f2:	430a      	orrs	r2, r1
 80013f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	0018      	movs	r0, r3
 80013fa:	f000 fadd 	bl	80019b8 <UART_CheckIdleState>
 80013fe:	0003      	movs	r3, r0
}
 8001400:	0018      	movs	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	b002      	add	sp, #8
 8001406:	bd80      	pop	{r7, pc}
 8001408:	ffffb7ff 	.word	0xffffb7ff

0800140c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08a      	sub	sp, #40	@ 0x28
 8001410:	af02      	add	r7, sp, #8
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	603b      	str	r3, [r7, #0]
 8001418:	1dbb      	adds	r3, r7, #6
 800141a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2288      	movs	r2, #136	@ 0x88
 8001420:	589b      	ldr	r3, [r3, r2]
 8001422:	2b20      	cmp	r3, #32
 8001424:	d000      	beq.n	8001428 <HAL_UART_Transmit+0x1c>
 8001426:	e090      	b.n	800154a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <HAL_UART_Transmit+0x2a>
 800142e:	1dbb      	adds	r3, r7, #6
 8001430:	881b      	ldrh	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e088      	b.n	800154c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	2380      	movs	r3, #128	@ 0x80
 8001440:	015b      	lsls	r3, r3, #5
 8001442:	429a      	cmp	r2, r3
 8001444:	d109      	bne.n	800145a <HAL_UART_Transmit+0x4e>
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d105      	bne.n	800145a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	2201      	movs	r2, #1
 8001452:	4013      	ands	r3, r2
 8001454:	d001      	beq.n	800145a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e078      	b.n	800154c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2290      	movs	r2, #144	@ 0x90
 800145e:	2100      	movs	r1, #0
 8001460:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2288      	movs	r2, #136	@ 0x88
 8001466:	2121      	movs	r1, #33	@ 0x21
 8001468:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800146a:	f7ff f99d 	bl	80007a8 <HAL_GetTick>
 800146e:	0003      	movs	r3, r0
 8001470:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	1dba      	adds	r2, r7, #6
 8001476:	2154      	movs	r1, #84	@ 0x54
 8001478:	8812      	ldrh	r2, [r2, #0]
 800147a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	1dba      	adds	r2, r7, #6
 8001480:	2156      	movs	r1, #86	@ 0x56
 8001482:	8812      	ldrh	r2, [r2, #0]
 8001484:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	689a      	ldr	r2, [r3, #8]
 800148a:	2380      	movs	r3, #128	@ 0x80
 800148c:	015b      	lsls	r3, r3, #5
 800148e:	429a      	cmp	r2, r3
 8001490:	d108      	bne.n	80014a4 <HAL_UART_Transmit+0x98>
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d104      	bne.n	80014a4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	61bb      	str	r3, [r7, #24]
 80014a2:	e003      	b.n	80014ac <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80014ac:	e030      	b.n	8001510 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80014ae:	697a      	ldr	r2, [r7, #20]
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	0013      	movs	r3, r2
 80014b8:	2200      	movs	r2, #0
 80014ba:	2180      	movs	r1, #128	@ 0x80
 80014bc:	f000 fb26 	bl	8001b0c <UART_WaitOnFlagUntilTimeout>
 80014c0:	1e03      	subs	r3, r0, #0
 80014c2:	d005      	beq.n	80014d0 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2288      	movs	r2, #136	@ 0x88
 80014c8:	2120      	movs	r1, #32
 80014ca:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e03d      	b.n	800154c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d10b      	bne.n	80014ee <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	881b      	ldrh	r3, [r3, #0]
 80014da:	001a      	movs	r2, r3
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	05d2      	lsls	r2, r2, #23
 80014e2:	0dd2      	lsrs	r2, r2, #23
 80014e4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	3302      	adds	r3, #2
 80014ea:	61bb      	str	r3, [r7, #24]
 80014ec:	e007      	b.n	80014fe <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	781a      	ldrb	r2, [r3, #0]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	3301      	adds	r3, #1
 80014fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2256      	movs	r2, #86	@ 0x56
 8001502:	5a9b      	ldrh	r3, [r3, r2]
 8001504:	b29b      	uxth	r3, r3
 8001506:	3b01      	subs	r3, #1
 8001508:	b299      	uxth	r1, r3
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2256      	movs	r2, #86	@ 0x56
 800150e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2256      	movs	r2, #86	@ 0x56
 8001514:	5a9b      	ldrh	r3, [r3, r2]
 8001516:	b29b      	uxth	r3, r3
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1c8      	bne.n	80014ae <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800151c:	697a      	ldr	r2, [r7, #20]
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	9300      	str	r3, [sp, #0]
 8001524:	0013      	movs	r3, r2
 8001526:	2200      	movs	r2, #0
 8001528:	2140      	movs	r1, #64	@ 0x40
 800152a:	f000 faef 	bl	8001b0c <UART_WaitOnFlagUntilTimeout>
 800152e:	1e03      	subs	r3, r0, #0
 8001530:	d005      	beq.n	800153e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2288      	movs	r2, #136	@ 0x88
 8001536:	2120      	movs	r1, #32
 8001538:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e006      	b.n	800154c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2288      	movs	r2, #136	@ 0x88
 8001542:	2120      	movs	r1, #32
 8001544:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8001546:	2300      	movs	r3, #0
 8001548:	e000      	b.n	800154c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800154a:	2302      	movs	r3, #2
  }
}
 800154c:	0018      	movs	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	b008      	add	sp, #32
 8001552:	bd80      	pop	{r7, pc}

08001554 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800155c:	231e      	movs	r3, #30
 800155e:	18fb      	adds	r3, r7, r3
 8001560:	2200      	movs	r2, #0
 8001562:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689a      	ldr	r2, [r3, #8]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	431a      	orrs	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	431a      	orrs	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	69db      	ldr	r3, [r3, #28]
 8001578:	4313      	orrs	r3, r2
 800157a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4aab      	ldr	r2, [pc, #684]	@ (8001830 <UART_SetConfig+0x2dc>)
 8001584:	4013      	ands	r3, r2
 8001586:	0019      	movs	r1, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	430a      	orrs	r2, r1
 8001590:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	4aa6      	ldr	r2, [pc, #664]	@ (8001834 <UART_SetConfig+0x2e0>)
 800159a:	4013      	ands	r3, r2
 800159c:	0019      	movs	r1, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	68da      	ldr	r2, [r3, #12]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	4a9d      	ldr	r2, [pc, #628]	@ (8001838 <UART_SetConfig+0x2e4>)
 80015c2:	4013      	ands	r3, r2
 80015c4:	0019      	movs	r1, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	697a      	ldr	r2, [r7, #20]
 80015cc:	430a      	orrs	r2, r1
 80015ce:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015d6:	220f      	movs	r2, #15
 80015d8:	4393      	bics	r3, r2
 80015da:	0019      	movs	r1, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	430a      	orrs	r2, r1
 80015e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a93      	ldr	r2, [pc, #588]	@ (800183c <UART_SetConfig+0x2e8>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d127      	bne.n	8001642 <UART_SetConfig+0xee>
 80015f2:	4b93      	ldr	r3, [pc, #588]	@ (8001840 <UART_SetConfig+0x2ec>)
 80015f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015f6:	2203      	movs	r2, #3
 80015f8:	4013      	ands	r3, r2
 80015fa:	2b03      	cmp	r3, #3
 80015fc:	d017      	beq.n	800162e <UART_SetConfig+0xda>
 80015fe:	d81b      	bhi.n	8001638 <UART_SetConfig+0xe4>
 8001600:	2b02      	cmp	r3, #2
 8001602:	d00a      	beq.n	800161a <UART_SetConfig+0xc6>
 8001604:	d818      	bhi.n	8001638 <UART_SetConfig+0xe4>
 8001606:	2b00      	cmp	r3, #0
 8001608:	d002      	beq.n	8001610 <UART_SetConfig+0xbc>
 800160a:	2b01      	cmp	r3, #1
 800160c:	d00a      	beq.n	8001624 <UART_SetConfig+0xd0>
 800160e:	e013      	b.n	8001638 <UART_SetConfig+0xe4>
 8001610:	231f      	movs	r3, #31
 8001612:	18fb      	adds	r3, r7, r3
 8001614:	2200      	movs	r2, #0
 8001616:	701a      	strb	r2, [r3, #0]
 8001618:	e021      	b.n	800165e <UART_SetConfig+0x10a>
 800161a:	231f      	movs	r3, #31
 800161c:	18fb      	adds	r3, r7, r3
 800161e:	2202      	movs	r2, #2
 8001620:	701a      	strb	r2, [r3, #0]
 8001622:	e01c      	b.n	800165e <UART_SetConfig+0x10a>
 8001624:	231f      	movs	r3, #31
 8001626:	18fb      	adds	r3, r7, r3
 8001628:	2204      	movs	r2, #4
 800162a:	701a      	strb	r2, [r3, #0]
 800162c:	e017      	b.n	800165e <UART_SetConfig+0x10a>
 800162e:	231f      	movs	r3, #31
 8001630:	18fb      	adds	r3, r7, r3
 8001632:	2208      	movs	r2, #8
 8001634:	701a      	strb	r2, [r3, #0]
 8001636:	e012      	b.n	800165e <UART_SetConfig+0x10a>
 8001638:	231f      	movs	r3, #31
 800163a:	18fb      	adds	r3, r7, r3
 800163c:	2210      	movs	r2, #16
 800163e:	701a      	strb	r2, [r3, #0]
 8001640:	e00d      	b.n	800165e <UART_SetConfig+0x10a>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a7f      	ldr	r2, [pc, #508]	@ (8001844 <UART_SetConfig+0x2f0>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d104      	bne.n	8001656 <UART_SetConfig+0x102>
 800164c:	231f      	movs	r3, #31
 800164e:	18fb      	adds	r3, r7, r3
 8001650:	2200      	movs	r2, #0
 8001652:	701a      	strb	r2, [r3, #0]
 8001654:	e003      	b.n	800165e <UART_SetConfig+0x10a>
 8001656:	231f      	movs	r3, #31
 8001658:	18fb      	adds	r3, r7, r3
 800165a:	2210      	movs	r2, #16
 800165c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	69da      	ldr	r2, [r3, #28]
 8001662:	2380      	movs	r3, #128	@ 0x80
 8001664:	021b      	lsls	r3, r3, #8
 8001666:	429a      	cmp	r2, r3
 8001668:	d000      	beq.n	800166c <UART_SetConfig+0x118>
 800166a:	e06f      	b.n	800174c <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 800166c:	231f      	movs	r3, #31
 800166e:	18fb      	adds	r3, r7, r3
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b08      	cmp	r3, #8
 8001674:	d01f      	beq.n	80016b6 <UART_SetConfig+0x162>
 8001676:	dc22      	bgt.n	80016be <UART_SetConfig+0x16a>
 8001678:	2b04      	cmp	r3, #4
 800167a:	d017      	beq.n	80016ac <UART_SetConfig+0x158>
 800167c:	dc1f      	bgt.n	80016be <UART_SetConfig+0x16a>
 800167e:	2b00      	cmp	r3, #0
 8001680:	d002      	beq.n	8001688 <UART_SetConfig+0x134>
 8001682:	2b02      	cmp	r3, #2
 8001684:	d005      	beq.n	8001692 <UART_SetConfig+0x13e>
 8001686:	e01a      	b.n	80016be <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001688:	f7ff fe52 	bl	8001330 <HAL_RCC_GetPCLK1Freq>
 800168c:	0003      	movs	r3, r0
 800168e:	61bb      	str	r3, [r7, #24]
        break;
 8001690:	e01c      	b.n	80016cc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8001692:	4b6b      	ldr	r3, [pc, #428]	@ (8001840 <UART_SetConfig+0x2ec>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	095b      	lsrs	r3, r3, #5
 8001698:	2207      	movs	r2, #7
 800169a:	4013      	ands	r3, r2
 800169c:	3301      	adds	r3, #1
 800169e:	0019      	movs	r1, r3
 80016a0:	4869      	ldr	r0, [pc, #420]	@ (8001848 <UART_SetConfig+0x2f4>)
 80016a2:	f7fe fd31 	bl	8000108 <__udivsi3>
 80016a6:	0003      	movs	r3, r0
 80016a8:	61bb      	str	r3, [r7, #24]
        break;
 80016aa:	e00f      	b.n	80016cc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80016ac:	f7ff fdf6 	bl	800129c <HAL_RCC_GetSysClockFreq>
 80016b0:	0003      	movs	r3, r0
 80016b2:	61bb      	str	r3, [r7, #24]
        break;
 80016b4:	e00a      	b.n	80016cc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80016b6:	2380      	movs	r3, #128	@ 0x80
 80016b8:	021b      	lsls	r3, r3, #8
 80016ba:	61bb      	str	r3, [r7, #24]
        break;
 80016bc:	e006      	b.n	80016cc <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 80016be:	2300      	movs	r3, #0
 80016c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80016c2:	231e      	movs	r3, #30
 80016c4:	18fb      	adds	r3, r7, r3
 80016c6:	2201      	movs	r2, #1
 80016c8:	701a      	strb	r2, [r3, #0]
        break;
 80016ca:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d100      	bne.n	80016d4 <UART_SetConfig+0x180>
 80016d2:	e097      	b.n	8001804 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016d8:	4b5c      	ldr	r3, [pc, #368]	@ (800184c <UART_SetConfig+0x2f8>)
 80016da:	0052      	lsls	r2, r2, #1
 80016dc:	5ad3      	ldrh	r3, [r2, r3]
 80016de:	0019      	movs	r1, r3
 80016e0:	69b8      	ldr	r0, [r7, #24]
 80016e2:	f7fe fd11 	bl	8000108 <__udivsi3>
 80016e6:	0003      	movs	r3, r0
 80016e8:	005a      	lsls	r2, r3, #1
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	085b      	lsrs	r3, r3, #1
 80016f0:	18d2      	adds	r2, r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	0019      	movs	r1, r3
 80016f8:	0010      	movs	r0, r2
 80016fa:	f7fe fd05 	bl	8000108 <__udivsi3>
 80016fe:	0003      	movs	r3, r0
 8001700:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	2b0f      	cmp	r3, #15
 8001706:	d91c      	bls.n	8001742 <UART_SetConfig+0x1ee>
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	2380      	movs	r3, #128	@ 0x80
 800170c:	025b      	lsls	r3, r3, #9
 800170e:	429a      	cmp	r2, r3
 8001710:	d217      	bcs.n	8001742 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	b29a      	uxth	r2, r3
 8001716:	200e      	movs	r0, #14
 8001718:	183b      	adds	r3, r7, r0
 800171a:	210f      	movs	r1, #15
 800171c:	438a      	bics	r2, r1
 800171e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	085b      	lsrs	r3, r3, #1
 8001724:	b29b      	uxth	r3, r3
 8001726:	2207      	movs	r2, #7
 8001728:	4013      	ands	r3, r2
 800172a:	b299      	uxth	r1, r3
 800172c:	183b      	adds	r3, r7, r0
 800172e:	183a      	adds	r2, r7, r0
 8001730:	8812      	ldrh	r2, [r2, #0]
 8001732:	430a      	orrs	r2, r1
 8001734:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	183a      	adds	r2, r7, r0
 800173c:	8812      	ldrh	r2, [r2, #0]
 800173e:	60da      	str	r2, [r3, #12]
 8001740:	e060      	b.n	8001804 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8001742:	231e      	movs	r3, #30
 8001744:	18fb      	adds	r3, r7, r3
 8001746:	2201      	movs	r2, #1
 8001748:	701a      	strb	r2, [r3, #0]
 800174a:	e05b      	b.n	8001804 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800174c:	231f      	movs	r3, #31
 800174e:	18fb      	adds	r3, r7, r3
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b08      	cmp	r3, #8
 8001754:	d01f      	beq.n	8001796 <UART_SetConfig+0x242>
 8001756:	dc22      	bgt.n	800179e <UART_SetConfig+0x24a>
 8001758:	2b04      	cmp	r3, #4
 800175a:	d017      	beq.n	800178c <UART_SetConfig+0x238>
 800175c:	dc1f      	bgt.n	800179e <UART_SetConfig+0x24a>
 800175e:	2b00      	cmp	r3, #0
 8001760:	d002      	beq.n	8001768 <UART_SetConfig+0x214>
 8001762:	2b02      	cmp	r3, #2
 8001764:	d005      	beq.n	8001772 <UART_SetConfig+0x21e>
 8001766:	e01a      	b.n	800179e <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001768:	f7ff fde2 	bl	8001330 <HAL_RCC_GetPCLK1Freq>
 800176c:	0003      	movs	r3, r0
 800176e:	61bb      	str	r3, [r7, #24]
        break;
 8001770:	e01c      	b.n	80017ac <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8001772:	4b33      	ldr	r3, [pc, #204]	@ (8001840 <UART_SetConfig+0x2ec>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	095b      	lsrs	r3, r3, #5
 8001778:	2207      	movs	r2, #7
 800177a:	4013      	ands	r3, r2
 800177c:	3301      	adds	r3, #1
 800177e:	0019      	movs	r1, r3
 8001780:	4831      	ldr	r0, [pc, #196]	@ (8001848 <UART_SetConfig+0x2f4>)
 8001782:	f7fe fcc1 	bl	8000108 <__udivsi3>
 8001786:	0003      	movs	r3, r0
 8001788:	61bb      	str	r3, [r7, #24]
        break;
 800178a:	e00f      	b.n	80017ac <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800178c:	f7ff fd86 	bl	800129c <HAL_RCC_GetSysClockFreq>
 8001790:	0003      	movs	r3, r0
 8001792:	61bb      	str	r3, [r7, #24]
        break;
 8001794:	e00a      	b.n	80017ac <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001796:	2380      	movs	r3, #128	@ 0x80
 8001798:	021b      	lsls	r3, r3, #8
 800179a:	61bb      	str	r3, [r7, #24]
        break;
 800179c:	e006      	b.n	80017ac <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 800179e:	2300      	movs	r3, #0
 80017a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80017a2:	231e      	movs	r3, #30
 80017a4:	18fb      	adds	r3, r7, r3
 80017a6:	2201      	movs	r2, #1
 80017a8:	701a      	strb	r2, [r3, #0]
        break;
 80017aa:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d028      	beq.n	8001804 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017b6:	4b25      	ldr	r3, [pc, #148]	@ (800184c <UART_SetConfig+0x2f8>)
 80017b8:	0052      	lsls	r2, r2, #1
 80017ba:	5ad3      	ldrh	r3, [r2, r3]
 80017bc:	0019      	movs	r1, r3
 80017be:	69b8      	ldr	r0, [r7, #24]
 80017c0:	f7fe fca2 	bl	8000108 <__udivsi3>
 80017c4:	0003      	movs	r3, r0
 80017c6:	001a      	movs	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	085b      	lsrs	r3, r3, #1
 80017ce:	18d2      	adds	r2, r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	0019      	movs	r1, r3
 80017d6:	0010      	movs	r0, r2
 80017d8:	f7fe fc96 	bl	8000108 <__udivsi3>
 80017dc:	0003      	movs	r3, r0
 80017de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	2b0f      	cmp	r3, #15
 80017e4:	d90a      	bls.n	80017fc <UART_SetConfig+0x2a8>
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	2380      	movs	r3, #128	@ 0x80
 80017ea:	025b      	lsls	r3, r3, #9
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d205      	bcs.n	80017fc <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	e003      	b.n	8001804 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80017fc:	231e      	movs	r3, #30
 80017fe:	18fb      	adds	r3, r7, r3
 8001800:	2201      	movs	r2, #1
 8001802:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	226a      	movs	r2, #106	@ 0x6a
 8001808:	2101      	movs	r1, #1
 800180a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2268      	movs	r2, #104	@ 0x68
 8001810:	2101      	movs	r1, #1
 8001812:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8001820:	231e      	movs	r3, #30
 8001822:	18fb      	adds	r3, r7, r3
 8001824:	781b      	ldrb	r3, [r3, #0]
}
 8001826:	0018      	movs	r0, r3
 8001828:	46bd      	mov	sp, r7
 800182a:	b008      	add	sp, #32
 800182c:	bd80      	pop	{r7, pc}
 800182e:	46c0      	nop			@ (mov r8, r8)
 8001830:	cfff69f3 	.word	0xcfff69f3
 8001834:	ffffcfff 	.word	0xffffcfff
 8001838:	11fff4ff 	.word	0x11fff4ff
 800183c:	40013800 	.word	0x40013800
 8001840:	40021000 	.word	0x40021000
 8001844:	40004400 	.word	0x40004400
 8001848:	02dc6c00 	.word	0x02dc6c00
 800184c:	080026fc 	.word	0x080026fc

08001850 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800185c:	2208      	movs	r2, #8
 800185e:	4013      	ands	r3, r2
 8001860:	d00b      	beq.n	800187a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	4a4a      	ldr	r2, [pc, #296]	@ (8001994 <UART_AdvFeatureConfig+0x144>)
 800186a:	4013      	ands	r3, r2
 800186c:	0019      	movs	r1, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800187e:	2201      	movs	r2, #1
 8001880:	4013      	ands	r3, r2
 8001882:	d00b      	beq.n	800189c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	4a43      	ldr	r2, [pc, #268]	@ (8001998 <UART_AdvFeatureConfig+0x148>)
 800188c:	4013      	ands	r3, r2
 800188e:	0019      	movs	r1, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	430a      	orrs	r2, r1
 800189a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018a0:	2202      	movs	r2, #2
 80018a2:	4013      	ands	r3, r2
 80018a4:	d00b      	beq.n	80018be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	4a3b      	ldr	r2, [pc, #236]	@ (800199c <UART_AdvFeatureConfig+0x14c>)
 80018ae:	4013      	ands	r3, r2
 80018b0:	0019      	movs	r1, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	430a      	orrs	r2, r1
 80018bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018c2:	2204      	movs	r2, #4
 80018c4:	4013      	ands	r3, r2
 80018c6:	d00b      	beq.n	80018e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	4a34      	ldr	r2, [pc, #208]	@ (80019a0 <UART_AdvFeatureConfig+0x150>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	0019      	movs	r1, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e4:	2210      	movs	r2, #16
 80018e6:	4013      	ands	r3, r2
 80018e8:	d00b      	beq.n	8001902 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	4a2c      	ldr	r2, [pc, #176]	@ (80019a4 <UART_AdvFeatureConfig+0x154>)
 80018f2:	4013      	ands	r3, r2
 80018f4:	0019      	movs	r1, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	430a      	orrs	r2, r1
 8001900:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001906:	2220      	movs	r2, #32
 8001908:	4013      	ands	r3, r2
 800190a:	d00b      	beq.n	8001924 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	4a25      	ldr	r2, [pc, #148]	@ (80019a8 <UART_AdvFeatureConfig+0x158>)
 8001914:	4013      	ands	r3, r2
 8001916:	0019      	movs	r1, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	430a      	orrs	r2, r1
 8001922:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001928:	2240      	movs	r2, #64	@ 0x40
 800192a:	4013      	ands	r3, r2
 800192c:	d01d      	beq.n	800196a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	4a1d      	ldr	r2, [pc, #116]	@ (80019ac <UART_AdvFeatureConfig+0x15c>)
 8001936:	4013      	ands	r3, r2
 8001938:	0019      	movs	r1, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	430a      	orrs	r2, r1
 8001944:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800194a:	2380      	movs	r3, #128	@ 0x80
 800194c:	035b      	lsls	r3, r3, #13
 800194e:	429a      	cmp	r2, r3
 8001950:	d10b      	bne.n	800196a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	4a15      	ldr	r2, [pc, #84]	@ (80019b0 <UART_AdvFeatureConfig+0x160>)
 800195a:	4013      	ands	r3, r2
 800195c:	0019      	movs	r1, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	430a      	orrs	r2, r1
 8001968:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800196e:	2280      	movs	r2, #128	@ 0x80
 8001970:	4013      	ands	r3, r2
 8001972:	d00b      	beq.n	800198c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	4a0e      	ldr	r2, [pc, #56]	@ (80019b4 <UART_AdvFeatureConfig+0x164>)
 800197c:	4013      	ands	r3, r2
 800197e:	0019      	movs	r1, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	430a      	orrs	r2, r1
 800198a:	605a      	str	r2, [r3, #4]
  }
}
 800198c:	46c0      	nop			@ (mov r8, r8)
 800198e:	46bd      	mov	sp, r7
 8001990:	b002      	add	sp, #8
 8001992:	bd80      	pop	{r7, pc}
 8001994:	ffff7fff 	.word	0xffff7fff
 8001998:	fffdffff 	.word	0xfffdffff
 800199c:	fffeffff 	.word	0xfffeffff
 80019a0:	fffbffff 	.word	0xfffbffff
 80019a4:	ffffefff 	.word	0xffffefff
 80019a8:	ffffdfff 	.word	0xffffdfff
 80019ac:	ffefffff 	.word	0xffefffff
 80019b0:	ff9fffff 	.word	0xff9fffff
 80019b4:	fff7ffff 	.word	0xfff7ffff

080019b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b092      	sub	sp, #72	@ 0x48
 80019bc:	af02      	add	r7, sp, #8
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2290      	movs	r2, #144	@ 0x90
 80019c4:	2100      	movs	r1, #0
 80019c6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80019c8:	f7fe feee 	bl	80007a8 <HAL_GetTick>
 80019cc:	0003      	movs	r3, r0
 80019ce:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2208      	movs	r2, #8
 80019d8:	4013      	ands	r3, r2
 80019da:	2b08      	cmp	r3, #8
 80019dc:	d12d      	bne.n	8001a3a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80019de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019e0:	2280      	movs	r2, #128	@ 0x80
 80019e2:	0391      	lsls	r1, r2, #14
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	4a47      	ldr	r2, [pc, #284]	@ (8001b04 <UART_CheckIdleState+0x14c>)
 80019e8:	9200      	str	r2, [sp, #0]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f000 f88e 	bl	8001b0c <UART_WaitOnFlagUntilTimeout>
 80019f0:	1e03      	subs	r3, r0, #0
 80019f2:	d022      	beq.n	8001a3a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80019f4:	f3ef 8310 	mrs	r3, PRIMASK
 80019f8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80019fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80019fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019fe:	2301      	movs	r3, #1
 8001a00:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a04:	f383 8810 	msr	PRIMASK, r3
}
 8001a08:	46c0      	nop			@ (mov r8, r8)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2180      	movs	r1, #128	@ 0x80
 8001a16:	438a      	bics	r2, r1
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a20:	f383 8810 	msr	PRIMASK, r3
}
 8001a24:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2288      	movs	r2, #136	@ 0x88
 8001a2a:	2120      	movs	r1, #32
 8001a2c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2284      	movs	r2, #132	@ 0x84
 8001a32:	2100      	movs	r1, #0
 8001a34:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e060      	b.n	8001afc <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2204      	movs	r2, #4
 8001a42:	4013      	ands	r3, r2
 8001a44:	2b04      	cmp	r3, #4
 8001a46:	d146      	bne.n	8001ad6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001a48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a4a:	2280      	movs	r2, #128	@ 0x80
 8001a4c:	03d1      	lsls	r1, r2, #15
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	4a2c      	ldr	r2, [pc, #176]	@ (8001b04 <UART_CheckIdleState+0x14c>)
 8001a52:	9200      	str	r2, [sp, #0]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f000 f859 	bl	8001b0c <UART_WaitOnFlagUntilTimeout>
 8001a5a:	1e03      	subs	r3, r0, #0
 8001a5c:	d03b      	beq.n	8001ad6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001a5e:	f3ef 8310 	mrs	r3, PRIMASK
 8001a62:	60fb      	str	r3, [r7, #12]
  return(result);
 8001a64:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8001a66:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a68:	2301      	movs	r3, #1
 8001a6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	f383 8810 	msr	PRIMASK, r3
}
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4922      	ldr	r1, [pc, #136]	@ (8001b08 <UART_CheckIdleState+0x150>)
 8001a80:	400a      	ands	r2, r1
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a86:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	f383 8810 	msr	PRIMASK, r3
}
 8001a8e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001a90:	f3ef 8310 	mrs	r3, PRIMASK
 8001a94:	61bb      	str	r3, [r7, #24]
  return(result);
 8001a96:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a98:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	f383 8810 	msr	PRIMASK, r3
}
 8001aa4:	46c0      	nop			@ (mov r8, r8)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	438a      	bics	r2, r1
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ab8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001aba:	6a3b      	ldr	r3, [r7, #32]
 8001abc:	f383 8810 	msr	PRIMASK, r3
}
 8001ac0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	228c      	movs	r2, #140	@ 0x8c
 8001ac6:	2120      	movs	r1, #32
 8001ac8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2284      	movs	r2, #132	@ 0x84
 8001ace:	2100      	movs	r1, #0
 8001ad0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e012      	b.n	8001afc <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2288      	movs	r2, #136	@ 0x88
 8001ada:	2120      	movs	r1, #32
 8001adc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	228c      	movs	r2, #140	@ 0x8c
 8001ae2:	2120      	movs	r1, #32
 8001ae4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2284      	movs	r2, #132	@ 0x84
 8001af6:	2100      	movs	r1, #0
 8001af8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	0018      	movs	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	b010      	add	sp, #64	@ 0x40
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	01ffffff 	.word	0x01ffffff
 8001b08:	fffffedf 	.word	0xfffffedf

08001b0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	603b      	str	r3, [r7, #0]
 8001b18:	1dfb      	adds	r3, r7, #7
 8001b1a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b1c:	e04b      	b.n	8001bb6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	3301      	adds	r3, #1
 8001b22:	d048      	beq.n	8001bb6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b24:	f7fe fe40 	bl	80007a8 <HAL_GetTick>
 8001b28:	0002      	movs	r2, r0
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d302      	bcc.n	8001b3a <UART_WaitOnFlagUntilTimeout+0x2e>
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e04b      	b.n	8001bd6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2204      	movs	r2, #4
 8001b46:	4013      	ands	r3, r2
 8001b48:	d035      	beq.n	8001bb6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	69db      	ldr	r3, [r3, #28]
 8001b50:	2208      	movs	r2, #8
 8001b52:	4013      	ands	r3, r2
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	d111      	bne.n	8001b7c <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2208      	movs	r2, #8
 8001b5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	0018      	movs	r0, r3
 8001b64:	f000 f83c 	bl	8001be0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2290      	movs	r2, #144	@ 0x90
 8001b6c:	2108      	movs	r1, #8
 8001b6e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2284      	movs	r2, #132	@ 0x84
 8001b74:	2100      	movs	r1, #0
 8001b76:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e02c      	b.n	8001bd6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	69da      	ldr	r2, [r3, #28]
 8001b82:	2380      	movs	r3, #128	@ 0x80
 8001b84:	011b      	lsls	r3, r3, #4
 8001b86:	401a      	ands	r2, r3
 8001b88:	2380      	movs	r3, #128	@ 0x80
 8001b8a:	011b      	lsls	r3, r3, #4
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d112      	bne.n	8001bb6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2280      	movs	r2, #128	@ 0x80
 8001b96:	0112      	lsls	r2, r2, #4
 8001b98:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	f000 f81f 	bl	8001be0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2290      	movs	r2, #144	@ 0x90
 8001ba6:	2120      	movs	r1, #32
 8001ba8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2284      	movs	r2, #132	@ 0x84
 8001bae:	2100      	movs	r1, #0
 8001bb0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e00f      	b.n	8001bd6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	68ba      	ldr	r2, [r7, #8]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	68ba      	ldr	r2, [r7, #8]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	425a      	negs	r2, r3
 8001bc6:	4153      	adcs	r3, r2
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	001a      	movs	r2, r3
 8001bcc:	1dfb      	adds	r3, r7, #7
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d0a4      	beq.n	8001b1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	b004      	add	sp, #16
 8001bdc:	bd80      	pop	{r7, pc}
	...

08001be0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08e      	sub	sp, #56	@ 0x38
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001be8:	f3ef 8310 	mrs	r3, PRIMASK
 8001bec:	617b      	str	r3, [r7, #20]
  return(result);
 8001bee:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8001bf0:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	f383 8810 	msr	PRIMASK, r3
}
 8001bfc:	46c0      	nop			@ (mov r8, r8)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4926      	ldr	r1, [pc, #152]	@ (8001ca4 <UART_EndRxTransfer+0xc4>)
 8001c0a:	400a      	ands	r2, r1
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	f383 8810 	msr	PRIMASK, r3
}
 8001c18:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001c1a:	f3ef 8310 	mrs	r3, PRIMASK
 8001c1e:	623b      	str	r3, [r7, #32]
  return(result);
 8001c20:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8001c22:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c24:	2301      	movs	r3, #1
 8001c26:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2a:	f383 8810 	msr	PRIMASK, r3
}
 8001c2e:	46c0      	nop			@ (mov r8, r8)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689a      	ldr	r2, [r3, #8]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	491b      	ldr	r1, [pc, #108]	@ (8001ca8 <UART_EndRxTransfer+0xc8>)
 8001c3c:	400a      	ands	r2, r1
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c42:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c46:	f383 8810 	msr	PRIMASK, r3
}
 8001c4a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d118      	bne.n	8001c86 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001c54:	f3ef 8310 	mrs	r3, PRIMASK
 8001c58:	60bb      	str	r3, [r7, #8]
  return(result);
 8001c5a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c5e:	2301      	movs	r3, #1
 8001c60:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f383 8810 	msr	PRIMASK, r3
}
 8001c68:	46c0      	nop			@ (mov r8, r8)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2110      	movs	r1, #16
 8001c76:	438a      	bics	r2, r1
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	f383 8810 	msr	PRIMASK, r3
}
 8001c84:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	228c      	movs	r2, #140	@ 0x8c
 8001c8a:	2120      	movs	r1, #32
 8001c8c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8001c9a:	46c0      	nop			@ (mov r8, r8)
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	b00e      	add	sp, #56	@ 0x38
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	46c0      	nop			@ (mov r8, r8)
 8001ca4:	fffffedf 	.word	0xfffffedf
 8001ca8:	effffffe 	.word	0xeffffffe

08001cac <std>:
 8001cac:	2300      	movs	r3, #0
 8001cae:	b510      	push	{r4, lr}
 8001cb0:	0004      	movs	r4, r0
 8001cb2:	6003      	str	r3, [r0, #0]
 8001cb4:	6043      	str	r3, [r0, #4]
 8001cb6:	6083      	str	r3, [r0, #8]
 8001cb8:	8181      	strh	r1, [r0, #12]
 8001cba:	6643      	str	r3, [r0, #100]	@ 0x64
 8001cbc:	81c2      	strh	r2, [r0, #14]
 8001cbe:	6103      	str	r3, [r0, #16]
 8001cc0:	6143      	str	r3, [r0, #20]
 8001cc2:	6183      	str	r3, [r0, #24]
 8001cc4:	0019      	movs	r1, r3
 8001cc6:	2208      	movs	r2, #8
 8001cc8:	305c      	adds	r0, #92	@ 0x5c
 8001cca:	f000 f9ff 	bl	80020cc <memset>
 8001cce:	4b0b      	ldr	r3, [pc, #44]	@ (8001cfc <std+0x50>)
 8001cd0:	6224      	str	r4, [r4, #32]
 8001cd2:	6263      	str	r3, [r4, #36]	@ 0x24
 8001cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8001d00 <std+0x54>)
 8001cd6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001cd8:	4b0a      	ldr	r3, [pc, #40]	@ (8001d04 <std+0x58>)
 8001cda:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8001d08 <std+0x5c>)
 8001cde:	6323      	str	r3, [r4, #48]	@ 0x30
 8001ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8001d0c <std+0x60>)
 8001ce2:	429c      	cmp	r4, r3
 8001ce4:	d005      	beq.n	8001cf2 <std+0x46>
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8001d10 <std+0x64>)
 8001ce8:	429c      	cmp	r4, r3
 8001cea:	d002      	beq.n	8001cf2 <std+0x46>
 8001cec:	4b09      	ldr	r3, [pc, #36]	@ (8001d14 <std+0x68>)
 8001cee:	429c      	cmp	r4, r3
 8001cf0:	d103      	bne.n	8001cfa <std+0x4e>
 8001cf2:	0020      	movs	r0, r4
 8001cf4:	3058      	adds	r0, #88	@ 0x58
 8001cf6:	f000 fa69 	bl	80021cc <__retarget_lock_init_recursive>
 8001cfa:	bd10      	pop	{r4, pc}
 8001cfc:	08001ef5 	.word	0x08001ef5
 8001d00:	08001f1d 	.word	0x08001f1d
 8001d04:	08001f55 	.word	0x08001f55
 8001d08:	08001f81 	.word	0x08001f81
 8001d0c:	20000120 	.word	0x20000120
 8001d10:	20000188 	.word	0x20000188
 8001d14:	200001f0 	.word	0x200001f0

08001d18 <stdio_exit_handler>:
 8001d18:	b510      	push	{r4, lr}
 8001d1a:	4a03      	ldr	r2, [pc, #12]	@ (8001d28 <stdio_exit_handler+0x10>)
 8001d1c:	4903      	ldr	r1, [pc, #12]	@ (8001d2c <stdio_exit_handler+0x14>)
 8001d1e:	4804      	ldr	r0, [pc, #16]	@ (8001d30 <stdio_exit_handler+0x18>)
 8001d20:	f000 f86c 	bl	8001dfc <_fwalk_sglue>
 8001d24:	bd10      	pop	{r4, pc}
 8001d26:	46c0      	nop			@ (mov r8, r8)
 8001d28:	2000000c 	.word	0x2000000c
 8001d2c:	080024d9 	.word	0x080024d9
 8001d30:	2000001c 	.word	0x2000001c

08001d34 <cleanup_stdio>:
 8001d34:	6841      	ldr	r1, [r0, #4]
 8001d36:	4b0b      	ldr	r3, [pc, #44]	@ (8001d64 <cleanup_stdio+0x30>)
 8001d38:	b510      	push	{r4, lr}
 8001d3a:	0004      	movs	r4, r0
 8001d3c:	4299      	cmp	r1, r3
 8001d3e:	d001      	beq.n	8001d44 <cleanup_stdio+0x10>
 8001d40:	f000 fbca 	bl	80024d8 <_fflush_r>
 8001d44:	68a1      	ldr	r1, [r4, #8]
 8001d46:	4b08      	ldr	r3, [pc, #32]	@ (8001d68 <cleanup_stdio+0x34>)
 8001d48:	4299      	cmp	r1, r3
 8001d4a:	d002      	beq.n	8001d52 <cleanup_stdio+0x1e>
 8001d4c:	0020      	movs	r0, r4
 8001d4e:	f000 fbc3 	bl	80024d8 <_fflush_r>
 8001d52:	68e1      	ldr	r1, [r4, #12]
 8001d54:	4b05      	ldr	r3, [pc, #20]	@ (8001d6c <cleanup_stdio+0x38>)
 8001d56:	4299      	cmp	r1, r3
 8001d58:	d002      	beq.n	8001d60 <cleanup_stdio+0x2c>
 8001d5a:	0020      	movs	r0, r4
 8001d5c:	f000 fbbc 	bl	80024d8 <_fflush_r>
 8001d60:	bd10      	pop	{r4, pc}
 8001d62:	46c0      	nop			@ (mov r8, r8)
 8001d64:	20000120 	.word	0x20000120
 8001d68:	20000188 	.word	0x20000188
 8001d6c:	200001f0 	.word	0x200001f0

08001d70 <global_stdio_init.part.0>:
 8001d70:	b510      	push	{r4, lr}
 8001d72:	4b09      	ldr	r3, [pc, #36]	@ (8001d98 <global_stdio_init.part.0+0x28>)
 8001d74:	4a09      	ldr	r2, [pc, #36]	@ (8001d9c <global_stdio_init.part.0+0x2c>)
 8001d76:	2104      	movs	r1, #4
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	4809      	ldr	r0, [pc, #36]	@ (8001da0 <global_stdio_init.part.0+0x30>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f7ff ff95 	bl	8001cac <std>
 8001d82:	2201      	movs	r2, #1
 8001d84:	2109      	movs	r1, #9
 8001d86:	4807      	ldr	r0, [pc, #28]	@ (8001da4 <global_stdio_init.part.0+0x34>)
 8001d88:	f7ff ff90 	bl	8001cac <std>
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	2112      	movs	r1, #18
 8001d90:	4805      	ldr	r0, [pc, #20]	@ (8001da8 <global_stdio_init.part.0+0x38>)
 8001d92:	f7ff ff8b 	bl	8001cac <std>
 8001d96:	bd10      	pop	{r4, pc}
 8001d98:	20000258 	.word	0x20000258
 8001d9c:	08001d19 	.word	0x08001d19
 8001da0:	20000120 	.word	0x20000120
 8001da4:	20000188 	.word	0x20000188
 8001da8:	200001f0 	.word	0x200001f0

08001dac <__sfp_lock_acquire>:
 8001dac:	b510      	push	{r4, lr}
 8001dae:	4802      	ldr	r0, [pc, #8]	@ (8001db8 <__sfp_lock_acquire+0xc>)
 8001db0:	f000 fa0d 	bl	80021ce <__retarget_lock_acquire_recursive>
 8001db4:	bd10      	pop	{r4, pc}
 8001db6:	46c0      	nop			@ (mov r8, r8)
 8001db8:	20000261 	.word	0x20000261

08001dbc <__sfp_lock_release>:
 8001dbc:	b510      	push	{r4, lr}
 8001dbe:	4802      	ldr	r0, [pc, #8]	@ (8001dc8 <__sfp_lock_release+0xc>)
 8001dc0:	f000 fa06 	bl	80021d0 <__retarget_lock_release_recursive>
 8001dc4:	bd10      	pop	{r4, pc}
 8001dc6:	46c0      	nop			@ (mov r8, r8)
 8001dc8:	20000261 	.word	0x20000261

08001dcc <__sinit>:
 8001dcc:	b510      	push	{r4, lr}
 8001dce:	0004      	movs	r4, r0
 8001dd0:	f7ff ffec 	bl	8001dac <__sfp_lock_acquire>
 8001dd4:	6a23      	ldr	r3, [r4, #32]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d002      	beq.n	8001de0 <__sinit+0x14>
 8001dda:	f7ff ffef 	bl	8001dbc <__sfp_lock_release>
 8001dde:	bd10      	pop	{r4, pc}
 8001de0:	4b04      	ldr	r3, [pc, #16]	@ (8001df4 <__sinit+0x28>)
 8001de2:	6223      	str	r3, [r4, #32]
 8001de4:	4b04      	ldr	r3, [pc, #16]	@ (8001df8 <__sinit+0x2c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1f6      	bne.n	8001dda <__sinit+0xe>
 8001dec:	f7ff ffc0 	bl	8001d70 <global_stdio_init.part.0>
 8001df0:	e7f3      	b.n	8001dda <__sinit+0xe>
 8001df2:	46c0      	nop			@ (mov r8, r8)
 8001df4:	08001d35 	.word	0x08001d35
 8001df8:	20000258 	.word	0x20000258

08001dfc <_fwalk_sglue>:
 8001dfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001dfe:	0014      	movs	r4, r2
 8001e00:	2600      	movs	r6, #0
 8001e02:	9000      	str	r0, [sp, #0]
 8001e04:	9101      	str	r1, [sp, #4]
 8001e06:	68a5      	ldr	r5, [r4, #8]
 8001e08:	6867      	ldr	r7, [r4, #4]
 8001e0a:	3f01      	subs	r7, #1
 8001e0c:	d504      	bpl.n	8001e18 <_fwalk_sglue+0x1c>
 8001e0e:	6824      	ldr	r4, [r4, #0]
 8001e10:	2c00      	cmp	r4, #0
 8001e12:	d1f8      	bne.n	8001e06 <_fwalk_sglue+0xa>
 8001e14:	0030      	movs	r0, r6
 8001e16:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001e18:	89ab      	ldrh	r3, [r5, #12]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d908      	bls.n	8001e30 <_fwalk_sglue+0x34>
 8001e1e:	220e      	movs	r2, #14
 8001e20:	5eab      	ldrsh	r3, [r5, r2]
 8001e22:	3301      	adds	r3, #1
 8001e24:	d004      	beq.n	8001e30 <_fwalk_sglue+0x34>
 8001e26:	0029      	movs	r1, r5
 8001e28:	9800      	ldr	r0, [sp, #0]
 8001e2a:	9b01      	ldr	r3, [sp, #4]
 8001e2c:	4798      	blx	r3
 8001e2e:	4306      	orrs	r6, r0
 8001e30:	3568      	adds	r5, #104	@ 0x68
 8001e32:	e7ea      	b.n	8001e0a <_fwalk_sglue+0xe>

08001e34 <_puts_r>:
 8001e34:	6a03      	ldr	r3, [r0, #32]
 8001e36:	b570      	push	{r4, r5, r6, lr}
 8001e38:	0005      	movs	r5, r0
 8001e3a:	000e      	movs	r6, r1
 8001e3c:	6884      	ldr	r4, [r0, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <_puts_r+0x12>
 8001e42:	f7ff ffc3 	bl	8001dcc <__sinit>
 8001e46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001e48:	07db      	lsls	r3, r3, #31
 8001e4a:	d405      	bmi.n	8001e58 <_puts_r+0x24>
 8001e4c:	89a3      	ldrh	r3, [r4, #12]
 8001e4e:	059b      	lsls	r3, r3, #22
 8001e50:	d402      	bmi.n	8001e58 <_puts_r+0x24>
 8001e52:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001e54:	f000 f9bb 	bl	80021ce <__retarget_lock_acquire_recursive>
 8001e58:	89a3      	ldrh	r3, [r4, #12]
 8001e5a:	071b      	lsls	r3, r3, #28
 8001e5c:	d502      	bpl.n	8001e64 <_puts_r+0x30>
 8001e5e:	6923      	ldr	r3, [r4, #16]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d11f      	bne.n	8001ea4 <_puts_r+0x70>
 8001e64:	0021      	movs	r1, r4
 8001e66:	0028      	movs	r0, r5
 8001e68:	f000 f8d2 	bl	8002010 <__swsetup_r>
 8001e6c:	2800      	cmp	r0, #0
 8001e6e:	d019      	beq.n	8001ea4 <_puts_r+0x70>
 8001e70:	2501      	movs	r5, #1
 8001e72:	426d      	negs	r5, r5
 8001e74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001e76:	07db      	lsls	r3, r3, #31
 8001e78:	d405      	bmi.n	8001e86 <_puts_r+0x52>
 8001e7a:	89a3      	ldrh	r3, [r4, #12]
 8001e7c:	059b      	lsls	r3, r3, #22
 8001e7e:	d402      	bmi.n	8001e86 <_puts_r+0x52>
 8001e80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001e82:	f000 f9a5 	bl	80021d0 <__retarget_lock_release_recursive>
 8001e86:	0028      	movs	r0, r5
 8001e88:	bd70      	pop	{r4, r5, r6, pc}
 8001e8a:	3601      	adds	r6, #1
 8001e8c:	60a3      	str	r3, [r4, #8]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	da04      	bge.n	8001e9c <_puts_r+0x68>
 8001e92:	69a2      	ldr	r2, [r4, #24]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	dc16      	bgt.n	8001ec6 <_puts_r+0x92>
 8001e98:	290a      	cmp	r1, #10
 8001e9a:	d014      	beq.n	8001ec6 <_puts_r+0x92>
 8001e9c:	6823      	ldr	r3, [r4, #0]
 8001e9e:	1c5a      	adds	r2, r3, #1
 8001ea0:	6022      	str	r2, [r4, #0]
 8001ea2:	7019      	strb	r1, [r3, #0]
 8001ea4:	68a3      	ldr	r3, [r4, #8]
 8001ea6:	7831      	ldrb	r1, [r6, #0]
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	2900      	cmp	r1, #0
 8001eac:	d1ed      	bne.n	8001e8a <_puts_r+0x56>
 8001eae:	60a3      	str	r3, [r4, #8]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	da0f      	bge.n	8001ed4 <_puts_r+0xa0>
 8001eb4:	0022      	movs	r2, r4
 8001eb6:	0028      	movs	r0, r5
 8001eb8:	310a      	adds	r1, #10
 8001eba:	f000 f867 	bl	8001f8c <__swbuf_r>
 8001ebe:	3001      	adds	r0, #1
 8001ec0:	d0d6      	beq.n	8001e70 <_puts_r+0x3c>
 8001ec2:	250a      	movs	r5, #10
 8001ec4:	e7d6      	b.n	8001e74 <_puts_r+0x40>
 8001ec6:	0022      	movs	r2, r4
 8001ec8:	0028      	movs	r0, r5
 8001eca:	f000 f85f 	bl	8001f8c <__swbuf_r>
 8001ece:	3001      	adds	r0, #1
 8001ed0:	d1e8      	bne.n	8001ea4 <_puts_r+0x70>
 8001ed2:	e7cd      	b.n	8001e70 <_puts_r+0x3c>
 8001ed4:	6823      	ldr	r3, [r4, #0]
 8001ed6:	1c5a      	adds	r2, r3, #1
 8001ed8:	6022      	str	r2, [r4, #0]
 8001eda:	220a      	movs	r2, #10
 8001edc:	701a      	strb	r2, [r3, #0]
 8001ede:	e7f0      	b.n	8001ec2 <_puts_r+0x8e>

08001ee0 <puts>:
 8001ee0:	b510      	push	{r4, lr}
 8001ee2:	4b03      	ldr	r3, [pc, #12]	@ (8001ef0 <puts+0x10>)
 8001ee4:	0001      	movs	r1, r0
 8001ee6:	6818      	ldr	r0, [r3, #0]
 8001ee8:	f7ff ffa4 	bl	8001e34 <_puts_r>
 8001eec:	bd10      	pop	{r4, pc}
 8001eee:	46c0      	nop			@ (mov r8, r8)
 8001ef0:	20000018 	.word	0x20000018

08001ef4 <__sread>:
 8001ef4:	b570      	push	{r4, r5, r6, lr}
 8001ef6:	000c      	movs	r4, r1
 8001ef8:	250e      	movs	r5, #14
 8001efa:	5f49      	ldrsh	r1, [r1, r5]
 8001efc:	f000 f914 	bl	8002128 <_read_r>
 8001f00:	2800      	cmp	r0, #0
 8001f02:	db03      	blt.n	8001f0c <__sread+0x18>
 8001f04:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001f06:	181b      	adds	r3, r3, r0
 8001f08:	6563      	str	r3, [r4, #84]	@ 0x54
 8001f0a:	bd70      	pop	{r4, r5, r6, pc}
 8001f0c:	89a3      	ldrh	r3, [r4, #12]
 8001f0e:	4a02      	ldr	r2, [pc, #8]	@ (8001f18 <__sread+0x24>)
 8001f10:	4013      	ands	r3, r2
 8001f12:	81a3      	strh	r3, [r4, #12]
 8001f14:	e7f9      	b.n	8001f0a <__sread+0x16>
 8001f16:	46c0      	nop			@ (mov r8, r8)
 8001f18:	ffffefff 	.word	0xffffefff

08001f1c <__swrite>:
 8001f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f1e:	001f      	movs	r7, r3
 8001f20:	898b      	ldrh	r3, [r1, #12]
 8001f22:	0005      	movs	r5, r0
 8001f24:	000c      	movs	r4, r1
 8001f26:	0016      	movs	r6, r2
 8001f28:	05db      	lsls	r3, r3, #23
 8001f2a:	d505      	bpl.n	8001f38 <__swrite+0x1c>
 8001f2c:	230e      	movs	r3, #14
 8001f2e:	5ec9      	ldrsh	r1, [r1, r3]
 8001f30:	2200      	movs	r2, #0
 8001f32:	2302      	movs	r3, #2
 8001f34:	f000 f8e4 	bl	8002100 <_lseek_r>
 8001f38:	89a3      	ldrh	r3, [r4, #12]
 8001f3a:	4a05      	ldr	r2, [pc, #20]	@ (8001f50 <__swrite+0x34>)
 8001f3c:	0028      	movs	r0, r5
 8001f3e:	4013      	ands	r3, r2
 8001f40:	81a3      	strh	r3, [r4, #12]
 8001f42:	0032      	movs	r2, r6
 8001f44:	230e      	movs	r3, #14
 8001f46:	5ee1      	ldrsh	r1, [r4, r3]
 8001f48:	003b      	movs	r3, r7
 8001f4a:	f000 f901 	bl	8002150 <_write_r>
 8001f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f50:	ffffefff 	.word	0xffffefff

08001f54 <__sseek>:
 8001f54:	b570      	push	{r4, r5, r6, lr}
 8001f56:	000c      	movs	r4, r1
 8001f58:	250e      	movs	r5, #14
 8001f5a:	5f49      	ldrsh	r1, [r1, r5]
 8001f5c:	f000 f8d0 	bl	8002100 <_lseek_r>
 8001f60:	89a3      	ldrh	r3, [r4, #12]
 8001f62:	1c42      	adds	r2, r0, #1
 8001f64:	d103      	bne.n	8001f6e <__sseek+0x1a>
 8001f66:	4a05      	ldr	r2, [pc, #20]	@ (8001f7c <__sseek+0x28>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	81a3      	strh	r3, [r4, #12]
 8001f6c:	bd70      	pop	{r4, r5, r6, pc}
 8001f6e:	2280      	movs	r2, #128	@ 0x80
 8001f70:	0152      	lsls	r2, r2, #5
 8001f72:	4313      	orrs	r3, r2
 8001f74:	81a3      	strh	r3, [r4, #12]
 8001f76:	6560      	str	r0, [r4, #84]	@ 0x54
 8001f78:	e7f8      	b.n	8001f6c <__sseek+0x18>
 8001f7a:	46c0      	nop			@ (mov r8, r8)
 8001f7c:	ffffefff 	.word	0xffffefff

08001f80 <__sclose>:
 8001f80:	b510      	push	{r4, lr}
 8001f82:	230e      	movs	r3, #14
 8001f84:	5ec9      	ldrsh	r1, [r1, r3]
 8001f86:	f000 f8a9 	bl	80020dc <_close_r>
 8001f8a:	bd10      	pop	{r4, pc}

08001f8c <__swbuf_r>:
 8001f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f8e:	0006      	movs	r6, r0
 8001f90:	000d      	movs	r5, r1
 8001f92:	0014      	movs	r4, r2
 8001f94:	2800      	cmp	r0, #0
 8001f96:	d004      	beq.n	8001fa2 <__swbuf_r+0x16>
 8001f98:	6a03      	ldr	r3, [r0, #32]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <__swbuf_r+0x16>
 8001f9e:	f7ff ff15 	bl	8001dcc <__sinit>
 8001fa2:	69a3      	ldr	r3, [r4, #24]
 8001fa4:	60a3      	str	r3, [r4, #8]
 8001fa6:	89a3      	ldrh	r3, [r4, #12]
 8001fa8:	071b      	lsls	r3, r3, #28
 8001faa:	d502      	bpl.n	8001fb2 <__swbuf_r+0x26>
 8001fac:	6923      	ldr	r3, [r4, #16]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d109      	bne.n	8001fc6 <__swbuf_r+0x3a>
 8001fb2:	0021      	movs	r1, r4
 8001fb4:	0030      	movs	r0, r6
 8001fb6:	f000 f82b 	bl	8002010 <__swsetup_r>
 8001fba:	2800      	cmp	r0, #0
 8001fbc:	d003      	beq.n	8001fc6 <__swbuf_r+0x3a>
 8001fbe:	2501      	movs	r5, #1
 8001fc0:	426d      	negs	r5, r5
 8001fc2:	0028      	movs	r0, r5
 8001fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fc6:	6923      	ldr	r3, [r4, #16]
 8001fc8:	6820      	ldr	r0, [r4, #0]
 8001fca:	b2ef      	uxtb	r7, r5
 8001fcc:	1ac0      	subs	r0, r0, r3
 8001fce:	6963      	ldr	r3, [r4, #20]
 8001fd0:	b2ed      	uxtb	r5, r5
 8001fd2:	4283      	cmp	r3, r0
 8001fd4:	dc05      	bgt.n	8001fe2 <__swbuf_r+0x56>
 8001fd6:	0021      	movs	r1, r4
 8001fd8:	0030      	movs	r0, r6
 8001fda:	f000 fa7d 	bl	80024d8 <_fflush_r>
 8001fde:	2800      	cmp	r0, #0
 8001fe0:	d1ed      	bne.n	8001fbe <__swbuf_r+0x32>
 8001fe2:	68a3      	ldr	r3, [r4, #8]
 8001fe4:	3001      	adds	r0, #1
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	60a3      	str	r3, [r4, #8]
 8001fea:	6823      	ldr	r3, [r4, #0]
 8001fec:	1c5a      	adds	r2, r3, #1
 8001fee:	6022      	str	r2, [r4, #0]
 8001ff0:	701f      	strb	r7, [r3, #0]
 8001ff2:	6963      	ldr	r3, [r4, #20]
 8001ff4:	4283      	cmp	r3, r0
 8001ff6:	d004      	beq.n	8002002 <__swbuf_r+0x76>
 8001ff8:	89a3      	ldrh	r3, [r4, #12]
 8001ffa:	07db      	lsls	r3, r3, #31
 8001ffc:	d5e1      	bpl.n	8001fc2 <__swbuf_r+0x36>
 8001ffe:	2d0a      	cmp	r5, #10
 8002000:	d1df      	bne.n	8001fc2 <__swbuf_r+0x36>
 8002002:	0021      	movs	r1, r4
 8002004:	0030      	movs	r0, r6
 8002006:	f000 fa67 	bl	80024d8 <_fflush_r>
 800200a:	2800      	cmp	r0, #0
 800200c:	d0d9      	beq.n	8001fc2 <__swbuf_r+0x36>
 800200e:	e7d6      	b.n	8001fbe <__swbuf_r+0x32>

08002010 <__swsetup_r>:
 8002010:	4b2d      	ldr	r3, [pc, #180]	@ (80020c8 <__swsetup_r+0xb8>)
 8002012:	b570      	push	{r4, r5, r6, lr}
 8002014:	0005      	movs	r5, r0
 8002016:	6818      	ldr	r0, [r3, #0]
 8002018:	000c      	movs	r4, r1
 800201a:	2800      	cmp	r0, #0
 800201c:	d004      	beq.n	8002028 <__swsetup_r+0x18>
 800201e:	6a03      	ldr	r3, [r0, #32]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <__swsetup_r+0x18>
 8002024:	f7ff fed2 	bl	8001dcc <__sinit>
 8002028:	230c      	movs	r3, #12
 800202a:	5ee2      	ldrsh	r2, [r4, r3]
 800202c:	0713      	lsls	r3, r2, #28
 800202e:	d423      	bmi.n	8002078 <__swsetup_r+0x68>
 8002030:	06d3      	lsls	r3, r2, #27
 8002032:	d407      	bmi.n	8002044 <__swsetup_r+0x34>
 8002034:	2309      	movs	r3, #9
 8002036:	602b      	str	r3, [r5, #0]
 8002038:	2340      	movs	r3, #64	@ 0x40
 800203a:	2001      	movs	r0, #1
 800203c:	4313      	orrs	r3, r2
 800203e:	81a3      	strh	r3, [r4, #12]
 8002040:	4240      	negs	r0, r0
 8002042:	e03a      	b.n	80020ba <__swsetup_r+0xaa>
 8002044:	0752      	lsls	r2, r2, #29
 8002046:	d513      	bpl.n	8002070 <__swsetup_r+0x60>
 8002048:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800204a:	2900      	cmp	r1, #0
 800204c:	d008      	beq.n	8002060 <__swsetup_r+0x50>
 800204e:	0023      	movs	r3, r4
 8002050:	3344      	adds	r3, #68	@ 0x44
 8002052:	4299      	cmp	r1, r3
 8002054:	d002      	beq.n	800205c <__swsetup_r+0x4c>
 8002056:	0028      	movs	r0, r5
 8002058:	f000 f8bc 	bl	80021d4 <_free_r>
 800205c:	2300      	movs	r3, #0
 800205e:	6363      	str	r3, [r4, #52]	@ 0x34
 8002060:	2224      	movs	r2, #36	@ 0x24
 8002062:	89a3      	ldrh	r3, [r4, #12]
 8002064:	4393      	bics	r3, r2
 8002066:	81a3      	strh	r3, [r4, #12]
 8002068:	2300      	movs	r3, #0
 800206a:	6063      	str	r3, [r4, #4]
 800206c:	6923      	ldr	r3, [r4, #16]
 800206e:	6023      	str	r3, [r4, #0]
 8002070:	2308      	movs	r3, #8
 8002072:	89a2      	ldrh	r2, [r4, #12]
 8002074:	4313      	orrs	r3, r2
 8002076:	81a3      	strh	r3, [r4, #12]
 8002078:	6923      	ldr	r3, [r4, #16]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10b      	bne.n	8002096 <__swsetup_r+0x86>
 800207e:	21a0      	movs	r1, #160	@ 0xa0
 8002080:	2280      	movs	r2, #128	@ 0x80
 8002082:	89a3      	ldrh	r3, [r4, #12]
 8002084:	0089      	lsls	r1, r1, #2
 8002086:	0092      	lsls	r2, r2, #2
 8002088:	400b      	ands	r3, r1
 800208a:	4293      	cmp	r3, r2
 800208c:	d003      	beq.n	8002096 <__swsetup_r+0x86>
 800208e:	0021      	movs	r1, r4
 8002090:	0028      	movs	r0, r5
 8002092:	f000 fa77 	bl	8002584 <__smakebuf_r>
 8002096:	230c      	movs	r3, #12
 8002098:	5ee2      	ldrsh	r2, [r4, r3]
 800209a:	2101      	movs	r1, #1
 800209c:	0013      	movs	r3, r2
 800209e:	400b      	ands	r3, r1
 80020a0:	420a      	tst	r2, r1
 80020a2:	d00b      	beq.n	80020bc <__swsetup_r+0xac>
 80020a4:	2300      	movs	r3, #0
 80020a6:	60a3      	str	r3, [r4, #8]
 80020a8:	6963      	ldr	r3, [r4, #20]
 80020aa:	425b      	negs	r3, r3
 80020ac:	61a3      	str	r3, [r4, #24]
 80020ae:	2000      	movs	r0, #0
 80020b0:	6923      	ldr	r3, [r4, #16]
 80020b2:	4283      	cmp	r3, r0
 80020b4:	d101      	bne.n	80020ba <__swsetup_r+0xaa>
 80020b6:	0613      	lsls	r3, r2, #24
 80020b8:	d4be      	bmi.n	8002038 <__swsetup_r+0x28>
 80020ba:	bd70      	pop	{r4, r5, r6, pc}
 80020bc:	0791      	lsls	r1, r2, #30
 80020be:	d400      	bmi.n	80020c2 <__swsetup_r+0xb2>
 80020c0:	6963      	ldr	r3, [r4, #20]
 80020c2:	60a3      	str	r3, [r4, #8]
 80020c4:	e7f3      	b.n	80020ae <__swsetup_r+0x9e>
 80020c6:	46c0      	nop			@ (mov r8, r8)
 80020c8:	20000018 	.word	0x20000018

080020cc <memset>:
 80020cc:	0003      	movs	r3, r0
 80020ce:	1882      	adds	r2, r0, r2
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d100      	bne.n	80020d6 <memset+0xa>
 80020d4:	4770      	bx	lr
 80020d6:	7019      	strb	r1, [r3, #0]
 80020d8:	3301      	adds	r3, #1
 80020da:	e7f9      	b.n	80020d0 <memset+0x4>

080020dc <_close_r>:
 80020dc:	2300      	movs	r3, #0
 80020de:	b570      	push	{r4, r5, r6, lr}
 80020e0:	4d06      	ldr	r5, [pc, #24]	@ (80020fc <_close_r+0x20>)
 80020e2:	0004      	movs	r4, r0
 80020e4:	0008      	movs	r0, r1
 80020e6:	602b      	str	r3, [r5, #0]
 80020e8:	f7fe fa54 	bl	8000594 <_close>
 80020ec:	1c43      	adds	r3, r0, #1
 80020ee:	d103      	bne.n	80020f8 <_close_r+0x1c>
 80020f0:	682b      	ldr	r3, [r5, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d000      	beq.n	80020f8 <_close_r+0x1c>
 80020f6:	6023      	str	r3, [r4, #0]
 80020f8:	bd70      	pop	{r4, r5, r6, pc}
 80020fa:	46c0      	nop			@ (mov r8, r8)
 80020fc:	2000025c 	.word	0x2000025c

08002100 <_lseek_r>:
 8002100:	b570      	push	{r4, r5, r6, lr}
 8002102:	0004      	movs	r4, r0
 8002104:	0008      	movs	r0, r1
 8002106:	0011      	movs	r1, r2
 8002108:	001a      	movs	r2, r3
 800210a:	2300      	movs	r3, #0
 800210c:	4d05      	ldr	r5, [pc, #20]	@ (8002124 <_lseek_r+0x24>)
 800210e:	602b      	str	r3, [r5, #0]
 8002110:	f7fe fa61 	bl	80005d6 <_lseek>
 8002114:	1c43      	adds	r3, r0, #1
 8002116:	d103      	bne.n	8002120 <_lseek_r+0x20>
 8002118:	682b      	ldr	r3, [r5, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d000      	beq.n	8002120 <_lseek_r+0x20>
 800211e:	6023      	str	r3, [r4, #0]
 8002120:	bd70      	pop	{r4, r5, r6, pc}
 8002122:	46c0      	nop			@ (mov r8, r8)
 8002124:	2000025c 	.word	0x2000025c

08002128 <_read_r>:
 8002128:	b570      	push	{r4, r5, r6, lr}
 800212a:	0004      	movs	r4, r0
 800212c:	0008      	movs	r0, r1
 800212e:	0011      	movs	r1, r2
 8002130:	001a      	movs	r2, r3
 8002132:	2300      	movs	r3, #0
 8002134:	4d05      	ldr	r5, [pc, #20]	@ (800214c <_read_r+0x24>)
 8002136:	602b      	str	r3, [r5, #0]
 8002138:	f7fe f9f3 	bl	8000522 <_read>
 800213c:	1c43      	adds	r3, r0, #1
 800213e:	d103      	bne.n	8002148 <_read_r+0x20>
 8002140:	682b      	ldr	r3, [r5, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d000      	beq.n	8002148 <_read_r+0x20>
 8002146:	6023      	str	r3, [r4, #0]
 8002148:	bd70      	pop	{r4, r5, r6, pc}
 800214a:	46c0      	nop			@ (mov r8, r8)
 800214c:	2000025c 	.word	0x2000025c

08002150 <_write_r>:
 8002150:	b570      	push	{r4, r5, r6, lr}
 8002152:	0004      	movs	r4, r0
 8002154:	0008      	movs	r0, r1
 8002156:	0011      	movs	r1, r2
 8002158:	001a      	movs	r2, r3
 800215a:	2300      	movs	r3, #0
 800215c:	4d05      	ldr	r5, [pc, #20]	@ (8002174 <_write_r+0x24>)
 800215e:	602b      	str	r3, [r5, #0]
 8002160:	f7fe f9fc 	bl	800055c <_write>
 8002164:	1c43      	adds	r3, r0, #1
 8002166:	d103      	bne.n	8002170 <_write_r+0x20>
 8002168:	682b      	ldr	r3, [r5, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d000      	beq.n	8002170 <_write_r+0x20>
 800216e:	6023      	str	r3, [r4, #0]
 8002170:	bd70      	pop	{r4, r5, r6, pc}
 8002172:	46c0      	nop			@ (mov r8, r8)
 8002174:	2000025c 	.word	0x2000025c

08002178 <__errno>:
 8002178:	4b01      	ldr	r3, [pc, #4]	@ (8002180 <__errno+0x8>)
 800217a:	6818      	ldr	r0, [r3, #0]
 800217c:	4770      	bx	lr
 800217e:	46c0      	nop			@ (mov r8, r8)
 8002180:	20000018 	.word	0x20000018

08002184 <__libc_init_array>:
 8002184:	b570      	push	{r4, r5, r6, lr}
 8002186:	2600      	movs	r6, #0
 8002188:	4c0c      	ldr	r4, [pc, #48]	@ (80021bc <__libc_init_array+0x38>)
 800218a:	4d0d      	ldr	r5, [pc, #52]	@ (80021c0 <__libc_init_array+0x3c>)
 800218c:	1b64      	subs	r4, r4, r5
 800218e:	10a4      	asrs	r4, r4, #2
 8002190:	42a6      	cmp	r6, r4
 8002192:	d109      	bne.n	80021a8 <__libc_init_array+0x24>
 8002194:	2600      	movs	r6, #0
 8002196:	f000 fa6d 	bl	8002674 <_init>
 800219a:	4c0a      	ldr	r4, [pc, #40]	@ (80021c4 <__libc_init_array+0x40>)
 800219c:	4d0a      	ldr	r5, [pc, #40]	@ (80021c8 <__libc_init_array+0x44>)
 800219e:	1b64      	subs	r4, r4, r5
 80021a0:	10a4      	asrs	r4, r4, #2
 80021a2:	42a6      	cmp	r6, r4
 80021a4:	d105      	bne.n	80021b2 <__libc_init_array+0x2e>
 80021a6:	bd70      	pop	{r4, r5, r6, pc}
 80021a8:	00b3      	lsls	r3, r6, #2
 80021aa:	58eb      	ldr	r3, [r5, r3]
 80021ac:	4798      	blx	r3
 80021ae:	3601      	adds	r6, #1
 80021b0:	e7ee      	b.n	8002190 <__libc_init_array+0xc>
 80021b2:	00b3      	lsls	r3, r6, #2
 80021b4:	58eb      	ldr	r3, [r5, r3]
 80021b6:	4798      	blx	r3
 80021b8:	3601      	adds	r6, #1
 80021ba:	e7f2      	b.n	80021a2 <__libc_init_array+0x1e>
 80021bc:	08002714 	.word	0x08002714
 80021c0:	08002714 	.word	0x08002714
 80021c4:	08002718 	.word	0x08002718
 80021c8:	08002714 	.word	0x08002714

080021cc <__retarget_lock_init_recursive>:
 80021cc:	4770      	bx	lr

080021ce <__retarget_lock_acquire_recursive>:
 80021ce:	4770      	bx	lr

080021d0 <__retarget_lock_release_recursive>:
 80021d0:	4770      	bx	lr
	...

080021d4 <_free_r>:
 80021d4:	b570      	push	{r4, r5, r6, lr}
 80021d6:	0005      	movs	r5, r0
 80021d8:	1e0c      	subs	r4, r1, #0
 80021da:	d010      	beq.n	80021fe <_free_r+0x2a>
 80021dc:	3c04      	subs	r4, #4
 80021de:	6823      	ldr	r3, [r4, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	da00      	bge.n	80021e6 <_free_r+0x12>
 80021e4:	18e4      	adds	r4, r4, r3
 80021e6:	0028      	movs	r0, r5
 80021e8:	f000 f8e0 	bl	80023ac <__malloc_lock>
 80021ec:	4a1d      	ldr	r2, [pc, #116]	@ (8002264 <_free_r+0x90>)
 80021ee:	6813      	ldr	r3, [r2, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d105      	bne.n	8002200 <_free_r+0x2c>
 80021f4:	6063      	str	r3, [r4, #4]
 80021f6:	6014      	str	r4, [r2, #0]
 80021f8:	0028      	movs	r0, r5
 80021fa:	f000 f8df 	bl	80023bc <__malloc_unlock>
 80021fe:	bd70      	pop	{r4, r5, r6, pc}
 8002200:	42a3      	cmp	r3, r4
 8002202:	d908      	bls.n	8002216 <_free_r+0x42>
 8002204:	6820      	ldr	r0, [r4, #0]
 8002206:	1821      	adds	r1, r4, r0
 8002208:	428b      	cmp	r3, r1
 800220a:	d1f3      	bne.n	80021f4 <_free_r+0x20>
 800220c:	6819      	ldr	r1, [r3, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	1809      	adds	r1, r1, r0
 8002212:	6021      	str	r1, [r4, #0]
 8002214:	e7ee      	b.n	80021f4 <_free_r+0x20>
 8002216:	001a      	movs	r2, r3
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <_free_r+0x4e>
 800221e:	42a3      	cmp	r3, r4
 8002220:	d9f9      	bls.n	8002216 <_free_r+0x42>
 8002222:	6811      	ldr	r1, [r2, #0]
 8002224:	1850      	adds	r0, r2, r1
 8002226:	42a0      	cmp	r0, r4
 8002228:	d10b      	bne.n	8002242 <_free_r+0x6e>
 800222a:	6820      	ldr	r0, [r4, #0]
 800222c:	1809      	adds	r1, r1, r0
 800222e:	1850      	adds	r0, r2, r1
 8002230:	6011      	str	r1, [r2, #0]
 8002232:	4283      	cmp	r3, r0
 8002234:	d1e0      	bne.n	80021f8 <_free_r+0x24>
 8002236:	6818      	ldr	r0, [r3, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	1841      	adds	r1, r0, r1
 800223c:	6011      	str	r1, [r2, #0]
 800223e:	6053      	str	r3, [r2, #4]
 8002240:	e7da      	b.n	80021f8 <_free_r+0x24>
 8002242:	42a0      	cmp	r0, r4
 8002244:	d902      	bls.n	800224c <_free_r+0x78>
 8002246:	230c      	movs	r3, #12
 8002248:	602b      	str	r3, [r5, #0]
 800224a:	e7d5      	b.n	80021f8 <_free_r+0x24>
 800224c:	6820      	ldr	r0, [r4, #0]
 800224e:	1821      	adds	r1, r4, r0
 8002250:	428b      	cmp	r3, r1
 8002252:	d103      	bne.n	800225c <_free_r+0x88>
 8002254:	6819      	ldr	r1, [r3, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	1809      	adds	r1, r1, r0
 800225a:	6021      	str	r1, [r4, #0]
 800225c:	6063      	str	r3, [r4, #4]
 800225e:	6054      	str	r4, [r2, #4]
 8002260:	e7ca      	b.n	80021f8 <_free_r+0x24>
 8002262:	46c0      	nop			@ (mov r8, r8)
 8002264:	20000268 	.word	0x20000268

08002268 <sbrk_aligned>:
 8002268:	b570      	push	{r4, r5, r6, lr}
 800226a:	4e0f      	ldr	r6, [pc, #60]	@ (80022a8 <sbrk_aligned+0x40>)
 800226c:	000d      	movs	r5, r1
 800226e:	6831      	ldr	r1, [r6, #0]
 8002270:	0004      	movs	r4, r0
 8002272:	2900      	cmp	r1, #0
 8002274:	d102      	bne.n	800227c <sbrk_aligned+0x14>
 8002276:	f000 f9eb 	bl	8002650 <_sbrk_r>
 800227a:	6030      	str	r0, [r6, #0]
 800227c:	0029      	movs	r1, r5
 800227e:	0020      	movs	r0, r4
 8002280:	f000 f9e6 	bl	8002650 <_sbrk_r>
 8002284:	1c43      	adds	r3, r0, #1
 8002286:	d103      	bne.n	8002290 <sbrk_aligned+0x28>
 8002288:	2501      	movs	r5, #1
 800228a:	426d      	negs	r5, r5
 800228c:	0028      	movs	r0, r5
 800228e:	bd70      	pop	{r4, r5, r6, pc}
 8002290:	2303      	movs	r3, #3
 8002292:	1cc5      	adds	r5, r0, #3
 8002294:	439d      	bics	r5, r3
 8002296:	42a8      	cmp	r0, r5
 8002298:	d0f8      	beq.n	800228c <sbrk_aligned+0x24>
 800229a:	1a29      	subs	r1, r5, r0
 800229c:	0020      	movs	r0, r4
 800229e:	f000 f9d7 	bl	8002650 <_sbrk_r>
 80022a2:	3001      	adds	r0, #1
 80022a4:	d1f2      	bne.n	800228c <sbrk_aligned+0x24>
 80022a6:	e7ef      	b.n	8002288 <sbrk_aligned+0x20>
 80022a8:	20000264 	.word	0x20000264

080022ac <_malloc_r>:
 80022ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80022ae:	2203      	movs	r2, #3
 80022b0:	1ccb      	adds	r3, r1, #3
 80022b2:	4393      	bics	r3, r2
 80022b4:	3308      	adds	r3, #8
 80022b6:	0005      	movs	r5, r0
 80022b8:	001f      	movs	r7, r3
 80022ba:	2b0c      	cmp	r3, #12
 80022bc:	d234      	bcs.n	8002328 <_malloc_r+0x7c>
 80022be:	270c      	movs	r7, #12
 80022c0:	42b9      	cmp	r1, r7
 80022c2:	d833      	bhi.n	800232c <_malloc_r+0x80>
 80022c4:	0028      	movs	r0, r5
 80022c6:	f000 f871 	bl	80023ac <__malloc_lock>
 80022ca:	4e37      	ldr	r6, [pc, #220]	@ (80023a8 <_malloc_r+0xfc>)
 80022cc:	6833      	ldr	r3, [r6, #0]
 80022ce:	001c      	movs	r4, r3
 80022d0:	2c00      	cmp	r4, #0
 80022d2:	d12f      	bne.n	8002334 <_malloc_r+0x88>
 80022d4:	0039      	movs	r1, r7
 80022d6:	0028      	movs	r0, r5
 80022d8:	f7ff ffc6 	bl	8002268 <sbrk_aligned>
 80022dc:	0004      	movs	r4, r0
 80022de:	1c43      	adds	r3, r0, #1
 80022e0:	d15f      	bne.n	80023a2 <_malloc_r+0xf6>
 80022e2:	6834      	ldr	r4, [r6, #0]
 80022e4:	9400      	str	r4, [sp, #0]
 80022e6:	9b00      	ldr	r3, [sp, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d14a      	bne.n	8002382 <_malloc_r+0xd6>
 80022ec:	2c00      	cmp	r4, #0
 80022ee:	d052      	beq.n	8002396 <_malloc_r+0xea>
 80022f0:	6823      	ldr	r3, [r4, #0]
 80022f2:	0028      	movs	r0, r5
 80022f4:	18e3      	adds	r3, r4, r3
 80022f6:	9900      	ldr	r1, [sp, #0]
 80022f8:	9301      	str	r3, [sp, #4]
 80022fa:	f000 f9a9 	bl	8002650 <_sbrk_r>
 80022fe:	9b01      	ldr	r3, [sp, #4]
 8002300:	4283      	cmp	r3, r0
 8002302:	d148      	bne.n	8002396 <_malloc_r+0xea>
 8002304:	6823      	ldr	r3, [r4, #0]
 8002306:	0028      	movs	r0, r5
 8002308:	1aff      	subs	r7, r7, r3
 800230a:	0039      	movs	r1, r7
 800230c:	f7ff ffac 	bl	8002268 <sbrk_aligned>
 8002310:	3001      	adds	r0, #1
 8002312:	d040      	beq.n	8002396 <_malloc_r+0xea>
 8002314:	6823      	ldr	r3, [r4, #0]
 8002316:	19db      	adds	r3, r3, r7
 8002318:	6023      	str	r3, [r4, #0]
 800231a:	6833      	ldr	r3, [r6, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	2a00      	cmp	r2, #0
 8002320:	d133      	bne.n	800238a <_malloc_r+0xde>
 8002322:	9b00      	ldr	r3, [sp, #0]
 8002324:	6033      	str	r3, [r6, #0]
 8002326:	e019      	b.n	800235c <_malloc_r+0xb0>
 8002328:	2b00      	cmp	r3, #0
 800232a:	dac9      	bge.n	80022c0 <_malloc_r+0x14>
 800232c:	230c      	movs	r3, #12
 800232e:	602b      	str	r3, [r5, #0]
 8002330:	2000      	movs	r0, #0
 8002332:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002334:	6821      	ldr	r1, [r4, #0]
 8002336:	1bc9      	subs	r1, r1, r7
 8002338:	d420      	bmi.n	800237c <_malloc_r+0xd0>
 800233a:	290b      	cmp	r1, #11
 800233c:	d90a      	bls.n	8002354 <_malloc_r+0xa8>
 800233e:	19e2      	adds	r2, r4, r7
 8002340:	6027      	str	r7, [r4, #0]
 8002342:	42a3      	cmp	r3, r4
 8002344:	d104      	bne.n	8002350 <_malloc_r+0xa4>
 8002346:	6032      	str	r2, [r6, #0]
 8002348:	6863      	ldr	r3, [r4, #4]
 800234a:	6011      	str	r1, [r2, #0]
 800234c:	6053      	str	r3, [r2, #4]
 800234e:	e005      	b.n	800235c <_malloc_r+0xb0>
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	e7f9      	b.n	8002348 <_malloc_r+0x9c>
 8002354:	6862      	ldr	r2, [r4, #4]
 8002356:	42a3      	cmp	r3, r4
 8002358:	d10e      	bne.n	8002378 <_malloc_r+0xcc>
 800235a:	6032      	str	r2, [r6, #0]
 800235c:	0028      	movs	r0, r5
 800235e:	f000 f82d 	bl	80023bc <__malloc_unlock>
 8002362:	0020      	movs	r0, r4
 8002364:	2207      	movs	r2, #7
 8002366:	300b      	adds	r0, #11
 8002368:	1d23      	adds	r3, r4, #4
 800236a:	4390      	bics	r0, r2
 800236c:	1ac2      	subs	r2, r0, r3
 800236e:	4298      	cmp	r0, r3
 8002370:	d0df      	beq.n	8002332 <_malloc_r+0x86>
 8002372:	1a1b      	subs	r3, r3, r0
 8002374:	50a3      	str	r3, [r4, r2]
 8002376:	e7dc      	b.n	8002332 <_malloc_r+0x86>
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	e7ef      	b.n	800235c <_malloc_r+0xb0>
 800237c:	0023      	movs	r3, r4
 800237e:	6864      	ldr	r4, [r4, #4]
 8002380:	e7a6      	b.n	80022d0 <_malloc_r+0x24>
 8002382:	9c00      	ldr	r4, [sp, #0]
 8002384:	6863      	ldr	r3, [r4, #4]
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	e7ad      	b.n	80022e6 <_malloc_r+0x3a>
 800238a:	001a      	movs	r2, r3
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	42a3      	cmp	r3, r4
 8002390:	d1fb      	bne.n	800238a <_malloc_r+0xde>
 8002392:	2300      	movs	r3, #0
 8002394:	e7da      	b.n	800234c <_malloc_r+0xa0>
 8002396:	230c      	movs	r3, #12
 8002398:	0028      	movs	r0, r5
 800239a:	602b      	str	r3, [r5, #0]
 800239c:	f000 f80e 	bl	80023bc <__malloc_unlock>
 80023a0:	e7c6      	b.n	8002330 <_malloc_r+0x84>
 80023a2:	6007      	str	r7, [r0, #0]
 80023a4:	e7da      	b.n	800235c <_malloc_r+0xb0>
 80023a6:	46c0      	nop			@ (mov r8, r8)
 80023a8:	20000268 	.word	0x20000268

080023ac <__malloc_lock>:
 80023ac:	b510      	push	{r4, lr}
 80023ae:	4802      	ldr	r0, [pc, #8]	@ (80023b8 <__malloc_lock+0xc>)
 80023b0:	f7ff ff0d 	bl	80021ce <__retarget_lock_acquire_recursive>
 80023b4:	bd10      	pop	{r4, pc}
 80023b6:	46c0      	nop			@ (mov r8, r8)
 80023b8:	20000260 	.word	0x20000260

080023bc <__malloc_unlock>:
 80023bc:	b510      	push	{r4, lr}
 80023be:	4802      	ldr	r0, [pc, #8]	@ (80023c8 <__malloc_unlock+0xc>)
 80023c0:	f7ff ff06 	bl	80021d0 <__retarget_lock_release_recursive>
 80023c4:	bd10      	pop	{r4, pc}
 80023c6:	46c0      	nop			@ (mov r8, r8)
 80023c8:	20000260 	.word	0x20000260

080023cc <__sflush_r>:
 80023cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80023ce:	220c      	movs	r2, #12
 80023d0:	5e8b      	ldrsh	r3, [r1, r2]
 80023d2:	0005      	movs	r5, r0
 80023d4:	000c      	movs	r4, r1
 80023d6:	071a      	lsls	r2, r3, #28
 80023d8:	d456      	bmi.n	8002488 <__sflush_r+0xbc>
 80023da:	684a      	ldr	r2, [r1, #4]
 80023dc:	2a00      	cmp	r2, #0
 80023de:	dc02      	bgt.n	80023e6 <__sflush_r+0x1a>
 80023e0:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80023e2:	2a00      	cmp	r2, #0
 80023e4:	dd4e      	ble.n	8002484 <__sflush_r+0xb8>
 80023e6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80023e8:	2f00      	cmp	r7, #0
 80023ea:	d04b      	beq.n	8002484 <__sflush_r+0xb8>
 80023ec:	2200      	movs	r2, #0
 80023ee:	2080      	movs	r0, #128	@ 0x80
 80023f0:	682e      	ldr	r6, [r5, #0]
 80023f2:	602a      	str	r2, [r5, #0]
 80023f4:	001a      	movs	r2, r3
 80023f6:	0140      	lsls	r0, r0, #5
 80023f8:	6a21      	ldr	r1, [r4, #32]
 80023fa:	4002      	ands	r2, r0
 80023fc:	4203      	tst	r3, r0
 80023fe:	d033      	beq.n	8002468 <__sflush_r+0x9c>
 8002400:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002402:	89a3      	ldrh	r3, [r4, #12]
 8002404:	075b      	lsls	r3, r3, #29
 8002406:	d506      	bpl.n	8002416 <__sflush_r+0x4a>
 8002408:	6863      	ldr	r3, [r4, #4]
 800240a:	1ad2      	subs	r2, r2, r3
 800240c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <__sflush_r+0x4a>
 8002412:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002414:	1ad2      	subs	r2, r2, r3
 8002416:	2300      	movs	r3, #0
 8002418:	0028      	movs	r0, r5
 800241a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800241c:	6a21      	ldr	r1, [r4, #32]
 800241e:	47b8      	blx	r7
 8002420:	89a2      	ldrh	r2, [r4, #12]
 8002422:	1c43      	adds	r3, r0, #1
 8002424:	d106      	bne.n	8002434 <__sflush_r+0x68>
 8002426:	6829      	ldr	r1, [r5, #0]
 8002428:	291d      	cmp	r1, #29
 800242a:	d846      	bhi.n	80024ba <__sflush_r+0xee>
 800242c:	4b29      	ldr	r3, [pc, #164]	@ (80024d4 <__sflush_r+0x108>)
 800242e:	410b      	asrs	r3, r1
 8002430:	07db      	lsls	r3, r3, #31
 8002432:	d442      	bmi.n	80024ba <__sflush_r+0xee>
 8002434:	2300      	movs	r3, #0
 8002436:	6063      	str	r3, [r4, #4]
 8002438:	6923      	ldr	r3, [r4, #16]
 800243a:	6023      	str	r3, [r4, #0]
 800243c:	04d2      	lsls	r2, r2, #19
 800243e:	d505      	bpl.n	800244c <__sflush_r+0x80>
 8002440:	1c43      	adds	r3, r0, #1
 8002442:	d102      	bne.n	800244a <__sflush_r+0x7e>
 8002444:	682b      	ldr	r3, [r5, #0]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d100      	bne.n	800244c <__sflush_r+0x80>
 800244a:	6560      	str	r0, [r4, #84]	@ 0x54
 800244c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800244e:	602e      	str	r6, [r5, #0]
 8002450:	2900      	cmp	r1, #0
 8002452:	d017      	beq.n	8002484 <__sflush_r+0xb8>
 8002454:	0023      	movs	r3, r4
 8002456:	3344      	adds	r3, #68	@ 0x44
 8002458:	4299      	cmp	r1, r3
 800245a:	d002      	beq.n	8002462 <__sflush_r+0x96>
 800245c:	0028      	movs	r0, r5
 800245e:	f7ff feb9 	bl	80021d4 <_free_r>
 8002462:	2300      	movs	r3, #0
 8002464:	6363      	str	r3, [r4, #52]	@ 0x34
 8002466:	e00d      	b.n	8002484 <__sflush_r+0xb8>
 8002468:	2301      	movs	r3, #1
 800246a:	0028      	movs	r0, r5
 800246c:	47b8      	blx	r7
 800246e:	0002      	movs	r2, r0
 8002470:	1c43      	adds	r3, r0, #1
 8002472:	d1c6      	bne.n	8002402 <__sflush_r+0x36>
 8002474:	682b      	ldr	r3, [r5, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d0c3      	beq.n	8002402 <__sflush_r+0x36>
 800247a:	2b1d      	cmp	r3, #29
 800247c:	d001      	beq.n	8002482 <__sflush_r+0xb6>
 800247e:	2b16      	cmp	r3, #22
 8002480:	d11a      	bne.n	80024b8 <__sflush_r+0xec>
 8002482:	602e      	str	r6, [r5, #0]
 8002484:	2000      	movs	r0, #0
 8002486:	e01e      	b.n	80024c6 <__sflush_r+0xfa>
 8002488:	690e      	ldr	r6, [r1, #16]
 800248a:	2e00      	cmp	r6, #0
 800248c:	d0fa      	beq.n	8002484 <__sflush_r+0xb8>
 800248e:	680f      	ldr	r7, [r1, #0]
 8002490:	600e      	str	r6, [r1, #0]
 8002492:	1bba      	subs	r2, r7, r6
 8002494:	9201      	str	r2, [sp, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	079b      	lsls	r3, r3, #30
 800249a:	d100      	bne.n	800249e <__sflush_r+0xd2>
 800249c:	694a      	ldr	r2, [r1, #20]
 800249e:	60a2      	str	r2, [r4, #8]
 80024a0:	9b01      	ldr	r3, [sp, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	ddee      	ble.n	8002484 <__sflush_r+0xb8>
 80024a6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80024a8:	0032      	movs	r2, r6
 80024aa:	001f      	movs	r7, r3
 80024ac:	0028      	movs	r0, r5
 80024ae:	9b01      	ldr	r3, [sp, #4]
 80024b0:	6a21      	ldr	r1, [r4, #32]
 80024b2:	47b8      	blx	r7
 80024b4:	2800      	cmp	r0, #0
 80024b6:	dc07      	bgt.n	80024c8 <__sflush_r+0xfc>
 80024b8:	89a2      	ldrh	r2, [r4, #12]
 80024ba:	2340      	movs	r3, #64	@ 0x40
 80024bc:	2001      	movs	r0, #1
 80024be:	4313      	orrs	r3, r2
 80024c0:	b21b      	sxth	r3, r3
 80024c2:	81a3      	strh	r3, [r4, #12]
 80024c4:	4240      	negs	r0, r0
 80024c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80024c8:	9b01      	ldr	r3, [sp, #4]
 80024ca:	1836      	adds	r6, r6, r0
 80024cc:	1a1b      	subs	r3, r3, r0
 80024ce:	9301      	str	r3, [sp, #4]
 80024d0:	e7e6      	b.n	80024a0 <__sflush_r+0xd4>
 80024d2:	46c0      	nop			@ (mov r8, r8)
 80024d4:	dfbffffe 	.word	0xdfbffffe

080024d8 <_fflush_r>:
 80024d8:	690b      	ldr	r3, [r1, #16]
 80024da:	b570      	push	{r4, r5, r6, lr}
 80024dc:	0005      	movs	r5, r0
 80024de:	000c      	movs	r4, r1
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d102      	bne.n	80024ea <_fflush_r+0x12>
 80024e4:	2500      	movs	r5, #0
 80024e6:	0028      	movs	r0, r5
 80024e8:	bd70      	pop	{r4, r5, r6, pc}
 80024ea:	2800      	cmp	r0, #0
 80024ec:	d004      	beq.n	80024f8 <_fflush_r+0x20>
 80024ee:	6a03      	ldr	r3, [r0, #32]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <_fflush_r+0x20>
 80024f4:	f7ff fc6a 	bl	8001dcc <__sinit>
 80024f8:	220c      	movs	r2, #12
 80024fa:	5ea3      	ldrsh	r3, [r4, r2]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0f1      	beq.n	80024e4 <_fflush_r+0xc>
 8002500:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002502:	07d2      	lsls	r2, r2, #31
 8002504:	d404      	bmi.n	8002510 <_fflush_r+0x38>
 8002506:	059b      	lsls	r3, r3, #22
 8002508:	d402      	bmi.n	8002510 <_fflush_r+0x38>
 800250a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800250c:	f7ff fe5f 	bl	80021ce <__retarget_lock_acquire_recursive>
 8002510:	0028      	movs	r0, r5
 8002512:	0021      	movs	r1, r4
 8002514:	f7ff ff5a 	bl	80023cc <__sflush_r>
 8002518:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800251a:	0005      	movs	r5, r0
 800251c:	07db      	lsls	r3, r3, #31
 800251e:	d4e2      	bmi.n	80024e6 <_fflush_r+0xe>
 8002520:	89a3      	ldrh	r3, [r4, #12]
 8002522:	059b      	lsls	r3, r3, #22
 8002524:	d4df      	bmi.n	80024e6 <_fflush_r+0xe>
 8002526:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002528:	f7ff fe52 	bl	80021d0 <__retarget_lock_release_recursive>
 800252c:	e7db      	b.n	80024e6 <_fflush_r+0xe>
	...

08002530 <__swhatbuf_r>:
 8002530:	b570      	push	{r4, r5, r6, lr}
 8002532:	000e      	movs	r6, r1
 8002534:	001d      	movs	r5, r3
 8002536:	230e      	movs	r3, #14
 8002538:	5ec9      	ldrsh	r1, [r1, r3]
 800253a:	0014      	movs	r4, r2
 800253c:	b096      	sub	sp, #88	@ 0x58
 800253e:	2900      	cmp	r1, #0
 8002540:	da0c      	bge.n	800255c <__swhatbuf_r+0x2c>
 8002542:	89b2      	ldrh	r2, [r6, #12]
 8002544:	2380      	movs	r3, #128	@ 0x80
 8002546:	0011      	movs	r1, r2
 8002548:	4019      	ands	r1, r3
 800254a:	421a      	tst	r2, r3
 800254c:	d114      	bne.n	8002578 <__swhatbuf_r+0x48>
 800254e:	2380      	movs	r3, #128	@ 0x80
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	2000      	movs	r0, #0
 8002554:	6029      	str	r1, [r5, #0]
 8002556:	6023      	str	r3, [r4, #0]
 8002558:	b016      	add	sp, #88	@ 0x58
 800255a:	bd70      	pop	{r4, r5, r6, pc}
 800255c:	466a      	mov	r2, sp
 800255e:	f000 f853 	bl	8002608 <_fstat_r>
 8002562:	2800      	cmp	r0, #0
 8002564:	dbed      	blt.n	8002542 <__swhatbuf_r+0x12>
 8002566:	23f0      	movs	r3, #240	@ 0xf0
 8002568:	9901      	ldr	r1, [sp, #4]
 800256a:	021b      	lsls	r3, r3, #8
 800256c:	4019      	ands	r1, r3
 800256e:	4b04      	ldr	r3, [pc, #16]	@ (8002580 <__swhatbuf_r+0x50>)
 8002570:	18c9      	adds	r1, r1, r3
 8002572:	424b      	negs	r3, r1
 8002574:	4159      	adcs	r1, r3
 8002576:	e7ea      	b.n	800254e <__swhatbuf_r+0x1e>
 8002578:	2100      	movs	r1, #0
 800257a:	2340      	movs	r3, #64	@ 0x40
 800257c:	e7e9      	b.n	8002552 <__swhatbuf_r+0x22>
 800257e:	46c0      	nop			@ (mov r8, r8)
 8002580:	ffffe000 	.word	0xffffe000

08002584 <__smakebuf_r>:
 8002584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002586:	2602      	movs	r6, #2
 8002588:	898b      	ldrh	r3, [r1, #12]
 800258a:	0005      	movs	r5, r0
 800258c:	000c      	movs	r4, r1
 800258e:	b085      	sub	sp, #20
 8002590:	4233      	tst	r3, r6
 8002592:	d007      	beq.n	80025a4 <__smakebuf_r+0x20>
 8002594:	0023      	movs	r3, r4
 8002596:	3347      	adds	r3, #71	@ 0x47
 8002598:	6023      	str	r3, [r4, #0]
 800259a:	6123      	str	r3, [r4, #16]
 800259c:	2301      	movs	r3, #1
 800259e:	6163      	str	r3, [r4, #20]
 80025a0:	b005      	add	sp, #20
 80025a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025a4:	ab03      	add	r3, sp, #12
 80025a6:	aa02      	add	r2, sp, #8
 80025a8:	f7ff ffc2 	bl	8002530 <__swhatbuf_r>
 80025ac:	9f02      	ldr	r7, [sp, #8]
 80025ae:	9001      	str	r0, [sp, #4]
 80025b0:	0039      	movs	r1, r7
 80025b2:	0028      	movs	r0, r5
 80025b4:	f7ff fe7a 	bl	80022ac <_malloc_r>
 80025b8:	2800      	cmp	r0, #0
 80025ba:	d108      	bne.n	80025ce <__smakebuf_r+0x4a>
 80025bc:	220c      	movs	r2, #12
 80025be:	5ea3      	ldrsh	r3, [r4, r2]
 80025c0:	059a      	lsls	r2, r3, #22
 80025c2:	d4ed      	bmi.n	80025a0 <__smakebuf_r+0x1c>
 80025c4:	2203      	movs	r2, #3
 80025c6:	4393      	bics	r3, r2
 80025c8:	431e      	orrs	r6, r3
 80025ca:	81a6      	strh	r6, [r4, #12]
 80025cc:	e7e2      	b.n	8002594 <__smakebuf_r+0x10>
 80025ce:	2380      	movs	r3, #128	@ 0x80
 80025d0:	89a2      	ldrh	r2, [r4, #12]
 80025d2:	6020      	str	r0, [r4, #0]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	81a3      	strh	r3, [r4, #12]
 80025d8:	9b03      	ldr	r3, [sp, #12]
 80025da:	6120      	str	r0, [r4, #16]
 80025dc:	6167      	str	r7, [r4, #20]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00c      	beq.n	80025fc <__smakebuf_r+0x78>
 80025e2:	0028      	movs	r0, r5
 80025e4:	230e      	movs	r3, #14
 80025e6:	5ee1      	ldrsh	r1, [r4, r3]
 80025e8:	f000 f820 	bl	800262c <_isatty_r>
 80025ec:	2800      	cmp	r0, #0
 80025ee:	d005      	beq.n	80025fc <__smakebuf_r+0x78>
 80025f0:	2303      	movs	r3, #3
 80025f2:	89a2      	ldrh	r2, [r4, #12]
 80025f4:	439a      	bics	r2, r3
 80025f6:	3b02      	subs	r3, #2
 80025f8:	4313      	orrs	r3, r2
 80025fa:	81a3      	strh	r3, [r4, #12]
 80025fc:	89a3      	ldrh	r3, [r4, #12]
 80025fe:	9a01      	ldr	r2, [sp, #4]
 8002600:	4313      	orrs	r3, r2
 8002602:	81a3      	strh	r3, [r4, #12]
 8002604:	e7cc      	b.n	80025a0 <__smakebuf_r+0x1c>
	...

08002608 <_fstat_r>:
 8002608:	2300      	movs	r3, #0
 800260a:	b570      	push	{r4, r5, r6, lr}
 800260c:	4d06      	ldr	r5, [pc, #24]	@ (8002628 <_fstat_r+0x20>)
 800260e:	0004      	movs	r4, r0
 8002610:	0008      	movs	r0, r1
 8002612:	0011      	movs	r1, r2
 8002614:	602b      	str	r3, [r5, #0]
 8002616:	f7fd ffc7 	bl	80005a8 <_fstat>
 800261a:	1c43      	adds	r3, r0, #1
 800261c:	d103      	bne.n	8002626 <_fstat_r+0x1e>
 800261e:	682b      	ldr	r3, [r5, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d000      	beq.n	8002626 <_fstat_r+0x1e>
 8002624:	6023      	str	r3, [r4, #0]
 8002626:	bd70      	pop	{r4, r5, r6, pc}
 8002628:	2000025c 	.word	0x2000025c

0800262c <_isatty_r>:
 800262c:	2300      	movs	r3, #0
 800262e:	b570      	push	{r4, r5, r6, lr}
 8002630:	4d06      	ldr	r5, [pc, #24]	@ (800264c <_isatty_r+0x20>)
 8002632:	0004      	movs	r4, r0
 8002634:	0008      	movs	r0, r1
 8002636:	602b      	str	r3, [r5, #0]
 8002638:	f7fd ffc4 	bl	80005c4 <_isatty>
 800263c:	1c43      	adds	r3, r0, #1
 800263e:	d103      	bne.n	8002648 <_isatty_r+0x1c>
 8002640:	682b      	ldr	r3, [r5, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d000      	beq.n	8002648 <_isatty_r+0x1c>
 8002646:	6023      	str	r3, [r4, #0]
 8002648:	bd70      	pop	{r4, r5, r6, pc}
 800264a:	46c0      	nop			@ (mov r8, r8)
 800264c:	2000025c 	.word	0x2000025c

08002650 <_sbrk_r>:
 8002650:	2300      	movs	r3, #0
 8002652:	b570      	push	{r4, r5, r6, lr}
 8002654:	4d06      	ldr	r5, [pc, #24]	@ (8002670 <_sbrk_r+0x20>)
 8002656:	0004      	movs	r4, r0
 8002658:	0008      	movs	r0, r1
 800265a:	602b      	str	r3, [r5, #0]
 800265c:	f7fd ffc6 	bl	80005ec <_sbrk>
 8002660:	1c43      	adds	r3, r0, #1
 8002662:	d103      	bne.n	800266c <_sbrk_r+0x1c>
 8002664:	682b      	ldr	r3, [r5, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d000      	beq.n	800266c <_sbrk_r+0x1c>
 800266a:	6023      	str	r3, [r4, #0]
 800266c:	bd70      	pop	{r4, r5, r6, pc}
 800266e:	46c0      	nop			@ (mov r8, r8)
 8002670:	2000025c 	.word	0x2000025c

08002674 <_init>:
 8002674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002676:	46c0      	nop			@ (mov r8, r8)
 8002678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800267a:	bc08      	pop	{r3}
 800267c:	469e      	mov	lr, r3
 800267e:	4770      	bx	lr

08002680 <_fini>:
 8002680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002682:	46c0      	nop			@ (mov r8, r8)
 8002684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002686:	bc08      	pop	{r3}
 8002688:	469e      	mov	lr, r3
 800268a:	4770      	bx	lr
